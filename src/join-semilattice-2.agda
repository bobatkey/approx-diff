{-# OPTIONS --postfix-projections --safe --without-K #-}

module join-semilattice-2 where

open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to Unit)
open import Level
open import basics
open import poset using (Poset; _√ó_)

record JoinSemilattice (A : Poset) : Set (suc 0‚Ñì) where
  no-eta-equality
  open Poset public

  field
    _‚à®_          : A .Carrier ‚Üí A .Carrier ‚Üí A .Carrier
    ‚ä•            : A .Carrier
    ‚à®-isJoin     : IsJoin (A .‚â§-isPreorder) _‚à®_
    ‚ä•-isBottom   : IsBottom (A .‚â§-isPreorder) ‚ä•

module _ {A B : Poset} where
  open Poset

  record _=>_ (X : JoinSemilattice A) (Y : JoinSemilattice B) : Set where
    open JoinSemilattice
    field
      func : A .Carrier ‚Üí B .Carrier
      monotone : ‚àÄ {x‚ÇÅ x‚ÇÇ} ‚Üí A ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí B ._‚â§_ (func x‚ÇÅ) (func x‚ÇÇ)
      ‚à®-preserving : ‚àÄ {x x'} ‚Üí B ._‚â§_ (func (X ._‚à®_ x x')) (Y ._‚à®_ (func x) (func x'))
      ‚ä•-preserving : B ._‚â§_ (func (X .‚ä•)) (Y .‚ä•)

  record _‚âÉm_ {X : JoinSemilattice A} {Y : JoinSemilattice B} (f g : X => Y) : Set where
    open _=>_
    field
      eqfunc : ‚àÄ x ‚Üí _‚âÉ_ B (f .func x) (g .func x)

module _ where
  open JoinSemilattice
  open _=>_

  id : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí X => X
  id .func x = x
  id .monotone x‚â§x' = x‚â§x'
  id {X} .‚à®-preserving = X .‚â§-refl
  id {X} .‚ä•-preserving = X .‚â§-refl

  _‚àò_ : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} ‚Üí Y => Z ‚Üí X => Y ‚Üí X => Z
  (f ‚àò g) .func x = f .func (g .func x)
  (f ‚àò g) .monotone x‚â§x' = f .monotone (g .monotone x‚â§x')
  _‚àò_ {C = C} f g .‚à®-preserving = C .‚â§-trans (f .monotone (g .‚à®-preserving)) (f .‚à®-preserving)
  _‚àò_ {C = C} f g .‚ä•-preserving = C .‚â§-trans (f .monotone (g .‚ä•-preserving)) (f .‚ä•-preserving)

  -- constant (left zero) morphisms
  ‚ä•-map : ‚àÄ {A}{B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí X => Y
  ‚ä•-map {Y = Y} .func _ = Y .‚ä•
  ‚ä•-map {B = B} .monotone _ = B .‚â§-refl
  ‚ä•-map {Y = Y} .‚à®-preserving = IsJoin.idem (Y .‚à®-isJoin) .proj‚ÇÇ
  ‚ä•-map {X}{Y} .‚ä•-preserving = Y .‚â§-refl

------------------------------------------------------------------------------
-- One element semilattice, for use when there are no approximations
module _ where
  open JoinSemilattice

  ùüô : JoinSemilattice poset.ùüô
  ùüô ._‚à®_ tt tt = tt
  ùüô .‚ä• = tt
  ùüô .‚à®-isJoin .IsJoin.inl = tt
  ùüô .‚à®-isJoin .IsJoin.inr = tt
  ùüô .‚à®-isJoin .IsJoin.[_,_] tt tt = tt
  ùüô .‚ä•-isBottom .IsBottom.‚â§-bottom = tt

  -- this is a zero object (both initial and terminal)
  initial : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí ùüô => X
  initial = ‚ä•-map

------------------------------------------------------------------------------
-- Lifting
module _ where
  open poset using (LCarrier; <_>; bottom)
  open JoinSemilattice

  L : ‚àÄ {A} ‚Üí JoinSemilattice A ‚Üí JoinSemilattice (poset.L A)
  L X ._‚à®_ bottom bottom = bottom
  L X ._‚à®_ < x >  bottom = < x >
  L X ._‚à®_ bottom < y >  = < y >
  L X ._‚à®_ < x >  < y >  = < X ._‚à®_ x y >
  L X .‚ä• = bottom
  L X .‚à®-isJoin .IsJoin.inl {bottom} {bottom} = tt
  L X .‚à®-isJoin .IsJoin.inl {bottom} {< x >}  = tt
  L {A} X .‚à®-isJoin .IsJoin.inl {< x >}  {bottom} = A .‚â§-refl
  L X .‚à®-isJoin .IsJoin.inl {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inl
  L X .‚à®-isJoin .IsJoin.inr {bottom} {bottom} = tt
  L {A} X .‚à®-isJoin .IsJoin.inr {bottom} {< x >}  = A. ‚â§-refl
  L X .‚à®-isJoin .IsJoin.inr {< x >}  {bottom} = tt
  L X .‚à®-isJoin .IsJoin.inr {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inr
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{bottom} m‚ÇÅ m‚ÇÇ = tt
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{< z >}  m‚ÇÅ m‚ÇÇ = tt
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{< y >} {z}      m‚ÇÅ m‚ÇÇ = m‚ÇÇ
  L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {bottom}{z}      m‚ÇÅ m‚ÇÇ = m‚ÇÅ
  L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {< y >} {< z >}  m‚ÇÅ m‚ÇÇ = X .‚à®-isJoin .IsJoin.[_,_] m‚ÇÅ m‚ÇÇ
  L X .‚ä•-isBottom .IsBottom.‚â§-bottom {bottom} = tt
  L X .‚ä•-isBottom .IsBottom.‚â§-bottom {< x >} = tt
