{-# OPTIONS --postfix-projections --safe --without-K #-}

module join-semilattice-2 where

open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Unit using (tt) renaming (‚ä§ to Unit)
open import Level
open import Relation.Binary using (IsEquivalence)
open import basics
open import preorder using (Preorder; _√ó_)

record JoinSemilattice (A : Preorder) : Set (suc 0‚Ñì) where
  no-eta-equality
  open Preorder public

  field
    _‚à®_          : A .Carrier ‚Üí A .Carrier ‚Üí A .Carrier
    ‚ä•            : A .Carrier
    ‚à®-isJoin     : IsJoin (A .‚â§-isPreorder) _‚à®_
    ‚ä•-isBottom   : IsBottom (A .‚â§-isPreorder) ‚ä•

  open IsEquivalence (isEquivalenceOf (A .‚â§-isPreorder)) renaming (refl to ‚âÉ-refl; sym to ‚âÉ-sym) public

module _ {A B : Preorder} where
  open Preorder

  record _=>_ (X : JoinSemilattice A) (Y : JoinSemilattice B) : Set where
    open JoinSemilattice
    field
      func : A .Carrier ‚Üí B .Carrier
      monotone : ‚àÄ {x‚ÇÅ x‚ÇÇ} ‚Üí A ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí B ._‚â§_ (func x‚ÇÅ) (func x‚ÇÇ)
      ‚à®-preserving : ‚àÄ {x x'} ‚Üí B ._‚â§_ (func (X ._‚à®_ x x')) (Y ._‚à®_ (func x) (func x'))
      ‚ä•-preserving : B ._‚â§_ (func (X .‚ä•)) (Y .‚ä•)

  record _‚âÉm_ {X : JoinSemilattice A} {Y : JoinSemilattice B} (f g : X => Y) : Set where
    open _=>_
    field
      eqfunc : ‚àÄ x ‚Üí _‚âÉ_ B (f .func x) (g .func x)

module _ where
  open JoinSemilattice
  open _=>_

  id : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí X => X
  id .func x = x
  id .monotone x‚â§x' = x‚â§x'
  id {X} .‚à®-preserving = X .‚â§-refl
  id {X} .‚ä•-preserving = X .‚â§-refl

  _‚àò_ : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} ‚Üí Y => Z ‚Üí X => Y ‚Üí X => Z
  (f ‚àò g) .func x = f .func (g .func x)
  (f ‚àò g) .monotone x‚â§x' = f .monotone (g .monotone x‚â§x')
  _‚àò_ {C = C} f g .‚à®-preserving = C .‚â§-trans (f .monotone (g .‚à®-preserving)) (f .‚à®-preserving)
  _‚àò_ {C = C} f g .‚ä•-preserving = C .‚â§-trans (f .monotone (g .‚ä•-preserving)) (f .‚ä•-preserving)

  ‚ä•-map : ‚àÄ {A}{B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí X => Y
  ‚ä•-map {Y = Y} .func y = Y .‚ä•
  ‚ä•-map {B = B} .monotone _ = B .‚â§-refl
  ‚ä•-map {Y = Y} .‚à®-preserving = IsJoin.idem (Y .‚à®-isJoin) .proj‚ÇÇ
  ‚ä•-map {B = B} .‚ä•-preserving = B .‚â§-refl

------------------------------------------------------------------------------
-- One element semilattice, for use when there are no approximations
module _ where
  open JoinSemilattice

  ùüô : JoinSemilattice preorder.ùüô
  ùüô ._‚à®_ tt tt = tt
  ùüô .‚ä• = tt
  ùüô .‚à®-isJoin .IsJoin.inl = tt
  ùüô .‚à®-isJoin .IsJoin.inr = tt
  ùüô .‚à®-isJoin .IsJoin.[_,_] tt tt = tt
  ùüô .‚ä•-isBottom .IsBottom.‚â§-bottom = tt

  -- this is a zero object (both initial and terminal)
  initial : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí ùüô => X
  initial = ‚ä•-map

------------------------------------------------------------------------------
-- Lifting
module _ where
  open preorder using (LCarrier; <_>; bottom)
  open JoinSemilattice
  open _=>_

  L : ‚àÄ {A} ‚Üí JoinSemilattice A ‚Üí JoinSemilattice (preorder.L A)
  L X ._‚à®_ bottom bottom = bottom
  L X ._‚à®_ < x >  bottom = < x >
  L X ._‚à®_ bottom < y >  = < y >
  L X ._‚à®_ < x >  < y >  = < X ._‚à®_ x y >
  L X .‚ä• = bottom
  L X .‚à®-isJoin .IsJoin.inl {bottom} {bottom} = tt
  L X .‚à®-isJoin .IsJoin.inl {bottom} {< x >}  = tt
  L {A} X .‚à®-isJoin .IsJoin.inl {< x >}  {bottom} = A .‚â§-refl
  L X .‚à®-isJoin .IsJoin.inl {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inl
  L X .‚à®-isJoin .IsJoin.inr {bottom} {bottom} = tt
  L {A} X .‚à®-isJoin .IsJoin.inr {bottom} {< x >}  = A. ‚â§-refl
  L X .‚à®-isJoin .IsJoin.inr {< x >}  {bottom} = tt
  L X .‚à®-isJoin .IsJoin.inr {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inr
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{bottom} m‚ÇÅ m‚ÇÇ = tt
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{< z >}  m‚ÇÅ m‚ÇÇ = tt
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{< y >} {z}      m‚ÇÅ m‚ÇÇ = m‚ÇÇ
  L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {bottom}{z}      m‚ÇÅ m‚ÇÇ = m‚ÇÅ
  L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {< y >} {< z >}  m‚ÇÅ m‚ÇÇ = X .‚à®-isJoin .IsJoin.[_,_] m‚ÇÅ m‚ÇÇ
  L X .‚ä•-isBottom .IsBottom.‚â§-bottom {bottom} = tt
  L X .‚ä•-isBottom .IsBottom.‚â§-bottom {< x >} = tt

  L-func : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí X => Y ‚Üí L X => L Y
  L-func m .func bottom = bottom
  L-func m .func < x > = < m .func x >
  L-func m .monotone {bottom} {bottom} _ = tt
  L-func m .monotone {bottom} {< _ >} _ = tt
  L-func m .monotone {< _ >} {bottom} ()
  L-func m .monotone {< _ >} {< _ >} x‚ÇÅ‚â§x‚ÇÇ = m .monotone x‚ÇÅ‚â§x‚ÇÇ
  L-func m .‚à®-preserving {bottom} {bottom} = tt
  L-func {B = B} m .‚à®-preserving {bottom} {< _ >} = B .‚â§-refl
  L-func {B = B} m .‚à®-preserving {< x >} {bottom} = B .‚â§-refl
  L-func m .‚à®-preserving {< _ >} {< _ >} = m .‚à®-preserving
  L-func m .‚ä•-preserving = tt

  -- Lifting is /not/ a monad: L-unit is not ‚ä•-preserving

  L-join : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí L (L X) => L X
  L-join .func bottom = bottom
  L-join .func < bottom > = bottom
  L-join .func < < x > > = < x >
  L-join .monotone {bottom} {bottom} _ = tt
  L-join .monotone {bottom} {< bottom >} _ = tt
  L-join .monotone {bottom} {< < _ > >} _ = tt
  L-join .monotone {< bottom >} {< bottom >} _ = tt
  L-join .monotone {< bottom >} {< < _ > >} _ = tt
  L-join .monotone {< < _ > >} {< < _ > >} x‚â§x' = x‚â§x'
  L-join .‚à®-preserving {bottom} {bottom} = tt
  L-join .‚à®-preserving {bottom} {< bottom >} = tt
  L-join {A} .‚à®-preserving {bottom} {< < x > >} = A .‚â§-refl
  L-join .‚à®-preserving {< bottom >} {bottom} = tt
  L-join {A} .‚à®-preserving {< < _ > >} {bottom} = A .‚â§-refl
  L-join .‚à®-preserving {< bottom >} {< bottom >} = tt
  L-join {A} .‚à®-preserving {< bottom >} {< < x > >} = A .‚â§-refl
  L-join {A} .‚à®-preserving {< < _ > >} {< bottom >} = A .‚â§-refl
  L-join {A} .‚à®-preserving {< < _ > >} {< < _ > >} = A .‚â§-refl
  L-join .‚ä•-preserving = tt

  -- Lifting is a comonad in preorders with a bottom:
  L-counit : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí L X => X
  L-counit {X = X} .func bottom = X .‚ä•
  L-counit .func < x > = x
  L-counit {X = X} .monotone {bottom} _ = IsBottom.‚â§-bottom (X .‚ä•-isBottom)
  L-counit .monotone {< _ >} {< _ >} x‚â§x' = x‚â§x'
  L-counit {X = X} .‚à®-preserving {bottom} {bottom} = IsJoin.idem (X .‚à®-isJoin) .proj‚ÇÇ
  L-counit {X = X} .‚à®-preserving {bottom} {< _ >} =
    IsMonoid.lunit (monoidOfJoin _ (X .‚à®-isJoin) (X .‚ä•-isBottom)) .proj‚ÇÇ
  L-counit {X = X} .‚à®-preserving {< _ >} {bottom} =
    IsMonoid.runit (monoidOfJoin _ (X .‚à®-isJoin) (X .‚ä•-isBottom)) .proj‚ÇÇ
  L-counit {A} .‚à®-preserving {< _ >} {< _ >} = A .‚â§-refl
  L-counit {A} .‚ä•-preserving = A .‚â§-refl

  L-dup : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí L X => L (L X)
  L-dup .func bottom = bottom
  L-dup .func < x > = < < x > >
  L-dup .monotone {bottom} {bottom} _ = tt
  L-dup .monotone {bottom} {< _ >} _ = tt
  L-dup .monotone {< _ >} {< _ >} x‚â§x' = x‚â§x'
  L-dup .‚à®-preserving {bottom} {bottom} = tt
  L-dup {A} .‚à®-preserving {bottom} {< _ >} = A .‚â§-refl
  L-dup {A} .‚à®-preserving {< _ >} {bottom} = A .‚â§-refl
  L-dup {A} .‚à®-preserving {< _ >} {< _ >} = A .‚â§-refl
  L-dup .‚ä•-preserving = tt

  L-coassoc : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí (L-func L-dup ‚àò L-dup) ‚âÉm (L-dup ‚àò L-dup {X = X})
  L-coassoc ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
  L-coassoc ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
  L-coassoc {X = X} ._‚âÉm_.eqfunc < x > = X. ‚âÉ-refl

  L-unit1 : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí (L-counit ‚àò L-dup) ‚âÉm id {X = L X}
  L-unit1 ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
  L-unit1 ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
  L-unit1 {X = X} ._‚âÉm_.eqfunc < x > = X. ‚âÉ-refl

  L-unit2 : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí (L-func L-counit ‚àò L-dup) ‚âÉm id {X = L X}
  L-unit2 ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
  L-unit2 ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
  L-unit2 {X = X} ._‚âÉm_.eqfunc < x > = X. ‚âÉ-refl

-- TODO: Set-wide direct sums

------------------------------------------------------------------------------
-- Biproducts
module _ where
  open JoinSemilattice
  open _=>_

  _‚äï_ : ‚àÄ {A B} ‚Üí JoinSemilattice A ‚Üí JoinSemilattice B ‚Üí JoinSemilattice (A √ó B)
  (X ‚äï Y) ._‚à®_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚à®_ x‚ÇÅ x‚ÇÇ) , (Y ._‚à®_ y‚ÇÅ y‚ÇÇ)
  (X ‚äï Y) .‚ä• = X .‚ä• , Y .‚ä•
  (X ‚äï Y) .‚à®-isJoin .IsJoin.inl = X .‚à®-isJoin .IsJoin.inl , Y .‚à®-isJoin .IsJoin.inl
  (X ‚äï Y) .‚à®-isJoin .IsJoin.inr = X .‚à®-isJoin .IsJoin.inr , Y .‚à®-isJoin .IsJoin.inr
  (X ‚äï Y) .‚à®-isJoin .IsJoin.[_,_] (x‚ÇÅ‚â§z‚ÇÅ , y‚ÇÅ‚â§z‚ÇÇ) (x‚ÇÇ‚â§z‚ÇÅ , y‚ÇÇ‚â§z‚ÇÇ) =
    X .‚à®-isJoin .IsJoin.[_,_] x‚ÇÅ‚â§z‚ÇÅ x‚ÇÇ‚â§z‚ÇÅ ,
    Y .‚à®-isJoin .IsJoin.[_,_] y‚ÇÅ‚â§z‚ÇÇ y‚ÇÇ‚â§z‚ÇÇ
  (X ‚äï Y) .‚ä•-isBottom .IsBottom.‚â§-bottom = IsBottom.‚â§-bottom (X .‚ä•-isBottom) , IsBottom.‚â§-bottom (Y .‚ä•-isBottom)

  -- Product bits:
  project‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (X ‚äï Y) => X
  project‚ÇÅ .func = proj‚ÇÅ
  project‚ÇÅ .monotone = proj‚ÇÅ
  project‚ÇÅ {A} .‚à®-preserving = A .‚â§-refl
  project‚ÇÅ {A} .‚ä•-preserving = A .‚â§-refl

  project‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (X ‚äï Y) => Y
  project‚ÇÇ .func = proj‚ÇÇ
  project‚ÇÇ .monotone = proj‚ÇÇ
  project‚ÇÇ {B = B} .‚à®-preserving = B .‚â§-refl
  project‚ÇÇ {B = B} .‚ä•-preserving = B .‚â§-refl

  ‚ü®_,_‚ü© : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} ‚Üí X => Y ‚Üí X => Z ‚Üí X => (Y ‚äï Z)
  ‚ü® f , g ‚ü© .func x = f .func x , g .func x
  ‚ü® f , g ‚ü© .monotone x‚â§x' = f .monotone x‚â§x' , g .monotone x‚â§x'
  ‚ü® f , g ‚ü© .‚à®-preserving = f .‚à®-preserving , g .‚à®-preserving
  ‚ü® f , g ‚ü© .‚ä•-preserving = f .‚ä•-preserving , g . ‚ä•-preserving

  -- Coproduct bits:
  inject‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí X => (X ‚äï Y)
  inject‚ÇÅ {Y = Y} .func x = x , Y .‚ä•
  inject‚ÇÅ {B = B} .monotone x‚â§x' = x‚â§x' , B .‚â§-refl
  inject‚ÇÅ {A}{Y = Y} .‚à®-preserving = A .‚â§-refl , IsJoin.idem (Y .‚à®-isJoin) .proj‚ÇÇ
  inject‚ÇÅ {X}{Y} .‚ä•-preserving = X .‚â§-refl , Y .‚â§-refl

  inject‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí Y => (X ‚äï Y)
  inject‚ÇÇ {X = X} .func y = X .‚ä• , y
  inject‚ÇÇ {A} .monotone y‚â§y' = A. ‚â§-refl , y‚â§y'
  inject‚ÇÇ {B = B}{X = X} .‚à®-preserving = IsJoin.idem (X .‚à®-isJoin) .proj‚ÇÇ , B .‚â§-refl
  inject‚ÇÇ {A}{B} .‚ä•-preserving = A .‚â§-refl , B .‚â§-refl

  [_,_] : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} ‚Üí X => Z ‚Üí Y => Z ‚Üí (X ‚äï Y) => Z
  [_,_] {Z = Z} f g .func (x , y) = Z ._‚à®_ (f .func x) (g .func y)
  [_,_] {Z = Z} f g .monotone (x‚ÇÅ‚â§x‚ÇÅ' , x‚ÇÇ‚â§x‚ÇÇ') =
    IsJoin.mono (Z .‚à®-isJoin) (f .monotone x‚ÇÅ‚â§x‚ÇÅ') (g .monotone x‚ÇÇ‚â§x‚ÇÇ')
  [_,_] {C = C}{Z = Z} f g .‚à®-preserving {(x‚ÇÅ , y‚ÇÅ)}{(x‚ÇÇ , y‚ÇÇ)} =
    C .‚â§-trans (IsJoin.mono (Z .‚à®-isJoin) (f .‚à®-preserving) (g .‚à®-preserving))
               (interchange (IsJoin.sym (Z .‚à®-isJoin)))
    where open IsMonoid (monoidOfJoin (C .‚â§-isPreorder) (Z .‚à®-isJoin) (Z .‚ä•-isBottom))
  [_,_] {Z = Z} f g .‚ä•-preserving = Z[ f .‚ä•-preserving , g .‚ä•-preserving ]
    where open IsJoin (Z .‚à®-isJoin) renaming ([_,_] to Z[_,_])

  -- Biproduct properties
  proj‚ÇÅ-inverts-inj‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÅ {X = X}{Y} ‚àò inject‚ÇÅ) ‚âÉm id
  proj‚ÇÅ-inverts-inj‚ÇÅ {X = X} ._‚âÉm_.eqfunc x = ‚âÉ-refl X

  proj‚ÇÇ-inverts-inj‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÅ {X = X}{Y} ‚àò inject‚ÇÅ) ‚âÉm id
  proj‚ÇÇ-inverts-inj‚ÇÇ {X = X} ._‚âÉm_.eqfunc x = ‚âÉ-refl X

  proj‚ÇÅ-zeroes-inj‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÅ {X = X}{Y} ‚àò inject‚ÇÇ) ‚âÉm ‚ä•-map
  proj‚ÇÅ-zeroes-inj‚ÇÇ {X = X} ._‚âÉm_.eqfunc x = ‚âÉ-refl X

  proj‚ÇÇ-zeroes-inj‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÇ {X = X}{Y} ‚àò inject‚ÇÅ) ‚âÉm ‚ä•-map
  proj‚ÇÇ-zeroes-inj‚ÇÅ {X = X}{Y} ._‚âÉm_.eqfunc x = ‚âÉ-refl Y
