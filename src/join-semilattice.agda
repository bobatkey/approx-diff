{-# OPTIONS --postfix-projections --safe --without-K #-}

module join-semilattice where

open import Level
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _√ó_; _,_)
open import Data.Unit using (‚ä§; tt)
open import Data.Empty using () renaming (‚ä• to ùüò)
open import basics

record JoinSemilattice : Set (suc 0‚Ñì) where
  no-eta-equality
  field
    Carrier      : Set
    _‚â§_          : Carrier ‚Üí Carrier ‚Üí Set
    _‚à®_          : Carrier ‚Üí Carrier ‚Üí Carrier
    ‚ä•            : Carrier
    ‚â§-isPreorder : IsPreorder _‚â§_
    ‚à®-isJoin     : IsJoin ‚â§-isPreorder _‚à®_
    ‚ä•-isBottom   : IsBottom ‚â§-isPreorder ‚ä•

record _=>_ (X Y : JoinSemilattice) : Set where
  open JoinSemilattice
  open IsPreorder (Y .JoinSemilattice.‚â§-isPreorder)
  field
    func : X .Carrier ‚Üí Y .Carrier
    join-preserving : ‚àÄ x x' ‚Üí Y ._‚à®_ (func x) (func x') ‚âÉ func (X ._‚à®_ x x')
    -- bottom-preserving :
    -- monotone :
open _=>_

record _‚âÉm_ {X Y : JoinSemilattice} (f g : X => Y) : Set where
  open IsPreorder (Y .JoinSemilattice.‚â§-isPreorder)
  field
    eqfunc : ‚àÄ x ‚Üí f .func x ‚âÉ g .func x

open JoinSemilattice

id : ‚àÄ {X} ‚Üí X => X
id .func x = x

_‚àò_ : ‚àÄ {X Y Z} ‚Üí Y => Z ‚Üí X => Y ‚Üí X => Z
(f ‚àò g) .func x = f .func (g .func x)

‚ä•-map : ‚àÄ {X Y} ‚Üí X => Y
‚ä•-map {X}{Y} .func x = Y .‚ä•

-- FIXME: ‚à®-map

------------------------------------------------------------------------------
-- One element semilattice, for use when there are no approximations
ùüô : JoinSemilattice
ùüô .Carrier = ‚ä§
ùüô ._‚â§_ tt tt = ‚ä§
ùüô ._‚à®_ tt tt = tt
ùüô .‚ä• = tt
ùüô .‚â§-isPreorder .IsPreorder.refl = tt
ùüô .‚â§-isPreorder .IsPreorder.trans tt tt = tt
ùüô .‚à®-isJoin .IsJoin.inl = tt
ùüô .‚à®-isJoin .IsJoin.inr = tt
ùüô .‚à®-isJoin .IsJoin.[_,_] tt tt = tt
ùüô .‚ä•-isBottom .IsBottom.‚â§-bottom = tt

-- this is both initial and terminal...

------------------------------------------------------------------------------
-- Lifting

data LCarrier (X : Set) : Set where
  bottom : LCarrier X
  <_>    : X ‚Üí LCarrier X

-- Add a new bottom element to a finite join semilattice
L : JoinSemilattice ‚Üí JoinSemilattice
L X .Carrier = LCarrier (X .Carrier)
L X ._‚â§_ bottom bottom = ‚ä§
L X ._‚â§_ bottom < _ >  = ‚ä§
L X ._‚â§_ < _ >  bottom = ùüò
L X ._‚â§_ < x > < y >   = X ._‚â§_ x y
L X ._‚à®_ bottom bottom = bottom
L X ._‚à®_ < x >  bottom = < x >
L X ._‚à®_ bottom < y >  = < y >
L X ._‚à®_ < x >  < y >  = < X ._‚à®_ x y >
L X .‚ä• = bottom
L X .‚â§-isPreorder .IsPreorder.refl {bottom} = tt
L X .‚â§-isPreorder .IsPreorder.refl {< x >} = X .‚â§-isPreorder .IsPreorder.refl
L X .‚â§-isPreorder .IsPreorder.trans {bottom} {bottom} {bottom} m‚ÇÅ m‚ÇÇ = tt
L X .‚â§-isPreorder .IsPreorder.trans {bottom} {bottom} {< z >}  m‚ÇÅ m‚ÇÇ = tt
L X .‚â§-isPreorder .IsPreorder.trans {bottom} {< y >}  {< z >}  m‚ÇÅ m‚ÇÇ = tt
L X .‚â§-isPreorder .IsPreorder.trans {< x >}  {< y >}  {< z >}  m‚ÇÅ m‚ÇÇ =
  X .‚â§-isPreorder .IsPreorder.trans m‚ÇÅ m‚ÇÇ
L X .‚à®-isJoin .IsJoin.inl {bottom} {bottom} = tt
L X .‚à®-isJoin .IsJoin.inl {bottom} {< x >}  = tt
L X .‚à®-isJoin .IsJoin.inl {< x >}  {bottom} = X .‚â§-isPreorder .IsPreorder.refl
L X .‚à®-isJoin .IsJoin.inl {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inl
L X .‚à®-isJoin .IsJoin.inr {bottom} {bottom} = tt
L X .‚à®-isJoin .IsJoin.inr {bottom} {< x >}  = X .‚â§-isPreorder .IsPreorder.refl
L X .‚à®-isJoin .IsJoin.inr {< x >}  {bottom} = tt
L X .‚à®-isJoin .IsJoin.inr {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inr
L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{bottom} m‚ÇÅ m‚ÇÇ = tt
L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{< z >}  m‚ÇÅ m‚ÇÇ = tt
L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{< y >} {z}      m‚ÇÅ m‚ÇÇ = m‚ÇÇ
L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {bottom}{z}      m‚ÇÅ m‚ÇÇ = m‚ÇÅ
L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {< y >} {< z >}  m‚ÇÅ m‚ÇÇ = X .‚à®-isJoin .IsJoin.[_,_] m‚ÇÅ m‚ÇÇ
L X .‚ä•-isBottom .IsBottom.‚â§-bottom {bottom} = tt
L X .‚ä•-isBottom .IsBottom.‚â§-bottom {< x >} = tt

L-func : ‚àÄ {X Y} ‚Üí X => Y ‚Üí L X => L Y
L-func m .func bottom = bottom
L-func m .func < x > = < m .func x >

L-unit : ‚àÄ {X} ‚Üí X => L X
L-unit .func x = < x >

L-join : ‚àÄ {X} ‚Üí L (L X) => L X
L-join .func bottom = bottom
L-join .func < bottom > = bottom
L-join .func < < x > > = < x >


-- Lifting is a comonad in preorders with a bottom:
L-counit : ‚àÄ {X} ‚Üí L X => X
L-counit {X} .func bottom = X .‚ä•
L-counit .func < x > = x

L-dup : ‚àÄ {X} ‚Üí L X => L (L X)
L-dup .func bottom = bottom
L-dup .func < x > = < < x > >

L-coassoc : ‚àÄ {X} ‚Üí (L-func L-dup ‚àò L-dup) ‚âÉm (L-dup ‚àò L-dup {X})
L-coassoc ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
L-coassoc ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
L-coassoc {X} ._‚âÉm_.eqfunc < x > .proj‚ÇÅ = X .‚â§-isPreorder .IsPreorder.refl
L-coassoc {X} ._‚âÉm_.eqfunc < x > .proj‚ÇÇ = X .‚â§-isPreorder .IsPreorder.refl

L-unit1 : ‚àÄ {X} ‚Üí (L-counit ‚àò L-dup) ‚âÉm id {L X}
L-unit1 ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
L-unit1 ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
L-unit1 {X} ._‚âÉm_.eqfunc < x > .proj‚ÇÅ = X .‚â§-isPreorder .IsPreorder.refl
L-unit1 {X} ._‚âÉm_.eqfunc < x > .proj‚ÇÇ = X .‚â§-isPreorder .IsPreorder.refl

L-unit2 : ‚àÄ {X} ‚Üí (L-func L-counit ‚àò L-dup) ‚âÉm id {L X}
L-unit2 ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
L-unit2 ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
L-unit2 {X} ._‚âÉm_.eqfunc < x > .proj‚ÇÅ = X .‚â§-isPreorder .IsPreorder.refl
L-unit2 {X} ._‚âÉm_.eqfunc < x > .proj‚ÇÇ = X .‚â§-isPreorder .IsPreorder.refl

------------------------------------------------------------------------------
-- Set-wide direct sums of JoinSemilattices
module _ (I : Set) (X : I ‚Üí JoinSemilattice) where

  data FormalJoin : Set where
    bot  : FormalJoin
    el   : (i : I) ‚Üí X i .Carrier ‚Üí FormalJoin
    join : FormalJoin ‚Üí FormalJoin ‚Üí FormalJoin

  data UpperBound (i : I) : FormalJoin ‚Üí X i .Carrier ‚Üí Set where
    bot   : ‚àÄ {x} ‚Üí UpperBound i bot x
    el    : ‚àÄ {x y} ‚Üí X i ._‚â§_ x y ‚Üí UpperBound i (el i x) y
    join  : ‚àÄ {j‚ÇÅ j‚ÇÇ x} ‚Üí UpperBound i j‚ÇÅ x ‚Üí UpperBound i j‚ÇÇ x ‚Üí UpperBound i (join j‚ÇÅ j‚ÇÇ) x

  ‚®Å : JoinSemilattice
  ‚®Å .Carrier = FormalJoin
  ‚®Å ._‚â§_ j‚ÇÅ j‚ÇÇ = ‚àÄ i x ‚Üí UpperBound i j‚ÇÇ x ‚Üí UpperBound i j‚ÇÅ x
  ‚®Å ._‚à®_ = join
  ‚®Å .‚ä• = bot
  ‚®Å .‚â§-isPreorder .IsPreorder.refl i x u = u
  ‚®Å .‚â§-isPreorder .IsPreorder.trans m‚ÇÅ m‚ÇÇ i x u = m‚ÇÅ i x (m‚ÇÇ i x u)
  ‚®Å .‚à®-isJoin .IsJoin.inl i x (join u‚ÇÅ u‚ÇÇ) = u‚ÇÅ
  ‚®Å .‚à®-isJoin .IsJoin.inr i x (join u‚ÇÅ u‚ÇÇ) = u‚ÇÇ
  ‚®Å .‚à®-isJoin .IsJoin.[_,_] m‚ÇÅ m‚ÇÇ i x u = join (m‚ÇÅ i x u) (m‚ÇÇ i x u)
  ‚®Å .‚ä•-isBottom .IsBottom.‚â§-bottom i x _ = bot

  inj-‚®Å : (i : I) ‚Üí X i => ‚®Å
  inj-‚®Å i .func x = el i x

  module _ (Z : JoinSemilattice) (X=>Z : ‚àÄ i ‚Üí X i => Z) where
    module Z = JoinSemilattice Z

    elim-‚®Å-func : ‚®Å .Carrier ‚Üí Z .Carrier
    elim-‚®Å-func bot = Z.‚ä•
    elim-‚®Å-func (el i x) = X=>Z i .func x
    elim-‚®Å-func (join j‚ÇÅ j‚ÇÇ) = elim-‚®Å-func j‚ÇÅ Z.‚à® elim-‚®Å-func j‚ÇÇ

    elim-‚®Å : ‚®Å => Z
    elim-‚®Å .func = elim-‚®Å-func

------------------------------------------------------------------------------
-- Biproducts
_‚äï_ : JoinSemilattice ‚Üí JoinSemilattice ‚Üí JoinSemilattice
(X ‚äï Y) .Carrier = X .Carrier √ó Y .Carrier
(X ‚äï Y) ._‚â§_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚â§_ x‚ÇÅ x‚ÇÇ) √ó (Y ._‚â§_ y‚ÇÅ y‚ÇÇ)
(X ‚äï Y) ._‚à®_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚à®_ x‚ÇÅ x‚ÇÇ) , (Y ._‚à®_ y‚ÇÅ y‚ÇÇ)
(X ‚äï Y) .‚ä• = X .‚ä• , Y .‚ä•
(X ‚äï Y) .‚â§-isPreorder .IsPreorder.refl =
  X .‚â§-isPreorder .IsPreorder.refl , Y .‚â§-isPreorder .IsPreorder.refl
(X ‚äï Y) .‚â§-isPreorder .IsPreorder.trans (x‚ÇÅ‚â§y‚ÇÅ , x‚ÇÇ‚â§y‚ÇÇ) (y‚ÇÅ‚â§z‚ÇÅ , y‚ÇÇ‚â§z‚ÇÇ) =
  X .‚â§-isPreorder .IsPreorder.trans x‚ÇÅ‚â§y‚ÇÅ y‚ÇÅ‚â§z‚ÇÅ ,
  Y .‚â§-isPreorder .IsPreorder.trans x‚ÇÇ‚â§y‚ÇÇ y‚ÇÇ‚â§z‚ÇÇ
(X ‚äï Y) .‚à®-isJoin .IsJoin.inl = X .‚à®-isJoin .IsJoin.inl , Y .‚à®-isJoin .IsJoin.inl
(X ‚äï Y) .‚à®-isJoin .IsJoin.inr = X .‚à®-isJoin .IsJoin.inr , Y .‚à®-isJoin .IsJoin.inr
(X ‚äï Y) .‚à®-isJoin .IsJoin.[_,_] (x‚ÇÅ‚â§z‚ÇÅ , y‚ÇÅ‚â§z‚ÇÇ) (x‚ÇÇ‚â§z‚ÇÅ , y‚ÇÇ‚â§z‚ÇÇ) =
  X .‚à®-isJoin .IsJoin.[_,_] x‚ÇÅ‚â§z‚ÇÅ x‚ÇÇ‚â§z‚ÇÅ ,
  Y .‚à®-isJoin .IsJoin.[_,_] y‚ÇÅ‚â§z‚ÇÇ y‚ÇÇ‚â§z‚ÇÇ
(X ‚äï Y) .‚ä•-isBottom .IsBottom.‚â§-bottom =
  X .‚ä•-isBottom .IsBottom.‚â§-bottom , Y .‚ä•-isBottom .IsBottom.‚â§-bottom

-- need to prove that this gives a biproduct

-- Product bits:
project‚ÇÅ : ‚àÄ {X Y} ‚Üí (X ‚äï Y) => X
project‚ÇÅ .func = proj‚ÇÅ
project‚ÇÅ {X} .join-preserving _ _ =
   X. ‚â§-isPreorder .IsPreorder.refl , X .‚â§-isPreorder .IsPreorder.refl

project‚ÇÇ : ‚àÄ {X Y} ‚Üí (X ‚äï Y) => Y
project‚ÇÇ .func = proj‚ÇÇ
project‚ÇÇ {X} {Y} .join-preserving _ _ =
   Y. ‚â§-isPreorder .IsPreorder.refl , Y .‚â§-isPreorder .IsPreorder.refl

‚ü®_,_‚ü© : ‚àÄ {X Y Z} ‚Üí X => Y ‚Üí X => Z ‚Üí X => (Y ‚äï Z)
‚ü® f , g ‚ü© .func x = f .func x , g .func x
‚ü® f , g ‚ü© .join-preserving x x' =
   ((f .join-preserving x x') .proj‚ÇÅ , (g .join-preserving x x') .proj‚ÇÅ) ,
   ((f .join-preserving x x') .proj‚ÇÇ , (g .join-preserving x x') .proj‚ÇÇ)

-- Coproduct bits:
inject‚ÇÅ : ‚àÄ {X Y} ‚Üí X => (X ‚äï Y)
inject‚ÇÅ {X}{Y} .func x = x , Y .‚ä•
inject‚ÇÅ {X}{Y} .join-preserving _ _ =
   (X. ‚â§-isPreorder .IsPreorder.refl , proj‚ÇÅ (IsJoin.idem (Y .‚à®-isJoin))) ,
   (X. ‚â§-isPreorder .IsPreorder.refl , Y .‚ä•-isBottom .IsBottom.‚â§-bottom)

inject‚ÇÇ : ‚àÄ {X Y} ‚Üí Y => (X ‚äï Y)
inject‚ÇÇ {X}{Y} .func y = X .‚ä• , y

[_,_] : ‚àÄ {X Y Z} ‚Üí X => Z ‚Üí Y => Z ‚Üí (X ‚äï Y) => Z
[_,_] {X}{Y}{Z} f g .func (x , y) = Z ._‚à®_ (f .func x) (g .func y)
