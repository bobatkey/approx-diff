{-# OPTIONS --postfix-projections --allow-unsolved-metas --without-K #-}

module join-semilattice where

open import Level
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _√ó_; _,_)
open import Data.Unit using (‚ä§; tt)
open import Data.Empty using () renaming (‚ä• to ùüò)
open import Relation.Binary using (IsEquivalence; Reflexive)
open import basics

record JoinSemilattice : Set (suc 0‚Ñì) where
  no-eta-equality
  field
    Carrier      : Set
    _‚â§_          : Carrier ‚Üí Carrier ‚Üí Set
    _‚à®_          : Carrier ‚Üí Carrier ‚Üí Carrier
    ‚ä•            : Carrier
    ‚â§-isPreorder : IsPreorder _‚â§_
    ‚à®-isJoin     : IsJoin ‚â§-isPreorder _‚à®_
    ‚ä•-isBottom   : IsBottom ‚â§-isPreorder ‚ä•

  ‚à®-‚ä•-isMonoid : IsMonoid ‚â§-isPreorder _‚à®_ ‚ä•
  ‚à®-‚ä•-isMonoid = monoidOfJoin _ ‚à®-isJoin ‚ä•-isBottom

  open IsPreorder ‚â§-isPreorder renaming (refl to ‚â§-refl; trans to ‚â§-trans) public
  open IsEquivalence (isEquivalenceOf ‚â§-isPreorder) renaming (refl to ‚âÉ-refl; sym to ‚âÉ-sym) public
  open IsBottom ‚ä•-isBottom public
  open IsJoin ‚à®-isJoin public hiding ([_,_])
    renaming (cong to ‚à®-cong'; mono to ‚à®-mono; idem to ‚à®-idem; comm to ‚à®-comm'; assoc to ‚à®-assoc')

record _=>_ (X Y : JoinSemilattice) : Set where
  open JoinSemilattice
  open IsPreorder (X .JoinSemilattice.‚â§-isPreorder) renaming (_‚âÉ_ to _‚âÉ‚ÇÅ_)
  open IsPreorder (Y .JoinSemilattice.‚â§-isPreorder) renaming (_‚âÉ_ to _‚âÉ‚ÇÇ_)
  field
    func : X .Carrier ‚Üí Y .Carrier
    monotone : ‚àÄ {x‚ÇÅ x‚ÇÇ} ‚Üí X ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí Y ._‚â§_ (func x‚ÇÅ) (func x‚ÇÇ)
    ‚à®-preserving : ‚àÄ {x x'} ‚Üí Y ._‚â§_ (func (X ._‚à®_ x x')) (Y ._‚à®_ (func x) (func x'))
    ‚ä•-preserving : Y ._‚â§_ (func (X .‚ä•)) (Y .‚ä•)

  cong : ‚àÄ {x x'} ‚Üí x ‚âÉ‚ÇÅ x' ‚Üí func x ‚âÉ‚ÇÇ func x'
  cong (x‚â§x' , _) .proj‚ÇÅ = monotone x‚â§x'
  cong (_ , x'‚â§x) .proj‚ÇÇ = monotone x'‚â§x

open _=>_

record _‚âÉm_ {X Y : JoinSemilattice} (f g : X => Y) : Set where
  open IsPreorder (Y .JoinSemilattice.‚â§-isPreorder)
  field
    eqfunc : ‚àÄ x ‚Üí f .func x ‚âÉ g .func x

open JoinSemilattice

id : ‚àÄ {X} ‚Üí X => X
id .func x = x
id .monotone x‚â§x' = x‚â§x'
id {X} .‚à®-preserving = X .‚â§-refl
id {X} .‚ä•-preserving = X .‚â§-refl

_‚àò_ : ‚àÄ {X Y Z} ‚Üí Y => Z ‚Üí X => Y ‚Üí X => Z
(f ‚àò g) .func x = f .func (g .func x)
(f ‚àò g) .monotone x‚â§x' = f .monotone (g .monotone x‚â§x')
_‚àò_ {X}{Y}{Z} f g .‚à®-preserving = Z .‚â§-trans (f .monotone (g .‚à®-preserving)) (f .‚à®-preserving)
_‚àò_ {X}{Y}{Z} f g .‚ä•-preserving = Z .‚â§-trans (f .monotone (g .‚ä•-preserving)) (f .‚ä•-preserving)

-- constant (left zero) morphisms
‚ä•-map : ‚àÄ {X Y} ‚Üí X => Y
‚ä•-map {X}{Y} .func _ = Y .‚ä•
‚ä•-map {X}{Y} .monotone _ = ‚â§-refl Y
‚ä•-map {X}{Y} .‚à®-preserving = ‚à®-idem Y .proj‚ÇÇ
‚ä•-map {X}{Y} .‚ä•-preserving = Y .‚â§-refl

-- FIXME: ‚à®-map

------------------------------------------------------------------------------
-- One element semilattice, for use when there are no approximations
ùüô : JoinSemilattice
ùüô .Carrier = ‚ä§
ùüô ._‚â§_ tt tt = ‚ä§
ùüô ._‚à®_ tt tt = tt
ùüô .‚ä• = tt
ùüô .‚â§-isPreorder .IsPreorder.refl = tt
ùüô .‚â§-isPreorder .IsPreorder.trans tt tt = tt
ùüô .‚à®-isJoin .IsJoin.inl = tt
ùüô .‚à®-isJoin .IsJoin.inr = tt
ùüô .‚à®-isJoin .IsJoin.[_,_] tt tt = tt
ùüô .‚ä•-isBottom .IsBottom.‚â§-bottom = tt

-- this is a zero object (both initial and terminal)

------------------------------------------------------------------------------
-- Lifting

data LCarrier (X : Set) : Set where
  bottom : LCarrier X
  <_>    : X ‚Üí LCarrier X

-- Add a new bottom element to a finite join semilattice
L : JoinSemilattice ‚Üí JoinSemilattice
L X .Carrier = LCarrier (X .Carrier)
L X ._‚â§_ bottom bottom = ‚ä§
L X ._‚â§_ bottom < _ >  = ‚ä§
L X ._‚â§_ < _ >  bottom = ùüò
L X ._‚â§_ < x > < y >   = X ._‚â§_ x y
L X ._‚à®_ bottom bottom = bottom
L X ._‚à®_ < x >  bottom = < x >
L X ._‚à®_ bottom < y >  = < y >
L X ._‚à®_ < x >  < y >  = < X ._‚à®_ x y >
L X .‚ä• = bottom
L X .‚â§-isPreorder .IsPreorder.refl {bottom} = tt
L X .‚â§-isPreorder .IsPreorder.refl {< x >} = ‚â§-refl X
L X .‚â§-isPreorder .IsPreorder.trans {bottom} {bottom} {bottom} m‚ÇÅ m‚ÇÇ = tt
L X .‚â§-isPreorder .IsPreorder.trans {bottom} {bottom} {< z >}  m‚ÇÅ m‚ÇÇ = tt
L X .‚â§-isPreorder .IsPreorder.trans {bottom} {< y >}  {< z >}  m‚ÇÅ m‚ÇÇ = tt
L X .‚â§-isPreorder .IsPreorder.trans {< x >}  {< y >}  {< z >}  m‚ÇÅ m‚ÇÇ =
  X .‚â§-isPreorder .IsPreorder.trans m‚ÇÅ m‚ÇÇ
L X .‚à®-isJoin .IsJoin.inl {bottom} {bottom} = tt
L X .‚à®-isJoin .IsJoin.inl {bottom} {< x >}  = tt
L X .‚à®-isJoin .IsJoin.inl {< x >}  {bottom} = ‚â§-refl X
L X .‚à®-isJoin .IsJoin.inl {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inl
L X .‚à®-isJoin .IsJoin.inr {bottom} {bottom} = tt
L X .‚à®-isJoin .IsJoin.inr {bottom} {< x >}  = ‚â§-refl X
L X .‚à®-isJoin .IsJoin.inr {< x >}  {bottom} = tt
L X .‚à®-isJoin .IsJoin.inr {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inr
L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{bottom} m‚ÇÅ m‚ÇÇ = tt
L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{< z >}  m‚ÇÅ m‚ÇÇ = tt
L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{< y >} {z}      m‚ÇÅ m‚ÇÇ = m‚ÇÇ
L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {bottom}{z}      m‚ÇÅ m‚ÇÇ = m‚ÇÅ
L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {< y >} {< z >}  m‚ÇÅ m‚ÇÇ = X .‚à®-isJoin .IsJoin.[_,_] m‚ÇÅ m‚ÇÇ
L X .‚ä•-isBottom .IsBottom.‚â§-bottom {bottom} = tt
L X .‚ä•-isBottom .IsBottom.‚â§-bottom {< x >} = tt

L-func : ‚àÄ {X Y} ‚Üí X => Y ‚Üí L X => L Y
L-func m .func bottom = bottom
L-func m .func < x > = < m .func x >
L-func {X} {Y} m .monotone {bottom} {bottom} _ = tt
L-func {X} {Y} m .monotone {bottom} {< _ >} _ = tt
L-func m .monotone {< _ >} {bottom} ()
L-func m .monotone {< _ >} {< _ >} x‚ÇÅ‚â§x‚ÇÇ = m .monotone x‚ÇÅ‚â§x‚ÇÇ
L-func m .‚à®-preserving {bottom} {bottom} = tt
L-func {X}{Y} m .‚à®-preserving {bottom} {< _ >} = Y .‚â§-refl
L-func {X}{Y} m .‚à®-preserving {< x >} {bottom} = Y .‚â§-refl
L-func m .‚à®-preserving {< _ >} {< _ >} = m .‚à®-preserving
L-func m .‚ä•-preserving = tt

-- Lifting is /not/ a monad: L-unit is not ‚ä•-preserving!
{-
L-unit : ‚àÄ {X} ‚Üí X => L X
L-unit .func x = < x >
L-unit .monotone x‚â§x' = x‚â§x'
L-unit {X} .join-preserving = ‚âÉ-refl X
L-unit .‚ä•-preserving = {!!}
-}

L-join : ‚àÄ {X} ‚Üí L (L X) => L X
L-join .func bottom = bottom
L-join .func < bottom > = bottom
L-join .func < < x > > = < x >
L-join .monotone {bottom} {bottom} _ = tt
L-join .monotone {bottom} {< bottom >} _ = tt
L-join .monotone {bottom} {< < _ > >} _ = tt
L-join .monotone {< bottom >} {< bottom >} _ = tt
L-join .monotone {< bottom >} {< < _ > >} _ = tt
L-join .monotone {< < _ > >} {< < _ > >} x‚â§x' = x‚â§x'
L-join .‚à®-preserving {bottom} {bottom} = tt
L-join .‚à®-preserving {bottom} {< bottom >} = tt
L-join {X} .‚à®-preserving {bottom} {< < x > >} = X .‚â§-refl
L-join .‚à®-preserving {< bottom >} {bottom} = tt
L-join {X} .‚à®-preserving {< < _ > >} {bottom} = X .‚â§-refl
L-join .‚à®-preserving {< bottom >} {< bottom >} = tt
L-join {X} .‚à®-preserving {< bottom >} {< < x > >} = X .‚â§-refl
L-join {X} .‚à®-preserving {< < _ > >} {< bottom >} = X .‚â§-refl
L-join {X} .‚à®-preserving {< < _ > >} {< < _ > >} = X .‚â§-refl
L-join .‚ä•-preserving = tt

-- Lifting is a comonad in preorders with a bottom:
L-counit : ‚àÄ {X} ‚Üí L X => X
L-counit {X} .func bottom = X .‚ä•
L-counit .func < x > = x
L-counit {X} .monotone {bottom} _ = X .‚â§-bottom
L-counit {X} .monotone {< _ >} {< _ >} x‚â§x' = x‚â§x'
L-counit {X} .‚à®-preserving {bottom} {bottom} = ‚à®-idem X .proj‚ÇÇ
L-counit {X} .‚à®-preserving {bottom} {< _ >} = IsMonoid.lunit (‚à®-‚ä•-isMonoid X) .proj‚ÇÇ
L-counit {X} .‚à®-preserving {< _ >} {bottom} = IsMonoid.runit (‚à®-‚ä•-isMonoid X) .proj‚ÇÇ
L-counit {X} .‚à®-preserving {< _ >} {< _ >} = X .‚â§-refl
L-counit {X} .‚ä•-preserving = X .‚â§-refl

L-dup : ‚àÄ {X} ‚Üí L X => L (L X)
L-dup .func bottom = bottom
L-dup .func < x > = < < x > >
L-dup .monotone {bottom} {bottom} _ = tt
L-dup .monotone {bottom} {< _ >} _ = tt
L-dup .monotone {< _ >} {< _ >} x‚â§x' = x‚â§x'
L-dup {X} .‚à®-preserving {bottom} {bottom} = tt
L-dup {X} .‚à®-preserving {bottom} {< _ >} = X .‚â§-refl
L-dup {X} .‚à®-preserving {< _ >} {bottom} = X .‚â§-refl
L-dup {X} .‚à®-preserving {< _ >} {< _ >} = X .‚â§-refl
L-dup {X} .‚ä•-preserving = tt

L-coassoc : ‚àÄ {X} ‚Üí (L-func L-dup ‚àò L-dup) ‚âÉm (L-dup ‚àò L-dup {X})
L-coassoc ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
L-coassoc ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
L-coassoc {X} ._‚âÉm_.eqfunc < x > = X. ‚âÉ-refl

L-unit1 : ‚àÄ {X} ‚Üí (L-counit ‚àò L-dup) ‚âÉm id {L X}
L-unit1 ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
L-unit1 ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
L-unit1 {X} ._‚âÉm_.eqfunc < x > = X. ‚âÉ-refl

L-unit2 : ‚àÄ {X} ‚Üí (L-func L-counit ‚àò L-dup) ‚âÉm id {L X}
L-unit2 ._‚âÉm_.eqfunc bottom .proj‚ÇÅ = tt
L-unit2 ._‚âÉm_.eqfunc bottom .proj‚ÇÇ = tt
L-unit2 {X} ._‚âÉm_.eqfunc < x > = X. ‚âÉ-refl

------------------------------------------------------------------------------
-- Set-wide direct sums of JoinSemilattices
module _ (I : Set) (X : I ‚Üí JoinSemilattice) where

  data FormalJoin : Set where
    bot  : FormalJoin
    el   : (i : I) ‚Üí X i .Carrier ‚Üí FormalJoin
    join : FormalJoin ‚Üí FormalJoin ‚Üí FormalJoin

  data _‚â§f_ : FormalJoin ‚Üí FormalJoin ‚Üí Set where
    ‚â§f-refl    : ‚àÄ {j} ‚Üí j ‚â§f j
    ‚â§f-trans   : ‚àÄ {j‚ÇÅ j‚ÇÇ j‚ÇÉ} ‚Üí j‚ÇÅ ‚â§f j‚ÇÇ ‚Üí j‚ÇÇ ‚â§f j‚ÇÉ ‚Üí j‚ÇÅ ‚â§f j‚ÇÉ
    ‚â§f-el-mono : ‚àÄ i {x‚ÇÅ x‚ÇÇ} ‚Üí X i ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí el i x‚ÇÅ ‚â§f el i x‚ÇÇ
    ‚â§f-el-bot  : ‚àÄ i ‚Üí el i (X i .‚ä•) ‚â§f bot
    ‚â§f-el-join : ‚àÄ i {x‚ÇÅ x‚ÇÇ} ‚Üí el i (X i ._‚à®_ x‚ÇÅ x‚ÇÇ) ‚â§f join (el i x‚ÇÅ) (el i x‚ÇÇ)
    ‚â§f-bot     : ‚àÄ {j} ‚Üí bot ‚â§f j
    ‚â§f-inl     : ‚àÄ {j‚ÇÅ j‚ÇÇ} ‚Üí j‚ÇÅ ‚â§f join j‚ÇÅ j‚ÇÇ
    ‚â§f-inr     : ‚àÄ {j‚ÇÅ j‚ÇÇ} ‚Üí j‚ÇÇ ‚â§f join j‚ÇÅ j‚ÇÇ
    ‚â§f-case    : ‚àÄ {j‚ÇÅ j‚ÇÇ j‚ÇÉ} ‚Üí j‚ÇÅ ‚â§f j‚ÇÉ ‚Üí j‚ÇÇ ‚â§f j‚ÇÉ ‚Üí join j‚ÇÅ j‚ÇÇ ‚â§f j‚ÇÉ

  ‚®Å : JoinSemilattice
  ‚®Å .Carrier = FormalJoin
  ‚®Å ._‚â§_ = _‚â§f_
  ‚®Å ._‚à®_ = join
  ‚®Å .‚ä• = bot
  ‚®Å .‚â§-isPreorder .IsPreorder.refl = ‚â§f-refl
  ‚®Å .‚â§-isPreorder .IsPreorder.trans = ‚â§f-trans
  ‚®Å .‚à®-isJoin .IsJoin.inl = ‚â§f-inl
  ‚®Å .‚à®-isJoin .IsJoin.inr = ‚â§f-inr
  ‚®Å .‚à®-isJoin .IsJoin.[_,_] = ‚â§f-case
  ‚®Å .‚ä•-isBottom .IsBottom.‚â§-bottom = ‚â§f-bot

  inj-‚®Å : (i : I) ‚Üí X i => ‚®Å
  inj-‚®Å i .func x = el i x
  inj-‚®Å i .monotone = ‚â§f-el-mono i
  inj-‚®Å i .‚à®-preserving = ‚â§f-el-join i
  inj-‚®Å i .‚ä•-preserving = ‚â§f-el-bot i

  module _ (Z : JoinSemilattice) (X=>Z : ‚àÄ i ‚Üí X i => Z) where
    module Z = JoinSemilattice Z

    open IsJoin (Z .‚à®-isJoin)

    elim-‚®Å-func : ‚®Å .Carrier ‚Üí Z .Carrier
    elim-‚®Å-func bot = Z.‚ä•
    elim-‚®Å-func (el i x) = X=>Z i .func x
    elim-‚®Å-func (join j‚ÇÅ j‚ÇÇ) = elim-‚®Å-func j‚ÇÅ Z.‚à® elim-‚®Å-func j‚ÇÇ

    elim-‚®Å-func-monotone : ‚àÄ {j‚ÇÅ j‚ÇÇ} ‚Üí j‚ÇÅ ‚â§f j‚ÇÇ ‚Üí elim-‚®Å-func j‚ÇÅ Z.‚â§ elim-‚®Å-func j‚ÇÇ
    elim-‚®Å-func-monotone ‚â§f-refl = Z.‚â§-refl
    elim-‚®Å-func-monotone (‚â§f-trans j‚ÇÅ‚â§j‚ÇÇ j‚ÇÇ‚â§j‚ÇÉ) = Z.‚â§-trans (elim-‚®Å-func-monotone j‚ÇÅ‚â§j‚ÇÇ) (elim-‚®Å-func-monotone j‚ÇÇ‚â§j‚ÇÉ)
    elim-‚®Å-func-monotone (‚â§f-el-mono i x‚ÇÅ‚â§x‚ÇÇ) = X=>Z i .monotone x‚ÇÅ‚â§x‚ÇÇ
    elim-‚®Å-func-monotone (‚â§f-el-bot i) = X=>Z i .‚ä•-preserving
    elim-‚®Å-func-monotone (‚â§f-el-join i) = {!   !}
    elim-‚®Å-func-monotone ‚â§f-bot = Z .‚â§-bottom
    elim-‚®Å-func-monotone ‚â§f-inl = Z .inl
    elim-‚®Å-func-monotone ‚â§f-inr = Z .inr
    elim-‚®Å-func-monotone (‚â§f-case j‚ÇÅ‚â§j‚ÇÉ j‚ÇÇ‚â§j‚ÇÉ) =
      [ elim-‚®Å-func-monotone j‚ÇÅ‚â§j‚ÇÉ , elim-‚®Å-func-monotone j‚ÇÇ‚â§j‚ÇÉ ]

    elim-‚®Å : ‚®Å => Z
    elim-‚®Å .func = elim-‚®Å-func
    elim-‚®Å .monotone = elim-‚®Å-func-monotone
    elim-‚®Å .‚à®-preserving = Z .‚â§-refl
    elim-‚®Å .‚ä•-preserving = Z .‚â§-refl

------------------------------------------------------------------------------
-- Biproducts
_‚äï_ : JoinSemilattice ‚Üí JoinSemilattice ‚Üí JoinSemilattice
(X ‚äï Y) .Carrier = X .Carrier √ó Y .Carrier
(X ‚äï Y) ._‚â§_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚â§_ x‚ÇÅ x‚ÇÇ) √ó (Y ._‚â§_ y‚ÇÅ y‚ÇÇ)
(X ‚äï Y) ._‚à®_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚à®_ x‚ÇÅ x‚ÇÇ) , (Y ._‚à®_ y‚ÇÅ y‚ÇÇ)
(X ‚äï Y) .‚ä• = X .‚ä• , Y .‚ä•
(X ‚äï Y) .‚â§-isPreorder .IsPreorder.refl = ‚â§-refl X , ‚â§-refl Y
(X ‚äï Y) .‚â§-isPreorder .IsPreorder.trans (x‚ÇÅ‚â§y‚ÇÅ , x‚ÇÇ‚â§y‚ÇÇ) (y‚ÇÅ‚â§z‚ÇÅ , y‚ÇÇ‚â§z‚ÇÇ) =
  X .‚â§-isPreorder .IsPreorder.trans x‚ÇÅ‚â§y‚ÇÅ y‚ÇÅ‚â§z‚ÇÅ ,
  Y .‚â§-isPreorder .IsPreorder.trans x‚ÇÇ‚â§y‚ÇÇ y‚ÇÇ‚â§z‚ÇÇ
(X ‚äï Y) .‚à®-isJoin .IsJoin.inl = X .‚à®-isJoin .IsJoin.inl , Y .‚à®-isJoin .IsJoin.inl
(X ‚äï Y) .‚à®-isJoin .IsJoin.inr = X .‚à®-isJoin .IsJoin.inr , Y .‚à®-isJoin .IsJoin.inr
(X ‚äï Y) .‚à®-isJoin .IsJoin.[_,_] (x‚ÇÅ‚â§z‚ÇÅ , y‚ÇÅ‚â§z‚ÇÇ) (x‚ÇÇ‚â§z‚ÇÅ , y‚ÇÇ‚â§z‚ÇÇ) =
  X .‚à®-isJoin .IsJoin.[_,_] x‚ÇÅ‚â§z‚ÇÅ x‚ÇÇ‚â§z‚ÇÅ ,
  Y .‚à®-isJoin .IsJoin.[_,_] y‚ÇÅ‚â§z‚ÇÇ y‚ÇÇ‚â§z‚ÇÇ
(X ‚äï Y) .‚ä•-isBottom .IsBottom.‚â§-bottom = ‚â§-bottom X , ‚â§-bottom Y

-- Product bits:
project‚ÇÅ : ‚àÄ {X Y} ‚Üí (X ‚äï Y) => X
project‚ÇÅ .func = proj‚ÇÅ
project‚ÇÅ .monotone = proj‚ÇÅ
project‚ÇÅ {X} .‚à®-preserving = X .‚â§-refl
project‚ÇÅ {X} .‚ä•-preserving = X .‚â§-refl

project‚ÇÇ : ‚àÄ {X Y} ‚Üí (X ‚äï Y) => Y
project‚ÇÇ .func = proj‚ÇÇ
project‚ÇÇ .monotone = proj‚ÇÇ
project‚ÇÇ {X}{Y} .‚à®-preserving = Y .‚â§-refl
project‚ÇÇ {X}{Y} .‚ä•-preserving = Y .‚â§-refl

‚ü®_,_‚ü© : ‚àÄ {X Y Z} ‚Üí X => Y ‚Üí X => Z ‚Üí X => (Y ‚äï Z)
‚ü® f , g ‚ü© .func x = f .func x , g .func x
‚ü® f , g ‚ü© .monotone x‚â§x' = f .monotone x‚â§x' , g .monotone x‚â§x'
‚ü® f , g ‚ü© .‚à®-preserving = f .‚à®-preserving , g .‚à®-preserving
‚ü® f , g ‚ü© .‚ä•-preserving = f .‚ä•-preserving , g . ‚ä•-preserving

-- Coproduct bits:
inject‚ÇÅ : ‚àÄ {X Y} ‚Üí X => (X ‚äï Y)
inject‚ÇÅ {X}{Y} .func x = x , Y .‚ä•
inject‚ÇÅ {X}{Y} .monotone x‚â§x' = x‚â§x' , Y .‚â§-refl
inject‚ÇÅ {X}{Y} .‚à®-preserving = X .‚â§-refl , ‚à®-idem Y .proj‚ÇÇ
inject‚ÇÅ {X}{Y} .‚ä•-preserving = X .‚â§-refl , Y .‚â§-refl

inject‚ÇÇ : ‚àÄ {X Y} ‚Üí Y => (X ‚äï Y)
inject‚ÇÇ {X}{Y} .func y = X .‚ä• , y
inject‚ÇÇ {X}{Y} .monotone y‚â§y' = ‚â§-refl X , y‚â§y'
inject‚ÇÇ {X}{Y} .‚à®-preserving = ‚à®-idem X .proj‚ÇÇ , Y .‚â§-refl
inject‚ÇÇ {X}{Y} .‚ä•-preserving = X .‚â§-refl , Y .‚â§-refl

[_,_] : ‚àÄ {X Y Z} ‚Üí X => Z ‚Üí Y => Z ‚Üí (X ‚äï Y) => Z
[_,_] {X}{Y}{Z} f g .func (x , y) = Z ._‚à®_ (f .func x) (g .func y)
[_,_] {X}{Y}{Z} f g .monotone (x‚ÇÅ‚â§x‚ÇÅ' , x‚ÇÇ‚â§x‚ÇÇ') =
  IsJoin.mono (Z .‚à®-isJoin) (f .monotone x‚ÇÅ‚â§x‚ÇÅ') (g .monotone x‚ÇÇ‚â§x‚ÇÇ')
[_,_] {X}{Y}{Z} f g .‚à®-preserving {(x‚ÇÅ , y‚ÇÅ)}{(x‚ÇÇ , y‚ÇÇ)} =
  -- redo with inequality reasoning
  Z .‚â§-trans
    (‚à®-mono Z (f .‚à®-preserving) (g .‚à®-preserving))
  (Z .‚â§-trans
    (‚à®-assoc' Z .proj‚ÇÅ)
  (Z .‚â§-trans
    (‚à®-mono Z (Z .‚â§-refl)
      (Z .‚â§-trans
        (Z .‚âÉ-sym (‚à®-assoc' Z) .proj‚ÇÅ)
      (Z .‚â§-trans
        (‚à®-mono Z (‚à®-comm' Z .proj‚ÇÅ) (Z .‚â§-refl))
        (‚à®-assoc' Z .proj‚ÇÅ))))
    (Z .‚âÉ-sym (‚à®-assoc' Z) .proj‚ÇÅ)))
[_,_] {X}{Y}{Z} f g .‚ä•-preserving = Z[ f .‚ä•-preserving , g .‚ä•-preserving ]
  where open IsJoin (Z .‚à®-isJoin) renaming ([_,_] to Z[_,_])

-- Binary biproduct properties
proj‚ÇÅ-inverts-inj‚ÇÅ : ‚àÄ {X Y} ‚Üí (project‚ÇÅ {X} {Y} ‚àò inject‚ÇÅ) ‚âÉm id
proj‚ÇÅ-inverts-inj‚ÇÅ {X} ._‚âÉm_.eqfunc x = ‚âÉ-refl X

proj‚ÇÇ-inverts-inj‚ÇÇ : ‚àÄ {X Y} ‚Üí (project‚ÇÅ {X} {Y} ‚àò inject‚ÇÅ) ‚âÉm id
proj‚ÇÇ-inverts-inj‚ÇÇ {X} ._‚âÉm_.eqfunc x = ‚âÉ-refl X

proj‚ÇÅ-zeroes-inj‚ÇÇ : ‚àÄ {X Y} ‚Üí (project‚ÇÅ {X} {Y} ‚àò inject‚ÇÇ) ‚âÉm ‚ä•-map
proj‚ÇÅ-zeroes-inj‚ÇÇ {X}{Y} ._‚âÉm_.eqfunc x = ‚âÉ-refl X

proj‚ÇÇ-zeroes-inj‚ÇÅ : ‚àÄ {X Y} ‚Üí (project‚ÇÇ {X} {Y} ‚àò inject‚ÇÅ) ‚âÉm ‚ä•-map
proj‚ÇÇ-zeroes-inj‚ÇÅ {X}{Y} ._‚âÉm_.eqfunc x = ‚âÉ-refl Y
