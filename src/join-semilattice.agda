{-# OPTIONS --postfix-projections --safe --prop #-}

module join-semilattice where

open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Unit using (tt) renaming (‚ä§ to Unit)
open import Level
open import basics
open import prop renaming (‚ä• to ‚ä•p; _‚à®_ to _‚à®p_)
open import preorder using (Preorder; _√ó_)
open import prop-setoid using (IsEquivalence; module ‚âà-Reasoning)

record JoinSemilattice (A : Preorder) : Set (suc 0‚Ñì) where
  no-eta-equality
  open Preorder public

  field
    _‚à®_          : A .Carrier ‚Üí A .Carrier ‚Üí A .Carrier
    ‚ä•            : A .Carrier
    ‚à®-isJoin     : IsJoin (A .‚â§-isPreorder) _‚à®_
    ‚ä•-isBottom   : IsBottom (A .‚â§-isPreorder) ‚ä•

  open IsJoin ‚à®-isJoin
    renaming (assoc to ‚à®-assoc; [_,_] to [_‚à®_]; mono to ‚à®-mono; comm to ‚à®-comm; cong to ‚à®-cong) public

  open IsBottom ‚ä•-isBottom public

  open IsMonoid (monoidOfJoin _ ‚à®-isJoin ‚ä•-isBottom)
    using (interchange)
    renaming (lunit to ‚à®-lunit; runit to ‚à®-runit)
    public


module _ {A B : Preorder} where
  open Preorder
  open preorder._=>_
  private
    module A = Preorder A
    module B = Preorder B

  record _=>_ (X : JoinSemilattice A) (Y : JoinSemilattice B) : Set where
    open JoinSemilattice
    open IsBottom
    field
      func : A preorder.=> B
      ‚à®-preserving : ‚àÄ {x x'} ‚Üí (func .fun (X ._‚à®_ x x')) B.‚â§ (Y ._‚à®_ (func .fun x) (func .fun x'))
      ‚ä•-preserving : func .fun (X .‚ä•) B.‚â§ Y .‚ä•

    ‚à®-preserving-‚âÉ : ‚àÄ {x x'} ‚Üí func .fun (X ._‚à®_ x x') B.‚âÉ Y ._‚à®_ (func .fun x) (func .fun x')
    ‚à®-preserving-‚âÉ .proj‚ÇÅ = ‚à®-preserving
    ‚à®-preserving-‚âÉ .proj‚ÇÇ = Y.[ func .mono X.inl , func .mono X.inr ]
      where module Y = IsJoin (Y .‚à®-isJoin)
            module X = IsJoin (X .‚à®-isJoin)

    ‚ä•-preserving-‚âÉ : func .fun (X .‚ä•) B.‚âÉ Y .‚ä•
    ‚ä•-preserving-‚âÉ .proj‚ÇÅ = ‚ä•-preserving
    ‚ä•-preserving-‚âÉ .proj‚ÇÇ = Y .‚ä•-isBottom .‚â§-bottom

  record _‚âÉm_ {X : JoinSemilattice A} {Y : JoinSemilattice B} (f g : X => Y) : Prop where
    open _=>_
    field
      eqfunc : f .func preorder.‚âÉm g .func

  open IsEquivalence
  open _‚âÉm_
  open preorder._‚âÉm_

  ‚âÉm-isEquivalence : ‚àÄ {X Y} ‚Üí IsEquivalence (_‚âÉm_ {X} {Y})
  ‚âÉm-isEquivalence .refl .eqfunc .eqfun x = B.‚âÉ-refl
  ‚âÉm-isEquivalence .sym e .eqfunc .eqfun x = B.‚âÉ-sym (e .eqfunc .eqfun x)
  ‚âÉm-isEquivalence .trans e‚ÇÅ e‚ÇÇ .eqfunc .eqfun x = B.‚âÉ-trans (e‚ÇÅ .eqfunc .eqfun x) (e‚ÇÇ .eqfunc .eqfun x)

module _ where
  open JoinSemilattice
  open _=>_
  open preorder._=>_

  id : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí X => X
  id .func = preorder.id
  id {X} .‚à®-preserving = X .‚â§-refl
  id {X} .‚ä•-preserving = X .‚â§-refl

  _‚àò_ : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} ‚Üí
           Y => Z ‚Üí X => Y ‚Üí X => Z
  (f ‚àò g) .func = f .func preorder.‚àò g .func
  _‚àò_ {C = C} f g .‚à®-preserving = C .‚â§-trans (f .func .mono (g .‚à®-preserving)) (f .‚à®-preserving)
  _‚àò_ {C = C} f g .‚ä•-preserving = C .‚â§-trans (f .func .mono (g .‚ä•-preserving)) (f .‚ä•-preserving)

  ‚ä•-map : ‚àÄ {A}{B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí X => Y
  ‚ä•-map {Y = Y} .func .fun y = Y .‚ä•
  ‚ä•-map {B = B} .func .mono _ = B .‚â§-refl
  ‚ä•-map {Y = Y} .‚à®-preserving = IsJoin.idem (Y .‚à®-isJoin) .proj‚ÇÇ
  ‚ä•-map {B = B} .‚ä•-preserving = B .‚â§-refl

  open _‚âÉm_
  open preorder._‚âÉm_

  ‚àò-cong : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C}
             {f‚ÇÅ f‚ÇÇ : Y => Z} {g‚ÇÅ g‚ÇÇ : X => Y} ‚Üí
             f‚ÇÅ ‚âÉm f‚ÇÇ ‚Üí g‚ÇÅ ‚âÉm g‚ÇÇ ‚Üí (f‚ÇÅ ‚àò g‚ÇÅ) ‚âÉm (f‚ÇÇ ‚àò g‚ÇÇ)
  ‚àò-cong {A}{B}{C} {f‚ÇÅ = f‚ÇÅ} f‚ÇÅ‚âÉf‚ÇÇ g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x =
    C .‚âÉ-trans (resp-‚âÉ (f‚ÇÅ .func) (g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x)) (f‚ÇÅ‚âÉf‚ÇÇ .eqfunc .eqfun _)

  id-left : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí
            {f : X => Y} ‚Üí (id ‚àò f) ‚âÉm f
  id-left {A} {B} .eqfunc .eqfun x = B .‚âÉ-refl

  id-right : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí
            {f : X => Y} ‚Üí (f ‚àò id) ‚âÉm f
  id-right {A} {B} .eqfunc .eqfun x = B .‚âÉ-refl

  assoc : ‚àÄ {A B C D}
            {W : JoinSemilattice A}
            {X : JoinSemilattice B}
            {Y : JoinSemilattice C}
            {Z : JoinSemilattice D}
            (f : Y => Z) (g : X => Y) (h : W => X) ‚Üí
            ((f ‚àò g) ‚àò h) ‚âÉm (f ‚àò (g ‚àò h))
  assoc {D = D} f g h .eqfunc .eqfun x = D .‚âÉ-refl

  module _ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} where
    private
      module B = Preorder B
      module Y = JoinSemilattice Y

    Œµm : X => Y
    Œµm .func .fun x = Y.‚ä•
    Œµm .func .mono _ = B.‚â§-refl
    Œµm .‚à®-preserving = Y.‚à®-lunit .proj‚ÇÇ
    Œµm .‚ä•-preserving = B.‚â§-refl

    _+m_ : X => Y ‚Üí X => Y ‚Üí X => Y
    (f +m g) .func .fun x = f .func .fun x Y.‚à® g .func .fun x
    (f +m g) .func .mono x‚ÇÅ‚â§x‚ÇÇ = Y.‚à®-mono (f .func .mono x‚ÇÅ‚â§x‚ÇÇ) (g .func .mono x‚ÇÅ‚â§x‚ÇÇ)
    (f +m g) .‚à®-preserving =
      B.‚â§-trans (Y.‚à®-mono (f .‚à®-preserving) (g .‚à®-preserving))
                (Y.interchange Y.‚à®-comm .proj‚ÇÅ)
    (f +m g) .‚ä•-preserving =
      B.‚â§-trans (Y.‚à®-mono (f .‚ä•-preserving) (g .‚ä•-preserving)) (Y.‚à®-lunit .proj‚ÇÅ)

    +m-cong : ‚àÄ {f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : X => Y} ‚Üí f‚ÇÅ ‚âÉm f‚ÇÇ ‚Üí g‚ÇÅ ‚âÉm g‚ÇÇ ‚Üí (f‚ÇÅ +m g‚ÇÅ) ‚âÉm (f‚ÇÇ +m g‚ÇÇ)
    +m-cong f‚ÇÅ‚âÉf‚ÇÇ g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x = Y.‚à®-cong (f‚ÇÅ‚âÉf‚ÇÇ .eqfunc .eqfun x) (g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x)

    +m-comm : ‚àÄ {f g} ‚Üí (f +m g) ‚âÉm (g +m f)
    +m-comm .eqfunc .eqfun x .proj‚ÇÅ = Y.‚à®-comm
    +m-comm .eqfunc .eqfun x .proj‚ÇÇ = Y.‚à®-comm

    +m-assoc : ‚àÄ {f g h} ‚Üí ((f +m g) +m h) ‚âÉm (f +m (g +m h))
    +m-assoc .eqfunc .eqfun x = Y.‚à®-assoc

    +m-lunit : ‚àÄ {f} ‚Üí (Œµm +m f) ‚âÉm f
    +m-lunit .eqfunc .eqfun x = Y.‚à®-lunit

  -- Bilinearity of composition
  module _ {A B C}
           {X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} where

    comp-bilinear‚ÇÅ : ‚àÄ (f‚ÇÅ f‚ÇÇ : Y => Z) (g : X => Y) ‚Üí
                       ((f‚ÇÅ +m f‚ÇÇ) ‚àò g) ‚âÉm ((f‚ÇÅ ‚àò g) +m (f‚ÇÇ ‚àò g))
    comp-bilinear‚ÇÅ f‚ÇÅ f‚ÇÇ g .eqfunc .eqfun x = C .‚âÉ-refl

    comp-bilinear‚ÇÇ : ‚àÄ (f : Y => Z) (g‚ÇÅ g‚ÇÇ : X => Y) ‚Üí
                       (f ‚àò (g‚ÇÅ +m g‚ÇÇ)) ‚âÉm ((f ‚àò g‚ÇÅ) +m (f ‚àò g‚ÇÇ))
    comp-bilinear‚ÇÇ f g‚ÇÅ g‚ÇÇ .eqfunc .eqfun x = ‚à®-preserving-‚âÉ f

    comp-bilinear-Œµ‚ÇÅ : ‚àÄ (f : X => Y) ‚Üí (Œµm ‚àò f) ‚âÉm Œµm {X = X} {Y = Z}
    comp-bilinear-Œµ‚ÇÅ f .eqfunc .eqfun x = C .‚âÉ-refl

    comp-bilinear-Œµ‚ÇÇ : ‚àÄ (f : Y => Z) ‚Üí (f ‚àò Œµm) ‚âÉm Œµm {X = X} {Y = Z}
    comp-bilinear-Œµ‚ÇÇ f .eqfunc .eqfun x = ‚ä•-preserving-‚âÉ f

------------------------------------------------------------------------------
-- One element semilattice, for use when there are no approximations
module _ where
  open JoinSemilattice
  open _=>_
  open preorder._=>_

  ùüô : JoinSemilattice preorder.ùüô
  ùüô ._‚à®_ tt tt = tt
  ùüô .‚ä• = tt
  ùüô .‚à®-isJoin .IsJoin.inl = tt
  ùüô .‚à®-isJoin .IsJoin.inr = tt
  ùüô .‚à®-isJoin .IsJoin.[_,_] tt tt = tt
  ùüô .‚ä•-isBottom .IsBottom.‚â§-bottom = tt

  -- this is a zero object (both initial and terminal)
  initial : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí ùüô => X
  initial = ‚ä•-map

  terminal : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí X => ùüô
  terminal .func .fun _ = tt
  terminal .func .mono _ = tt
  terminal .‚à®-preserving = tt
  terminal .‚ä•-preserving = tt

  open _‚âÉm_
  open preorder._‚âÉm_

  initial-unique : ‚àÄ {A}(X : JoinSemilattice A) ‚Üí (f g : ùüô => X) ‚Üí f ‚âÉm g
  initial-unique {A} X f g .eqfunc .eqfun tt =
    begin
      f .func .fun tt
    ‚âà‚ü® ‚ä•-preserving-‚âÉ f ‚ü©
      X .‚ä•
    ‚âà‚ü® A .‚âÉ-sym (‚ä•-preserving-‚âÉ g) ‚ü©
      g .func .fun tt
    ‚àé
    where open ‚âà-Reasoning (isEquivalence A)

------------------------------------------------------------------------------
-- Set-wide direct sums of JoinSemilattices
module _ (I : Set) {A : I -> Preorder} (X : (i : I) ‚Üí JoinSemilattice (A i)) where
    -- Now where I is a Setoid, and (A,X) is a family of JoinSemilattices respecting equality
  open JoinSemilattice
  open _=>_
  open preorder._=>_

  data FormalJoin : Set where
    bot  : FormalJoin
    el   : (i : I) ‚Üí A i .Carrier ‚Üí FormalJoin
    join : FormalJoin ‚Üí FormalJoin ‚Üí FormalJoin

  data _‚â§f_ : FormalJoin ‚Üí FormalJoin ‚Üí Set where
    ‚â§f-refl    : ‚àÄ {j} ‚Üí j ‚â§f j
    ‚â§f-trans   : ‚àÄ {j‚ÇÅ j‚ÇÇ j‚ÇÉ} ‚Üí j‚ÇÅ ‚â§f j‚ÇÇ ‚Üí j‚ÇÇ ‚â§f j‚ÇÉ ‚Üí j‚ÇÅ ‚â§f j‚ÇÉ
    ‚â§f-el-mono : ‚àÄ i {x‚ÇÅ x‚ÇÇ} ‚Üí A i ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí el i x‚ÇÅ ‚â§f el i x‚ÇÇ
    ‚â§f-el-bot  : ‚àÄ i ‚Üí el i (X i .‚ä•) ‚â§f bot
    ‚â§f-el-join : ‚àÄ i {x‚ÇÅ x‚ÇÇ} ‚Üí el i (X i ._‚à®_ x‚ÇÅ x‚ÇÇ) ‚â§f join (el i x‚ÇÅ) (el i x‚ÇÇ)
    ‚â§f-bot     : ‚àÄ {j} ‚Üí bot ‚â§f j
    ‚â§f-inl     : ‚àÄ {j‚ÇÅ j‚ÇÇ} ‚Üí j‚ÇÅ ‚â§f join j‚ÇÅ j‚ÇÇ
    ‚â§f-inr     : ‚àÄ {j‚ÇÅ j‚ÇÇ} ‚Üí j‚ÇÇ ‚â§f join j‚ÇÅ j‚ÇÇ
    ‚â§f-case    : ‚àÄ {j‚ÇÅ j‚ÇÇ j‚ÇÉ} ‚Üí j‚ÇÅ ‚â§f j‚ÇÉ ‚Üí j‚ÇÇ ‚â§f j‚ÇÉ ‚Üí join j‚ÇÅ j‚ÇÇ ‚â§f j‚ÇÉ

  ‚®Å-preorder : Preorder
  ‚®Å-preorder .Carrier = FormalJoin
  ‚®Å-preorder ._‚â§_ j‚ÇÅ j‚ÇÇ = LiftS 0‚Ñì (j‚ÇÅ ‚â§f j‚ÇÇ)
  ‚®Å-preorder .‚â§-isPreorder .IsPreorder.refl {x} = liftS (‚â§f-refl {x})
  ‚®Å-preorder .‚â§-isPreorder .IsPreorder.trans (liftS x) (liftS y) = liftS (‚â§f-trans x y)

  ‚®Å : JoinSemilattice ‚®Å-preorder
  ‚®Å ._‚à®_ = join
  ‚®Å .‚ä• = bot
  ‚®Å .‚à®-isJoin .IsJoin.inl = liftS ‚â§f-inl
  ‚®Å .‚à®-isJoin .IsJoin.inr = liftS ‚â§f-inr
  ‚®Å .‚à®-isJoin .IsJoin.[_,_] (liftS x) (liftS y) = liftS (‚â§f-case x y)
  ‚®Å .‚ä•-isBottom .IsBottom.‚â§-bottom = liftS ‚â§f-bot

  inj-‚®Å : (i : I) ‚Üí X i => ‚®Å
  inj-‚®Å i .func .fun x = el i x
  inj-‚®Å i .func .mono x = liftS (‚â§f-el-mono i x)
  inj-‚®Å i .‚à®-preserving = liftS (‚â§f-el-join i)
  inj-‚®Å i .‚ä•-preserving = liftS (‚â§f-el-bot i)

  module _ {B} (Z : JoinSemilattice B) (X=>Z : ‚àÄ i ‚Üí X i => Z) where
    private
      module Z = JoinSemilattice Z

    elim-‚®Å-func : ‚®Å-preorder .Carrier ‚Üí B .Carrier
    elim-‚®Å-func bot = Z .‚ä•
    elim-‚®Å-func (el i x) = X=>Z i .func .fun x
    elim-‚®Å-func (join j‚ÇÅ j‚ÇÇ) = Z ._‚à®_ (elim-‚®Å-func j‚ÇÅ) (elim-‚®Å-func j‚ÇÇ)

    elim-‚®Å-func-monotone : ‚àÄ {j‚ÇÅ j‚ÇÇ} ‚Üí j‚ÇÅ ‚â§f j‚ÇÇ ‚Üí B ._‚â§_ (elim-‚®Å-func j‚ÇÅ) (elim-‚®Å-func j‚ÇÇ)
    elim-‚®Å-func-monotone ‚â§f-refl = B .‚â§-refl
    elim-‚®Å-func-monotone (‚â§f-trans j‚ÇÅ‚â§j‚ÇÇ j‚ÇÇ‚â§j‚ÇÉ) = B .‚â§-trans (elim-‚®Å-func-monotone j‚ÇÅ‚â§j‚ÇÇ) (elim-‚®Å-func-monotone j‚ÇÇ‚â§j‚ÇÉ)
    elim-‚®Å-func-monotone (‚â§f-el-mono i x‚ÇÅ‚â§x‚ÇÇ) = X=>Z i .func .mono x‚ÇÅ‚â§x‚ÇÇ
    elim-‚®Å-func-monotone (‚â§f-el-bot i) = X=>Z i .‚ä•-preserving
    elim-‚®Å-func-monotone (‚â§f-el-join i) = X=>Z i .‚à®-preserving
    elim-‚®Å-func-monotone ‚â§f-bot = Z.‚â§-bottom
    elim-‚®Å-func-monotone ‚â§f-inl = Z.inl
    elim-‚®Å-func-monotone ‚â§f-inr = Z.inr
    elim-‚®Å-func-monotone (‚â§f-case j‚ÇÅ‚â§j‚ÇÉ j‚ÇÇ‚â§j‚ÇÉ) =
      Z.[ elim-‚®Å-func-monotone j‚ÇÅ‚â§j‚ÇÉ ‚à® elim-‚®Å-func-monotone j‚ÇÇ‚â§j‚ÇÉ ]

    elim-‚®Å : ‚®Å => Z
    elim-‚®Å .func .fun = elim-‚®Å-func
    elim-‚®Å .func .mono (liftS x) = elim-‚®Å-func-monotone x
    elim-‚®Å .‚à®-preserving = B .‚â§-refl
    elim-‚®Å .‚ä•-preserving = B .‚â§-refl

------------------------------------------------------------------------------
-- Biproducts
module _ where
  open JoinSemilattice
  open _=>_
  open preorder._=>_
  open _‚âÉm_
  open preorder._‚âÉm_

  _‚äï_ : ‚àÄ {A B} ‚Üí JoinSemilattice A ‚Üí JoinSemilattice B ‚Üí JoinSemilattice (A √ó B)
  (X ‚äï Y) ._‚à®_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚à®_ x‚ÇÅ x‚ÇÇ) , (Y ._‚à®_ y‚ÇÅ y‚ÇÇ)
  (X ‚äï Y) .‚ä• = X .‚ä• , Y .‚ä•
  (X ‚äï Y) .‚à®-isJoin .IsJoin.inl = X .‚à®-isJoin .IsJoin.inl , Y .‚à®-isJoin .IsJoin.inl
  (X ‚äï Y) .‚à®-isJoin .IsJoin.inr = X .‚à®-isJoin .IsJoin.inr , Y .‚à®-isJoin .IsJoin.inr
  (X ‚äï Y) .‚à®-isJoin .IsJoin.[_,_] (x‚ÇÅ‚â§z‚ÇÅ , y‚ÇÅ‚â§z‚ÇÇ) (x‚ÇÇ‚â§z‚ÇÅ , y‚ÇÇ‚â§z‚ÇÇ) =
    X .‚à®-isJoin .IsJoin.[_,_] x‚ÇÅ‚â§z‚ÇÅ x‚ÇÇ‚â§z‚ÇÅ ,
    Y .‚à®-isJoin .IsJoin.[_,_] y‚ÇÅ‚â§z‚ÇÇ y‚ÇÇ‚â§z‚ÇÇ
  (X ‚äï Y) .‚ä•-isBottom .IsBottom.‚â§-bottom = IsBottom.‚â§-bottom (X .‚ä•-isBottom) , IsBottom.‚â§-bottom (Y .‚ä•-isBottom)

  -- Product bits:
  project‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (X ‚äï Y) => X
  project‚ÇÅ .func .fun = proj‚ÇÅ
  project‚ÇÅ .func .mono = proj‚ÇÅ
  project‚ÇÅ {A} .‚à®-preserving = A .‚â§-refl
  project‚ÇÅ {A} .‚ä•-preserving = A .‚â§-refl

  project‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (X ‚äï Y) => Y
  project‚ÇÇ .func .fun = proj‚ÇÇ
  project‚ÇÇ .func .mono = proj‚ÇÇ
  project‚ÇÇ {B = B} .‚à®-preserving = B .‚â§-refl
  project‚ÇÇ {B = B} .‚ä•-preserving = B .‚â§-refl

  ‚ü®_,_‚ü© : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} ‚Üí X => Y ‚Üí X => Z ‚Üí X => (Y ‚äï Z)
  ‚ü® f , g ‚ü© .func .fun x = f .func .fun x , g .func .fun x
  ‚ü® f , g ‚ü© .func .mono x‚â§x' = f .func .mono x‚â§x' , g .func .mono x‚â§x'
  ‚ü® f , g ‚ü© .‚à®-preserving = f .‚à®-preserving , g .‚à®-preserving
  ‚ü® f , g ‚ü© .‚ä•-preserving = f .‚ä•-preserving , g . ‚ä•-preserving

  ‚ü®‚ü©-cong : ‚àÄ {A B C}{W : JoinSemilattice A} {X : JoinSemilattice B} {Y : JoinSemilattice C} ‚Üí
           {f‚ÇÅ f‚ÇÇ : W => X} {g‚ÇÅ g‚ÇÇ : W => Y} ‚Üí
           f‚ÇÅ ‚âÉm f‚ÇÇ ‚Üí g‚ÇÅ ‚âÉm g‚ÇÇ ‚Üí ‚ü® f‚ÇÅ , g‚ÇÅ ‚ü© ‚âÉm ‚ü® f‚ÇÇ , g‚ÇÇ ‚ü©
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ .proj‚ÇÅ = f‚ÇÅ‚âàf‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ .proj‚ÇÇ = g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ .proj‚ÇÅ = f‚ÇÅ‚âàf‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ .proj‚ÇÇ = g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ

  -- FIXME: deduce biproducts from cmon-enrichment

  -- Coproduct bits:
  inject‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí X => (X ‚äï Y)
  inject‚ÇÅ {Y = Y} .func .fun x = x , Y .‚ä•
  inject‚ÇÅ {B = B} .func .mono x‚â§x' = x‚â§x' , B .‚â§-refl
  inject‚ÇÅ {A}{Y = Y} .‚à®-preserving = A .‚â§-refl , IsJoin.idem (Y .‚à®-isJoin) .proj‚ÇÇ
  inject‚ÇÅ {X}{Y} .‚ä•-preserving = X .‚â§-refl , Y .‚â§-refl

  inject‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí Y => (X ‚äï Y)
  inject‚ÇÇ {X = X} .func .fun y = X .‚ä• , y
  inject‚ÇÇ {A} .func .mono y‚â§y' = A. ‚â§-refl , y‚â§y'
  inject‚ÇÇ {B = B}{X = X} .‚à®-preserving = IsJoin.idem (X .‚à®-isJoin) .proj‚ÇÇ , B .‚â§-refl
  inject‚ÇÇ {A}{B} .‚ä•-preserving = A .‚â§-refl , B .‚â§-refl

  [_,_] : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C} ‚Üí
          X => Z ‚Üí Y => Z ‚Üí (X ‚äï Y) => Z
  [_,_] {Z = Z} f g .func .fun (x , y) = Z ._‚à®_ (f .func .fun x) (g .func .fun y)
  [_,_] {Z = Z} f g .func .mono (x‚ÇÅ‚â§x‚ÇÅ' , x‚ÇÇ‚â§x‚ÇÇ') =
    IsJoin.mono (Z .‚à®-isJoin) (f .func .mono x‚ÇÅ‚â§x‚ÇÅ') (g .func .mono x‚ÇÇ‚â§x‚ÇÇ')
  [_,_] {C = C}{Z = Z} f g .‚à®-preserving {(x‚ÇÅ , y‚ÇÅ)}{(x‚ÇÇ , y‚ÇÇ)} =
    C .‚â§-trans (Z.‚à®-mono (f .‚à®-preserving) (g .‚à®-preserving))
               (Z.interchange Z.‚à®-comm .proj‚ÇÅ)
      where module Z = JoinSemilattice Z
  [_,_] {Z = Z} f g .‚ä•-preserving = Z[ f .‚ä•-preserving , g .‚ä•-preserving ]
    where open IsJoin (Z .‚à®-isJoin) renaming ([_,_] to Z[_,_])

  []-cong : ‚àÄ {A B C}{X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C}
            {f‚ÇÅ f‚ÇÇ : X => Z} {g‚ÇÅ g‚ÇÇ : Y => Z} ‚Üí
            f‚ÇÅ ‚âÉm f‚ÇÇ ‚Üí g‚ÇÅ ‚âÉm g‚ÇÇ ‚Üí
            [ f‚ÇÅ , g‚ÇÅ ] ‚âÉm [ f‚ÇÇ , g‚ÇÇ ]
  []-cong {Z = Z} f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun (x , y) = Z.‚à®-cong (f‚ÇÅ‚âàf‚ÇÇ .eqfunc .eqfun x) (g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun y)
    where module Z = JoinSemilattice Z

  inj‚ÇÅ-copair : ‚àÄ {A B C}
                  {X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C}
                  (f : X => Z) (g : Y => Z) ‚Üí
                  ([ f , g ] ‚àò inject‚ÇÅ) ‚âÉm f
  inj‚ÇÅ-copair {C = C} {Y = Y} {Z = Z} f g .eqfunc .eqfun x =
    begin
      f .func .fun x Z.‚à® g .func .fun (Y .‚ä•)
    ‚âà‚ü® MZ.cong (C .‚âÉ-refl) (‚ä•-preserving-‚âÉ g) ‚ü©
      f .func .fun x Z.‚à® Z .‚ä•
    ‚âà‚ü® MZ.runit ‚ü©
      f .func .fun x
    ‚àé
    where open ‚âà-Reasoning (isEquivalence C)
          module Z = JoinSemilattice Z
          module Y = JoinSemilattice Y
          module MZ = IsMonoid (monoidOfJoin _ (Z .‚à®-isJoin) (Z .‚ä•-isBottom))

  inj‚ÇÇ-copair : ‚àÄ {A B C}
                  {X : JoinSemilattice A}{Y : JoinSemilattice B}{Z : JoinSemilattice C}
                  (f : X => Z) (g : Y => Z) ‚Üí
                  ([ f , g ] ‚àò inject‚ÇÇ) ‚âÉm g
  inj‚ÇÇ-copair {C = C} {X = X} {Z = Z} f g .eqfunc .eqfun y =
    begin
      f .func .fun (X .‚ä•) Z.‚à® g .func .fun y
    ‚âà‚ü® MZ.cong (‚ä•-preserving-‚âÉ f) (C .‚âÉ-refl) ‚ü©
      Z .‚ä• Z.‚à® g .func .fun y
    ‚âà‚ü® MZ.lunit ‚ü©
      g .func .fun y
    ‚àé
    where open ‚âà-Reasoning (isEquivalence C)
          module Z = JoinSemilattice Z
          module MZ = IsMonoid (monoidOfJoin _ (Z .‚à®-isJoin) (Z .‚ä•-isBottom))

  copair-ext : ‚àÄ {A B C}
                 {X : JoinSemilattice A}
                 {Y : JoinSemilattice B}
                 {Z : JoinSemilattice C}
                 (f : (X ‚äï Y) => Z) ‚Üí
                 [ f ‚àò inject‚ÇÅ , f ‚àò inject‚ÇÇ ] ‚âÉm f
  copair-ext {A} {B} {C} {X} {Y} {Z} f .eqfunc .eqfun (x , y) =
    begin
      f .func .fun (x , Y .‚ä•) Z.‚à® f .func .fun (X .‚ä• , y)
    ‚âà‚ü® C .‚âÉ-sym (‚à®-preserving-‚âÉ f) ‚ü©
      f .func .fun (x X.‚à® X.‚ä• , Y .‚ä• Y.‚à® y)
    ‚âà‚ü® resp-‚âÉ (f .func) (preorder.√ó-‚âÉ {X = A} {Y = B} MX.runit MY.lunit) ‚ü©
      f .func .fun (x , y)
    ‚àé
    where open ‚âà-Reasoning (isEquivalence C)
          module Z = JoinSemilattice Z
          module Y = JoinSemilattice Y
          module X = JoinSemilattice X
          module MX = IsMonoid (monoidOfJoin _ (X .‚à®-isJoin) (X .‚ä•-isBottom))
          module MY = IsMonoid (monoidOfJoin _ (Y .‚à®-isJoin) (Y .‚ä•-isBottom))

  -- Biproduct properties
  proj‚ÇÅ-inverts-inj‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÅ {X = X}{Y} ‚àò inject‚ÇÅ) ‚âÉm id
  proj‚ÇÅ-inverts-inj‚ÇÅ {A} ._‚âÉm_.eqfunc .eqfun x = ‚âÉ-refl A

  proj‚ÇÇ-inverts-inj‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÅ {X = X}{Y} ‚àò inject‚ÇÅ) ‚âÉm id
  proj‚ÇÇ-inverts-inj‚ÇÇ {A} ._‚âÉm_.eqfunc .eqfun x = ‚âÉ-refl A

  proj‚ÇÅ-zeroes-inj‚ÇÇ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÅ {X = X}{Y} ‚àò inject‚ÇÇ) ‚âÉm ‚ä•-map
  proj‚ÇÅ-zeroes-inj‚ÇÇ {A} ._‚âÉm_.eqfunc .eqfun x = ‚âÉ-refl A

  proj‚ÇÇ-zeroes-inj‚ÇÅ : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí (project‚ÇÇ {X = X}{Y} ‚àò inject‚ÇÅ) ‚âÉm ‚ä•-map
  proj‚ÇÇ-zeroes-inj‚ÇÅ {A}{B} ._‚âÉm_.eqfunc .eqfun x = ‚âÉ-refl B

------------------------------------------------------------------------------
-- Lifting
module _ where
  open preorder using (LCarrier; <_>; bottom)
  open JoinSemilattice
  open _=>_
  open preorder._=>_
  open _‚âÉm_
  open preorder._‚âÉm_

  L : ‚àÄ {A} ‚Üí JoinSemilattice A ‚Üí JoinSemilattice (preorder.L A)
  L X ._‚à®_ bottom bottom = bottom
  L X ._‚à®_ < x >  bottom = < x >
  L X ._‚à®_ bottom < y >  = < y >
  L X ._‚à®_ < x >  < y >  = < X ._‚à®_ x y >
  L X .‚ä• = bottom
  L X .‚à®-isJoin .IsJoin.inl {bottom} {bottom} = tt
  L X .‚à®-isJoin .IsJoin.inl {bottom} {< x >}  = tt
  L {A} X .‚à®-isJoin .IsJoin.inl {< x >}  {bottom} = A .‚â§-refl
  L X .‚à®-isJoin .IsJoin.inl {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inl
  L X .‚à®-isJoin .IsJoin.inr {bottom} {bottom} = tt
  L {A} X .‚à®-isJoin .IsJoin.inr {bottom} {< x >}  = A. ‚â§-refl
  L X .‚à®-isJoin .IsJoin.inr {< x >}  {bottom} = tt
  L X .‚à®-isJoin .IsJoin.inr {< x >}  {< y >}  = X .‚à®-isJoin .IsJoin.inr
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{bottom} m‚ÇÅ m‚ÇÇ = tt
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{bottom}{< z >}  m‚ÇÅ m‚ÇÇ = tt
  L X .‚à®-isJoin .IsJoin.[_,_] {bottom}{< y >} {z}      m‚ÇÅ m‚ÇÇ = m‚ÇÇ
  L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {bottom}{z}      m‚ÇÅ m‚ÇÇ = m‚ÇÅ
  L X .‚à®-isJoin .IsJoin.[_,_] {< x >} {< y >} {< z >}  m‚ÇÅ m‚ÇÇ = X .‚à®-isJoin .IsJoin.[_,_] m‚ÇÅ m‚ÇÇ
  L X .‚ä•-isBottom .IsBottom.‚â§-bottom {bottom} = tt
  L X .‚ä•-isBottom .IsBottom.‚â§-bottom {< x >} = tt

  L-map : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí X => Y ‚Üí L X => L Y
  L-map m .func .fun bottom = bottom
  L-map m .func .fun < x > = < m .func .fun x >
  L-map m .func .mono {bottom} {bottom} _ = tt
  L-map m .func .mono {bottom} {< _ >} _ = tt
  L-map m .func .mono {< _ >} {bottom} ()
  L-map m .func .mono {< _ >} {< _ >} x‚ÇÅ‚â§x‚ÇÇ = m .func .mono x‚ÇÅ‚â§x‚ÇÇ
  L-map m .‚à®-preserving {bottom} {bottom} = tt
  L-map {B = B} m .‚à®-preserving {bottom} {< _ >} = B .‚â§-refl
  L-map {B = B} m .‚à®-preserving {< x >} {bottom} = B .‚â§-refl
  L-map m .‚à®-preserving {< _ >} {< _ >} = m .‚à®-preserving
  L-map m .‚ä•-preserving = tt

  -- Lifting is /not/ a monad: L-unit is not ‚ä•-preserving

  L-join : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí L (L X) => L X
  L-join .func .fun bottom = bottom
  L-join .func .fun < bottom > = bottom
  L-join .func .fun < < x > > = < x >
  L-join .func .mono {bottom} {bottom} _ = tt
  L-join .func .mono {bottom} {< bottom >} _ = tt
  L-join .func .mono {bottom} {< < _ > >} _ = tt
  L-join .func .mono {< bottom >} {< bottom >} _ = tt
  L-join .func .mono {< bottom >} {< < _ > >} _ = tt
  L-join .func .mono {< < _ > >} {< < _ > >} x‚â§x' = x‚â§x'
  L-join .‚à®-preserving {bottom} {bottom} = tt
  L-join .‚à®-preserving {bottom} {< bottom >} = tt
  L-join {A} .‚à®-preserving {bottom} {< < x > >} = A .‚â§-refl
  L-join .‚à®-preserving {< bottom >} {bottom} = tt
  L-join {A} .‚à®-preserving {< < _ > >} {bottom} = A .‚â§-refl
  L-join .‚à®-preserving {< bottom >} {< bottom >} = tt
  L-join {A} .‚à®-preserving {< bottom >} {< < x > >} = A .‚â§-refl
  L-join {A} .‚à®-preserving {< < _ > >} {< bottom >} = A .‚â§-refl
  L-join {A} .‚à®-preserving {< < _ > >} {< < _ > >} = A .‚â§-refl
  L-join .‚ä•-preserving = tt

  -- Lifting is a comonad in preorders with a bottom:
  L-counit : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí L X => X
  L-counit {X = X} .func .fun bottom = X .‚ä•
  L-counit .func .fun < x > = x
  L-counit {X = X} .func .mono {bottom} _ = IsBottom.‚â§-bottom (X .‚ä•-isBottom)
  L-counit .func .mono {< _ >} {< _ >} x‚â§x' = x‚â§x'
  L-counit {X = X} .‚à®-preserving {bottom} {bottom} = IsJoin.idem (X .‚à®-isJoin) .proj‚ÇÇ
  L-counit {X = X} .‚à®-preserving {bottom} {< _ >} =
    IsMonoid.lunit (monoidOfJoin _ (X .‚à®-isJoin) (X .‚ä•-isBottom)) .proj‚ÇÇ
  L-counit {X = X} .‚à®-preserving {< _ >} {bottom} =
    IsMonoid.runit (monoidOfJoin _ (X .‚à®-isJoin) (X .‚ä•-isBottom)) .proj‚ÇÇ
  L-counit {A} .‚à®-preserving {< _ >} {< _ >} = A .‚â§-refl
  L-counit {A} .‚ä•-preserving = A .‚â§-refl

  L-dup : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí L X => L (L X)
  L-dup .func .fun bottom = bottom
  L-dup .func .fun < x > = < < x > >
  L-dup .func .mono {bottom} {bottom} _ = tt
  L-dup .func .mono {bottom} {< _ >} _ = tt
  L-dup .func .mono {< _ >} {< _ >} x‚â§x' = x‚â§x'
  L-dup .‚à®-preserving {bottom} {bottom} = tt
  L-dup {A} .‚à®-preserving {bottom} {< _ >} = A .‚â§-refl
  L-dup {A} .‚à®-preserving {< _ >} {bottom} = A .‚â§-refl
  L-dup {A} .‚à®-preserving {< _ >} {< _ >} = A .‚â§-refl
  L-dup .‚ä•-preserving = tt

  L-costrength : ‚àÄ {A B}{X : JoinSemilattice A}{Y : JoinSemilattice B} ‚Üí
                 L (X ‚äï Y) => (X ‚äï L Y)
  L-costrength {X = X}{Y = Y} .func .fun bottom = (X ‚äï L Y) .‚ä•
  L-costrength .func .fun < x , y > = x , < y >
  L-costrength {A} .func .mono {bottom} {bottom} e = A .‚â§-refl , tt
  L-costrength {X = X} .func .mono {bottom} {< x >} e =
    X .‚ä•-isBottom .IsBottom.‚â§-bottom , tt
  L-costrength .func .mono {< x >} {< x‚ÇÅ >} e = e
  L-costrength {X = X} .‚à®-preserving {bottom} {bottom} =
    (X .‚à®-isJoin .IsJoin.inr) , tt
  L-costrength {A} {B} {X} .‚à®-preserving {bottom} {< x >} =
    X .‚à®-isJoin .IsJoin.inr , B .‚â§-refl
  L-costrength {A} {B} {X} .‚à®-preserving {< x >} {bottom} =
    X .‚à®-isJoin .IsJoin.inl , B .‚â§-refl
  L-costrength {A} {B} .‚à®-preserving {< _ >} {< _ >} =
    A .‚â§-refl , B .‚â§-refl
  L-costrength {A} .‚ä•-preserving = A .‚â§-refl , tt

  L-coassoc : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí (L-map L-dup ‚àò L-dup) ‚âÉm (L-dup ‚àò L-dup {X = X})
  L-coassoc .eqfunc .eqfun bottom .proj‚ÇÅ = tt
  L-coassoc .eqfunc .eqfun bottom .proj‚ÇÇ = tt
  L-coassoc {A} .eqfunc .eqfun < x > = A .‚âÉ-refl

  L-unit1 : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí (L-counit ‚àò L-dup) ‚âÉm id {X = L X}
  L-unit1 .eqfunc .eqfun bottom .proj‚ÇÅ = tt
  L-unit1 .eqfunc .eqfun bottom .proj‚ÇÇ = tt
  L-unit1 {A} .eqfunc .eqfun < x > = A .‚âÉ-refl

  L-unit2 : ‚àÄ {A}{X : JoinSemilattice A} ‚Üí (L-map L-counit ‚àò L-dup) ‚âÉm id {X = L X}
  L-unit2 .eqfunc .eqfun bottom .proj‚ÇÅ = tt
  L-unit2 .eqfunc .eqfun bottom .proj‚ÇÇ = tt
  L-unit2 {A} .eqfunc .eqfun < x > = A .‚âÉ-refl
