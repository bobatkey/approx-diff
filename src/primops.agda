{-# OPTIONS --postfix-projections --without-K --safe #-}

module primops where

open import Data.Unit using (tt)
open import Data.Product using (_,_)

open import join-semilattice
  renaming (_=>_ to _=>J_; ùüô to ùüôJ; _‚äï_ to _‚äïJ_; L to LJ)
open import meet-semilattice
  renaming (_=>_ to _=>M_; ùüô to ùüôM; _‚äï_ to _‚äïM_; L to LM)
open MeetSemilattice renaming (_‚â§_ to _‚â§M_)

strict-both-fwd : (LM ùüôM ‚äïM LM ùüôM) =>M LM ùüôM
strict-both-fwd ._=>M_.func (bottom , bottom) = bottom
strict-both-fwd ._=>M_.func (bottom , < tt >) = bottom
strict-both-fwd ._=>M_.func (< tt > , bottom) = bottom
strict-both-fwd ._=>M_.func (< tt > , < tt >) = < tt >
strict-both-fwd ._=>M_.monotone {bottom , bottom} {bottom , bottom} _ = tt
strict-both-fwd ._=>M_.monotone {bottom , bottom} {bottom , < x >} _ = tt
strict-both-fwd ._=>M_.monotone {bottom , bottom} {< x > , bottom} _ = tt
strict-both-fwd ._=>M_.monotone {bottom , bottom} {< x > , < x‚ÇÅ >} _ = tt
strict-both-fwd ._=>M_.monotone {bottom , < x >} {bottom , < x‚ÇÅ >} _ = tt
strict-both-fwd ._=>M_.monotone {bottom , < x >} {< x‚ÇÅ > , < x‚ÇÇ >} _ = tt
strict-both-fwd ._=>M_.monotone {< x > , bottom} {< x‚ÇÅ > , bottom} _ = tt
strict-both-fwd ._=>M_.monotone {< x > , bottom} {< x‚ÇÅ > , < x‚ÇÇ >} _ = tt
strict-both-fwd ._=>M_.monotone {< x > , < x‚ÇÅ >} {< x‚ÇÇ > , < x‚ÇÉ >} _ = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , bottom} {bottom , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , bottom} {bottom , < x >} = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , bottom} {< x > , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , bottom} {< x > , < x‚ÇÅ >} = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , < x >} {bottom , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , < x >} {bottom , < x‚ÇÅ >} = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , < x >} {< x‚ÇÅ > , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {bottom , < x >} {< x‚ÇÅ > , < x‚ÇÇ >} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , bottom} {bottom , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , bottom} {bottom , < x‚ÇÅ >} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , bottom} {< x‚ÇÅ > , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , bottom} {< x‚ÇÅ > , < x‚ÇÇ >} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , < x‚ÇÅ >} {bottom , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , < x‚ÇÅ >} {bottom , < x‚ÇÇ >} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , < x‚ÇÅ >} {< x‚ÇÇ > , bottom} = tt
strict-both-fwd ._=>M_.‚àß-preserving {< x > , < x‚ÇÅ >} {< x‚ÇÇ > , < x‚ÇÉ >} = tt
strict-both-fwd ._=>M_.‚ä§-preserving = tt

strict-both-bwd : LJ ùüôJ =>J (LJ ùüôJ ‚äïJ LJ ùüôJ)
strict-both-bwd ._=>J_.func _ = bottom , bottom
strict-both-bwd ._=>J_.monotone _ = tt , tt
strict-both-bwd ._=>J_.‚à®-preserving = tt , tt
strict-both-bwd ._=>J_.‚ä•-preserving = tt , tt
