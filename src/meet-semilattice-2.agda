{-# OPTIONS --postfix-projections --safe --without-K #-}

module meet-semilattice-2 where

open import Level
open import Data.Product using (Œ£; proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Unit using (tt) renaming (‚ä§ to Unit)
open import Data.Empty using () renaming (‚ä• to ùüò)
open import Relation.Binary using (IsEquivalence; Reflexive)
open import basics
open import preorder using (Preorder; _√ó_)

record MeetSemilattice (A : Preorder) : Set (suc 0‚Ñì) where
  no-eta-equality
  open Preorder public

  field
    _‚àß_     : A .Carrier ‚Üí A .Carrier ‚Üí A .Carrier
    ‚ä§       : A. Carrier
    ‚àß-isMeet  : IsMeet (A .‚â§-isPreorder) _‚àß_
    ‚ä§-isTop   : IsTop (A. ‚â§-isPreorder) ‚ä§

module _ {A B : Preorder} where
  open Preorder

  record _=>_ (X : MeetSemilattice A) (Y : MeetSemilattice B) : Set where
    open MeetSemilattice
    field
      func : A .Carrier ‚Üí B .Carrier
      monotone : ‚àÄ {x‚ÇÅ x‚ÇÇ} ‚Üí A ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí B ._‚â§_ (func x‚ÇÅ) (func x‚ÇÇ)
      ‚àß-preserving : ‚àÄ {x x'} ‚Üí B ._‚â§_ (Y ._‚àß_ (func x) (func x')) (func (X ._‚àß_ x x'))
      ‚ä§-preserving : B ._‚â§_ (Y .‚ä§) (func (X .‚ä§))

  record _‚âÉm_ {X : MeetSemilattice A} {Y : MeetSemilattice B} (f g : X => Y) : Set where
    open _=>_
    field
      eqfunc : ‚àÄ x ‚Üí _‚âÉ_ B (f .func x) (g .func x)

------------------------------------------------------------------------------
module _ where
  open MeetSemilattice
  open _=>_

  id : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => X
  id .func x = x
  id .monotone x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ
  id {Œë} .‚àß-preserving = Œë .‚â§-refl
  id {Œë} .‚ä§-preserving = Œë .‚â§-refl

  _‚àò_ : ‚àÄ {A B C}{X : MeetSemilattice A}{Y : MeetSemilattice B}{Z : MeetSemilattice C} ‚Üí
        Y => Z ‚Üí X => Y ‚Üí X => Z
  (f ‚àò g) .func x = f .func (g .func x)
  (f ‚àò g) .monotone x‚ÇÅ‚â§x‚ÇÇ = f .monotone (g .monotone x‚ÇÅ‚â§x‚ÇÇ)
  _‚àò_ {C = C} f g .‚àß-preserving =
    C .‚â§-trans (f .‚àß-preserving) (f .monotone (g .‚àß-preserving))
  _‚àò_ {C = C} f g .‚ä§-preserving =
    C .‚â§-trans (f .‚ä§-preserving) (f .monotone (g .‚ä§-preserving))

------------------------------------------------------------------------------
module _ where
  open MeetSemilattice
  open _=>_

  ùüô : MeetSemilattice preorder.ùüô
  ùüô ._‚àß_ tt tt = tt
  ùüô .‚ä§ = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÅ = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÇ = tt
  ùüô .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© tt tt = tt
  ùüô .‚ä§-isTop .IsTop.‚â§-top = tt

  terminal : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => ùüô
  terminal .func _ = tt
  terminal .monotone _ = tt
  terminal .‚àß-preserving = tt
  terminal .‚ä§-preserving = tt

-- Big Products
module _ (I : Set) (A : I ‚Üí Preorder) (X : (i : I) ‚Üí MeetSemilattice (A i)) where
  open MeetSemilattice
  open _=>_

  Œ†-preorder : Preorder
  Œ†-preorder .Carrier = ‚àÄ i ‚Üí A i .Carrier
  Œ†-preorder ._‚â§_ x‚ÇÅ x‚ÇÇ = ‚àÄ i ‚Üí A i ._‚â§_ (x‚ÇÅ i) (x‚ÇÇ i)
  Œ†-preorder .‚â§-isPreorder .IsPreorder.refl i = A i .‚â§-refl
  Œ†-preorder .‚â§-isPreorder .IsPreorder.trans x‚â§y y‚â§z i = A i .‚â§-trans (x‚â§y i) (y‚â§z i)

  Œ† : MeetSemilattice Œ†-preorder
  Œ† ._‚àß_ x‚ÇÅ x‚ÇÇ i = X i ._‚àß_ (x‚ÇÅ i) (x‚ÇÇ i)
  Œ† .‚ä§ i = X i .‚ä§
  Œ† .‚àß-isMeet .IsMeet.œÄ‚ÇÅ i = X i .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  Œ† .‚àß-isMeet .IsMeet.œÄ‚ÇÇ i = X i .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  Œ† .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚â§y x‚â§z i = X i .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© (x‚â§y i) (x‚â§z i)
  Œ† .‚ä§-isTop .IsTop.‚â§-top i = X i .‚ä§-isTop .IsTop.‚â§-top

------------------------------------------------------------------------------
-- Lifting
module _ where
  open preorder using (LCarrier; <_>; bottom)
  open MeetSemilattice
  open _=>_

  L : ‚àÄ {A} ‚Üí MeetSemilattice A ‚Üí MeetSemilattice (preorder.L A)
  L X ._‚àß_ bottom _ = bottom
  L X ._‚àß_ < x > bottom = bottom
  L X ._‚àß_ < x > < y > = < X ._‚àß_ x y >
  L X .‚ä§ = < X .‚ä§ >
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {bottom} {y} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {< x >} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {< x >} {< x‚ÇÅ >} = X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {bottom} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {bottom} {< x >} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {< x >} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {< x >} {< x‚ÇÅ >} = X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {bottom} {z} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {< y >}  {bottom} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {< y >}  {< z >} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {< x >}  {< y >}  {< z >} x‚â§y x‚â§z =
    X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚â§y x‚â§z
  L X .‚ä§-isTop .IsTop.‚â§-top {bottom} = tt
  L X .‚ä§-isTop .IsTop.‚â§-top {< x >} = X .‚ä§-isTop .IsTop.‚â§-top

  L-unit : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => L X
  L-unit .func x = < x >
  L-unit .monotone x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ
  L-unit {A} .‚àß-preserving = A .‚â§-refl
  L-unit {A} .‚ä§-preserving = A .‚â§-refl

  L-join : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí L (L X) => L X
  L-join .func bottom = bottom
  L-join .func < bottom > = bottom
  L-join .func < < x > > = < x >
  L-join .monotone {bottom}     {bottom}     x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .monotone {bottom}     {< bottom >} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .monotone {bottom}     {< < x > >}  x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .monotone {< bottom >} {< bottom >} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .monotone {< bottom >} {< < x > >}  x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .monotone {< < x > >}  {< < y > >}  x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ
  L-join .‚àß-preserving {bottom} {bottom} = tt
  L-join .‚àß-preserving {bottom} {< x >} = tt
  L-join .‚àß-preserving {< bottom >} {bottom} = tt
  L-join .‚àß-preserving {< < x > >} {bottom} = tt
  L-join .‚àß-preserving {< bottom >} {< x‚ÇÅ >} = tt
  L-join .‚àß-preserving {< < x > >} {< bottom >} = tt
  L-join {A} .‚àß-preserving {< < x > >} {< < x‚ÇÅ > >} = A .‚â§-refl
  L-join {A} .‚ä§-preserving = A .‚â§-refl

  L-func : ‚àÄ {A B}{X : MeetSemilattice A}{Y : MeetSemilattice B} ‚Üí X => Y ‚Üí L X => L Y
  L-func f .func bottom = bottom
  L-func f .func < x > = < f .func x >
  L-func f .monotone {bottom} {bottom} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-func f .monotone {bottom} {< x‚ÇÇ >} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-func f .monotone {< x‚ÇÅ >} {< x‚ÇÇ >} x‚ÇÅ‚â§x‚ÇÇ = f .monotone x‚ÇÅ‚â§x‚ÇÇ
  L-func f .‚àß-preserving {bottom} {x'} = tt
  L-func f .‚àß-preserving {< x >} {bottom} = tt
  L-func f .‚àß-preserving {< x >} {< x‚ÇÅ >} = f .‚àß-preserving
  L-func f .‚ä§-preserving = f .‚ä§-preserving

------------------------------------------------------------------------------
-- Biproducts
module _ where
  open Preorder
  open MeetSemilattice
  open _=>_

  _‚äï_ : ‚àÄ {A B} ‚Üí MeetSemilattice A ‚Üí MeetSemilattice B ‚Üí MeetSemilattice (A √ó B)
  (X ‚äï Y) ._‚àß_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚àß_ x‚ÇÅ x‚ÇÇ) , (Y ._‚àß_ y‚ÇÅ y‚ÇÇ)
  (X ‚äï Y) .‚ä§ = (X .‚ä§) , (Y .‚ä§)
  (X ‚äï Y) .‚àß-isMeet .IsMeet.œÄ‚ÇÅ = X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ , Y .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  (X ‚äï Y) .‚àß-isMeet .IsMeet.œÄ‚ÇÇ = X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ , Y .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  (X ‚äï Y) .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© (x‚ÇÅ‚â§y‚ÇÅ , x‚ÇÇ‚â§y‚ÇÇ) (x‚ÇÅ‚â§z‚ÇÅ , x‚ÇÇ‚â§z‚ÇÇ) =
    X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚ÇÅ‚â§y‚ÇÅ x‚ÇÅ‚â§z‚ÇÅ , Y .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚ÇÇ‚â§y‚ÇÇ x‚ÇÇ‚â§z‚ÇÇ
  (X ‚äï Y) .‚ä§-isTop .IsTop.‚â§-top = X .‚ä§-isTop .IsTop.‚â§-top , Y .‚ä§-isTop .IsTop.‚â§-top

  project‚ÇÅ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí (X ‚äï Y) => X
  project‚ÇÅ .func = proj‚ÇÅ
  project‚ÇÅ .monotone = proj‚ÇÅ
  project‚ÇÅ {A = A} .‚àß-preserving = A .‚â§-refl
  project‚ÇÅ {A = A} .‚ä§-preserving = A .‚â§-refl

  project‚ÇÇ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí (X ‚äï Y) => Y
  project‚ÇÇ .func = proj‚ÇÇ
  project‚ÇÇ .monotone = proj‚ÇÇ
  project‚ÇÇ {B = B} .‚àß-preserving = B .‚â§-refl
  project‚ÇÇ {B = B} .‚ä§-preserving = B .‚â§-refl

  ‚ü®_,_‚ü© : ‚àÄ {A B C} {W : MeetSemilattice A} {X : MeetSemilattice B} {Y : MeetSemilattice C} ‚Üí
          W => X ‚Üí W => Y ‚Üí W => (X ‚äï Y)
  ‚ü®_,_‚ü© f g .func w = f .func w , g .func w
  ‚ü®_,_‚ü© f g .monotone w‚ÇÅ‚â§w‚ÇÇ = (f .monotone w‚ÇÅ‚â§w‚ÇÇ) , (g .monotone w‚ÇÅ‚â§w‚ÇÇ)
  ‚ü®_,_‚ü© f g .‚àß-preserving = (f .‚àß-preserving) , (g .‚àß-preserving)
  ‚ü®_,_‚ü© f g .‚ä§-preserving = (f .‚ä§-preserving) , (g .‚ä§-preserving)

  inject‚ÇÅ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí X => (X ‚äï Y)
  inject‚ÇÅ {Y = Y} .func x = x , Y .‚ä§
  inject‚ÇÅ {B = B} .monotone x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ , B .‚â§-refl
  inject‚ÇÅ {A = A} .‚àß-preserving .proj‚ÇÅ = A .‚â§-refl
  inject‚ÇÅ {Y = Y} .‚àß-preserving .proj‚ÇÇ = Y .‚ä§-isTop .IsTop.‚â§-top
  inject‚ÇÅ {A = A}{B = B} .‚ä§-preserving = A .‚â§-refl , B .‚â§-refl

  inject‚ÇÇ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí Y => (X ‚äï Y)
  inject‚ÇÇ {X = X} .func y = X .‚ä§ , y
  inject‚ÇÇ {A = A} .monotone y‚ÇÅ‚â§y‚ÇÇ = A .‚â§-refl , y‚ÇÅ‚â§y‚ÇÇ
  inject‚ÇÇ {X = X} .‚àß-preserving .proj‚ÇÅ = X .‚ä§-isTop .IsTop.‚â§-top
  inject‚ÇÇ {B = B} .‚àß-preserving .proj‚ÇÇ = B .‚â§-refl
  inject‚ÇÇ {A = A}{B = B} .‚ä§-preserving = A .‚â§-refl , B .‚â§-refl

  [_,_] : ‚àÄ {A B C}{X : MeetSemilattice A}{Y : MeetSemilattice B}{Z : MeetSemilattice C} ‚Üí X => Z ‚Üí Y => Z ‚Üí (X ‚äï Y) => Z
  [_,_] {Z = Z} f g .func (x , y) = Z ._‚àß_ (f .func x) (g .func y)
  [_,_] {Z = Z} f g .monotone (x‚ÇÅ‚â§x‚ÇÇ , y‚ÇÅ‚â§y‚ÇÇ) =
    mono (f .monotone x‚ÇÅ‚â§x‚ÇÇ) (g .monotone y‚ÇÅ‚â§y‚ÇÇ)
    where open IsMeet (Z .‚àß-isMeet)
  [_,_] {C = C}{Z = Z} f g .‚àß-preserving {x , y} {x' , y'} =
    C .‚â§-trans (interchange sym)
               (‚àß-mono (f .‚àß-preserving) (g .‚àß-preserving))
    where open IsMeet (Z .‚àß-isMeet) renaming (mono to ‚àß-mono)
          open IsMonoid (monoidOfMeet (C .‚â§-isPreorder) (Z .‚àß-isMeet) (Z .‚ä§-isTop))
  [_,_] {Z = Z} f g .‚ä§-preserving = ‚ü® (f .‚ä§-preserving) , (g .‚ä§-preserving) ‚ü©Z
    where open IsMeet (Z .‚àß-isMeet) renaming (‚ü®_,_‚ü© to ‚ü®_,_‚ü©Z)
