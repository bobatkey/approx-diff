{-# OPTIONS --postfix-projections --safe --without-K #-}

module meet-semilattice-2 where

open import Level
open import Data.Product using (Œ£; proj‚ÇÅ; proj‚ÇÇ; _√ó_; _,_)
open import Data.Unit using (tt) renaming (‚ä§ to Unit)
open import Data.Empty using () renaming (‚ä• to ùüò)
open import Relation.Binary using (IsEquivalence; Reflexive)
open import basics
open import poset using (Poset)

record MeetSemilattice (A : Poset) : Set (suc 0‚Ñì) where
  no-eta-equality
  open Poset public

  field
    _‚àß_     : A .Carrier ‚Üí A .Carrier ‚Üí A .Carrier
    ‚ä§       : A. Carrier
    ‚àß-isMeet  : IsMeet (A .‚â§-isPreorder) _‚àß_
    ‚ä§-isTop   : IsTop (A. ‚â§-isPreorder) ‚ä§

module _ {A B : Poset} where
  open Poset

  record _=>_ (X : MeetSemilattice A) (Y : MeetSemilattice B) : Set where
    open MeetSemilattice
    field
      func : A .Carrier ‚Üí B .Carrier
      monotone : ‚àÄ {x‚ÇÅ x‚ÇÇ} ‚Üí A ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí B ._‚â§_ (func x‚ÇÅ) (func x‚ÇÇ)
      ‚àß-preserving : ‚àÄ {x x'} ‚Üí B ._‚â§_ (Y ._‚àß_ (func x) (func x')) (func (X ._‚àß_ x x'))
      ‚ä§-preserving : B ._‚â§_ (Y .‚ä§) (func (X .‚ä§))

  record _‚âÉm_ {X : MeetSemilattice A} {Y : MeetSemilattice B} (f g : X => Y) : Set where
    open _=>_
    field
      eqfunc : ‚àÄ x ‚Üí _‚âÉ_ B (f .func x) (g .func x)

------------------------------------------------------------------------------
module _ where
  open MeetSemilattice
  open _=>_

  id : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => X
  id .func x = x
  id .monotone x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ
  id {Œë} .‚àß-preserving = Œë .‚â§-refl
  id {Œë} .‚ä§-preserving = Œë .‚â§-refl

  _‚àò_ : ‚àÄ {A B C}{X : MeetSemilattice A}{Y : MeetSemilattice B}{Z : MeetSemilattice C} ‚Üí
        Y => Z ‚Üí X => Y ‚Üí X => Z
  (f ‚àò g) .func x = f .func (g .func x)
  (f ‚àò g) .monotone x‚ÇÅ‚â§x‚ÇÇ = f .monotone (g .monotone x‚ÇÅ‚â§x‚ÇÇ)
  _‚àò_ {C = C} f g .‚àß-preserving =
    C .‚â§-trans (f .‚àß-preserving) (f .monotone (g .‚àß-preserving))
  _‚àò_ {C = C} f g .‚ä§-preserving =
    C .‚â§-trans (f .‚ä§-preserving) (f .monotone (g .‚ä§-preserving))

-- Big Products would be expressed in terms of big product of posets

------------------------------------------------------------------------------
module _ where
  open MeetSemilattice
  open _=>_

  ùüô : MeetSemilattice poset.ùüô
  ùüô ._‚àß_ tt tt = tt
  ùüô .‚ä§ = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÅ = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÇ = tt
  ùüô .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© tt tt = tt
  ùüô .‚ä§-isTop .IsTop.‚â§-top = tt

  terminal : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => ùüô
  terminal .func _ = tt
  terminal .monotone _ = tt
  terminal .‚àß-preserving = tt
  terminal .‚ä§-preserving = tt

------------------------------------------------------------------------------
-- Lifting
module _ where
  open poset using (LCarrier; <_>; bottom)
  open MeetSemilattice

  L : ‚àÄ {A} ‚Üí MeetSemilattice A ‚Üí MeetSemilattice (poset.L A)
  L X ._‚àß_ bottom _ = bottom
  L X ._‚àß_ < x > bottom = bottom
  L X ._‚àß_ < x > < y > = < X ._‚àß_ x y >
  L X .‚ä§ = < X .‚ä§ >
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {bottom} {y} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {< x >} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {< x >} {< x‚ÇÅ >} = X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {bottom} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {bottom} {< x >} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {< x >} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {< x >} {< x‚ÇÅ >} = X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {bottom} {z} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {< y >}  {bottom} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {< y >}  {< z >} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {< x >}  {< y >}  {< z >} x‚â§y x‚â§z =
    X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚â§y x‚â§z
  L X .‚ä§-isTop .IsTop.‚â§-top {bottom} = tt
  L X .‚ä§-isTop .IsTop.‚â§-top {< x >} = X .‚ä§-isTop .IsTop.‚â§-top
