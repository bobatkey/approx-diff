{-# OPTIONS --postfix-projections --prop --safe #-}

module glueing-application where

open import Level using (suc; 0‚Ñì; lift)
open import prop using (_‚áî_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Unit using (tt)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import categories using (Category; HasTerminal; HasProducts; HasCoproducts)
open import functor using (HasLimits; op-colimit; limits‚Üílimits'; Functor)
open import cmon-category using (CMonCategory)
open import product-category using (product; product-limit)
open import setoid-cat using (SetoidCat; Setoid-products; Setoid-coproducts)
import preorder
import prop-setoid
import cmon-enriched
import product-diagram
import empty-diagram
import meet-semilattice-category
import join-semilattice-category
import grothendieck
import fam

------------------------------------------------------------------------------
-- Meet √ó Join^op

M√óJop : CMonCategory (suc 0‚Ñì) 0‚Ñì 0‚Ñì
M√óJop .CMonCategory.cat =
  product meet-semilattice-category.cat (Category.opposite join-semilattice-category.cat)
M√óJop .CMonCategory.cmon-enriched =
  product-cmon-enriched meet-semilattice-category.cmon-enriched
                       (op-cmon-enriched join-semilattice-category.cmon-enriched)
  where open import cmon-enriched using (product-cmon-enriched; op-cmon-enriched)

M√óJop‚ÇÄ = CMonCategory.cat M√óJop

Approx : Category.obj M√óJop‚ÇÄ
Approx .proj‚ÇÅ = meet-semilattice-category.TWO
Approx .proj‚ÇÇ = join-semilattice-category.TWO

M√óJop‚ÇÄ-limits-0 : ‚àÄ (ùíÆ : Category 0‚Ñì 0‚Ñì 0‚Ñì) ‚Üí HasLimits ùíÆ M√óJop‚ÇÄ
M√óJop‚ÇÄ-limits-0 ùíÆ D =
  product-limit _ _ ùíÆ D
    (meet-semilattice-category.limits ùíÆ _)
    (op-colimit _ (join-semilattice-category.colimits (Category.opposite ùíÆ) _))

M√óJop-products : HasProducts M√óJop‚ÇÄ
M√óJop-products = product-diagram.limits‚Üíproducts M√óJop‚ÇÄ (M√óJop‚ÇÄ-limits-0 _)

M√óJop-terminal : HasTerminal M√óJop‚ÇÄ
M√óJop-terminal = empty-diagram.limits‚Üíterminal M√óJop‚ÇÄ (M√óJop‚ÇÄ-limits-0 _)

M√óJop-biproducts : ‚àÄ x y ‚Üí cmon-enriched.Biproduct (CMonCategory.cmon-enriched M√óJop) x y
M√óJop-biproducts =
  cmon-enriched.cmon+products‚Üíbiproducts (M√óJop .CMonCategory.cmon-enriched) M√óJop-products

------------------------------------------------------------------------------
-- Fam(Meet √ó Join^op)

open grothendieck.CategoryOfFamilies 0‚Ñì 0‚Ñì M√óJop‚ÇÄ
  renaming ( cat        to Fam‚ü®M√óJop‚ü©
           ; terminal   to make-terminal
           ; coproducts to Fam‚ü®M√óJop‚ü©-coproducts )
  using (module products; Obj; Mor)
  public

Fam‚ü®M√óJop‚ü©-terminal : HasTerminal Fam‚ü®M√óJop‚ü©
Fam‚ü®M√óJop‚ü©-terminal = make-terminal M√óJop-terminal

open import families-exponentials 0‚Ñì 0‚Ñì
   M√óJop‚ÇÄ
   (M√óJop .CMonCategory.cmon-enriched)
   M√óJop-biproducts
   (fam.hasSetoidProducts 0‚Ñì 0‚Ñì M√óJop‚ÇÄ Œª A ‚Üí limits‚Üílimits' (M√óJop‚ÇÄ-limits-0 _))
  renaming ( exponentials to Fam‚ü®M√óJop‚ü©-exponentials
           ; products     to Fam‚ü®M√óJop‚ü©-products )
  using    ()
  public

module _ where

  open Obj
  open fam.Fam

  Fam‚ü®Approx‚ü© : Category.obj Fam‚ü®M√óJop‚ü©
  Fam‚ü®Approx‚ü© .idx = prop-setoid.ùüô
  Fam‚ü®Approx‚ü© .fam .fm _ = Approx
  Fam‚ü®Approx‚ü© .fam .subst _ = Category.id M√óJop‚ÇÄ _
  Fam‚ü®Approx‚ü© .fam .refl* = Category.‚âà-refl M√óJop‚ÇÄ
  Fam‚ü®Approx‚ü© .fam .trans* e‚ÇÅ e‚ÇÇ = Category.‚âà-sym M√óJop‚ÇÄ (Category.id-left M√óJop‚ÇÄ)

  -- and this is a monoid wrt the finite products

  -- and there are some base types, interpreted as Sets

------------------------------------------------------------------------------
import sconing
import glueing-simple
import setoid-predicate

-- FIXME: do Sconing with respect to n-ary products of Fam‚ü®Approx‚ü©
module Sc = sconing Fam‚ü®M√óJop‚ü© Fam‚ü®M√óJop‚ü©-products Fam‚ü®Approx‚ü©
open Sc using (Scone)

module G = glueing-simple
             Fam‚ü®M√óJop‚ü©
             (SetoidCat 0‚Ñì 0‚Ñì) (Setoid-products 0‚Ñì 0‚Ñì) (Setoid-coproducts 0‚Ñì 0‚Ñì) setoid-predicate.system
             Sc.Scone

module GCP = G.coproducts Fam‚ü®M√óJop‚ü©-coproducts

module GP = G.products-and-exponentials
               Fam‚ü®M√óJop‚ü©-products
               Fam‚ü®M√óJop‚ü©-exponentials
               Sc.mul
               Sc.mul‚Åª¬π
               Sc.mul-inv
               Sc.mul-natural
               Sc.Scone-p‚ÇÅ

-- Now have a BiCCC

module _ where
  open setoid-predicate.Predicate
  import two
  open Mor
  open fam._‚áíf_
  open meet-semilattice-category._‚áí_
  open join-semilattice-category._‚áí_
  open preorder._=>_

  -- The glued interpretation of the approximation object is that it
  -- is a galois connection with the environment. FIXME: need to
  -- upgrade this to n-ary approximation environments.
  G‚ü®Approx‚ü© : Category.obj G.cat
  G‚ü®Approx‚ü© .G.Obj.carrier = Fam‚ü®Approx‚ü©
  G‚ü®Approx‚ü© .G.Obj.pred .pred f = ‚àÄ {x y} ‚Üí y two.‚â§ fwd x ‚áî bwd y two.‚â§ x
   where fwd = f .famf .transf (lift tt) .proj‚ÇÅ .func .fun
         bwd = f .famf .transf (lift tt) .proj‚ÇÇ .func .fun
  G‚ü®Approx‚ü© .G.Obj.pred .pred-‚âÉ {f‚ÇÅ} {f‚ÇÇ} f‚ÇÅ‚âàf‚ÇÇ f‚ÇÅ-is-galois-connection {x} {y} = {!!} -- FIXME: do a general congruence lemma for galois connections

-- For any first-order type, and base element of the type, there is an
-- 'n ‚àà ‚Ñï' such that Fam‚ü®M√óJop‚ü©(Approx^n, ‚ü¶ A ‚üß) is an isomorphism in
-- the lower part.

-- 4. There is an approximation object in Glued(Scone(ùî∏n))
--    - which ensures Galois connections by construction
-- 5. Derive the correctness properties:
--    (a) For every x : A ‚ä¢ M : B, with A, B first order, ‚àÄ a ‚Üí ‚ü¶ M ‚üß .famf a is a galois connection
--    (b) For every x : A ‚ä¢ M : B, the set theoretic portions are equal. (sconing over ùî∏0)

-- Ideally:
-- 1. Fam(PSh_Cmon(GraphLang)) is a correct normaliser


-- data fo-type : Set where
--   `base `approx : fo-type
--   _`√ó_ _`+_ : fo-type ‚Üí fo-type ‚Üí fo-type
