{-# OPTIONS --postfix-projections --safe --without-K #-}

module meet-semilattice where

open import Level
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _√ó_; _,_)
open import Data.Unit using (tt) renaming (‚ä§ to Unit)
open import Data.Empty using () renaming (‚ä• to ùüò)
open import Relation.Binary using (IsEquivalence; Reflexive)
open import basics

record MeetSemilattice : Set (suc 0‚Ñì) where
  no-eta-equality
  field
    Carrier : Set
    _‚â§_     : Carrier ‚Üí Carrier ‚Üí Set
    _‚àß_     : Carrier ‚Üí Carrier ‚Üí Carrier
    ‚ä§       : Carrier
    ‚â§-isPreorder : IsPreorder _‚â§_
    ‚àß-isMeet     : IsMeet ‚â§-isPreorder _‚àß_
    ‚ä§-isTop      : IsTop ‚â§-isPreorder ‚ä§

  open IsPreorder ‚â§-isPreorder renaming (refl to ‚â§-refl; trans to ‚â§-trans) public

record _=>_ (X Y : MeetSemilattice) : Set where
  open MeetSemilattice
  field
    func : X .Carrier ‚Üí Y .Carrier
    monotone : ‚àÄ {x‚ÇÅ x‚ÇÇ} ‚Üí X ._‚â§_ x‚ÇÅ x‚ÇÇ ‚Üí Y ._‚â§_ (func x‚ÇÅ) (func x‚ÇÇ)
    ‚àß-preserving : ‚àÄ {x x'} ‚Üí Y ._‚â§_ (Y ._‚àß_ (func x) (func x')) (func (X ._‚àß_ x x'))
    ‚ä§-preserving : Y ._‚â§_ (Y .‚ä§) (func (X .‚ä§))

record _‚âÉm_ {X Y : MeetSemilattice} (f g : X => Y) : Set where
  open _=>_
  open IsPreorder (Y .MeetSemilattice.‚â§-isPreorder)
  field
    eqfunc : ‚àÄ x ‚Üí f .func x ‚âÉ g .func x

------------------------------------------------------------------------------
-- Big Products
module _ (I : Set)(X : I ‚Üí MeetSemilattice) where

  open MeetSemilattice
  open _=>_

  Œ† : MeetSemilattice
  Œ† .Carrier = ‚àÄ i ‚Üí X i .Carrier
  Œ† ._‚â§_ x‚ÇÅ x‚ÇÇ = ‚àÄ i ‚Üí X i ._‚â§_ (x‚ÇÅ i) (x‚ÇÇ i)
  Œ† ._‚àß_ x‚ÇÅ x‚ÇÇ i = X i ._‚àß_ (x‚ÇÅ i) (x‚ÇÇ i)
  Œ† .‚ä§ i = X i .‚ä§
  Œ† .‚â§-isPreorder .IsPreorder.refl i = X i .‚â§-refl
  Œ† .‚â§-isPreorder .IsPreorder.trans x‚â§y y‚â§z i = X i .‚â§-trans (x‚â§y i) (y‚â§z i)
  Œ† .‚àß-isMeet .IsMeet.œÄ‚ÇÅ i = X i .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  Œ† .‚àß-isMeet .IsMeet.œÄ‚ÇÇ i = X i .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  Œ† .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚â§y x‚â§z i = X i .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© (x‚â§y i) (x‚â§z i)
  Œ† .‚ä§-isTop .IsTop.‚â§-top i = X i .‚ä§-isTop .IsTop.‚â§-top

  proj-Œ† : (i : I) ‚Üí Œ† => X i
  proj-Œ† i .func x = x i
  proj-Œ† i .monotone x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ i
  proj-Œ† i .‚àß-preserving = X i .‚â§-refl
  proj-Œ† i .‚ä§-preserving = X i .‚â§-refl

  lambda-Œ† : ‚àÄ {W} ‚Üí (W=>X : ‚àÄ i ‚Üí W => X i) ‚Üí W => Œ†
  lambda-Œ† W=>X .func w i = W=>X i .func w
  lambda-Œ† W=>X .monotone w‚ÇÅ‚â§w‚ÇÇ i = W=>X i .monotone w‚ÇÅ‚â§w‚ÇÇ
  lambda-Œ† W=>X .‚àß-preserving i = W=>X i .‚àß-preserving
  lambda-Œ† W=>X .‚ä§-preserving i = W=>X i .‚ä§-preserving

------------------------------------------------------------------------------
module _ where
  open MeetSemilattice

  ùüô : MeetSemilattice
  ùüô .Carrier = Unit
  ùüô ._‚â§_ tt tt = Unit
  ùüô ._‚àß_ tt tt = tt
  ùüô .‚ä§ = tt
  ùüô .‚â§-isPreorder .IsPreorder.refl = tt
  ùüô .‚â§-isPreorder .IsPreorder.trans tt tt = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÅ = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÇ = tt
  ùüô .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© tt tt = tt
  ùüô .‚ä§-isTop .IsTop.‚â§-top = tt

------------------------------------------------------------------------------
-- Biproducts
module _ where
  open MeetSemilattice
  open _=>_

  _‚äï_ : MeetSemilattice ‚Üí MeetSemilattice ‚Üí MeetSemilattice
  (X ‚äï Y) .Carrier = X .Carrier √ó Y .Carrier
  (X ‚äï Y) ._‚â§_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚â§_ x‚ÇÅ x‚ÇÇ) √ó (Y ._‚â§_ y‚ÇÅ y‚ÇÇ)
  (X ‚äï Y) ._‚àß_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚àß_ x‚ÇÅ x‚ÇÇ) , (Y ._‚àß_ y‚ÇÅ y‚ÇÇ)
  (X ‚äï Y) .‚ä§ = (X .‚ä§) , (Y .‚ä§)
  (X ‚äï Y) .‚â§-isPreorder .IsPreorder.refl = (X .‚â§-refl) , (Y .‚â§-refl)
  (X ‚äï Y) .‚â§-isPreorder .IsPreorder.trans (x‚ÇÅ‚â§y‚ÇÅ , x‚ÇÇ‚â§y‚ÇÇ) (y‚ÇÅ‚â§z‚ÇÅ , y‚ÇÇ‚â§z‚ÇÇ) =
    (X .‚â§-trans x‚ÇÅ‚â§y‚ÇÅ y‚ÇÅ‚â§z‚ÇÅ) , (Y .‚â§-trans x‚ÇÇ‚â§y‚ÇÇ y‚ÇÇ‚â§z‚ÇÇ)
  (X ‚äï Y) .‚àß-isMeet .IsMeet.œÄ‚ÇÅ = X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ , Y .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  (X ‚äï Y) .‚àß-isMeet .IsMeet.œÄ‚ÇÇ = X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ , Y .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  (X ‚äï Y) .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© (x‚ÇÅ‚â§y‚ÇÅ , x‚ÇÇ‚â§y‚ÇÇ) (x‚ÇÅ‚â§z‚ÇÅ , x‚ÇÇ‚â§z‚ÇÇ) =
    X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚ÇÅ‚â§y‚ÇÅ x‚ÇÅ‚â§z‚ÇÅ , Y .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚ÇÇ‚â§y‚ÇÇ x‚ÇÇ‚â§z‚ÇÇ
  (X ‚äï Y) .‚ä§-isTop .IsTop.‚â§-top = X .‚ä§-isTop .IsTop.‚â§-top , Y .‚ä§-isTop .IsTop.‚â§-top

  project‚ÇÅ : ‚àÄ {X Y} ‚Üí (X ‚äï Y) => X
  project‚ÇÅ .func = proj‚ÇÅ
  project‚ÇÅ .monotone = proj‚ÇÅ
  project‚ÇÅ {X}{Y} .‚àß-preserving = X .‚â§-refl
  project‚ÇÅ {X}{Y} .‚ä§-preserving = X .‚â§-refl

  project‚ÇÇ : ‚àÄ {X Y} ‚Üí (X ‚äï Y) => Y
  project‚ÇÇ .func = proj‚ÇÇ
  project‚ÇÇ .monotone = proj‚ÇÇ
  project‚ÇÇ {X}{Y} .‚àß-preserving = Y .‚â§-refl
  project‚ÇÇ {X}{Y} .‚ä§-preserving = Y .‚â§-refl

  pair : ‚àÄ {W X Y} ‚Üí W => X ‚Üí W => Y ‚Üí W => (X ‚äï Y)
  pair f g .func w = f .func w , g .func w
  pair f g .monotone w‚ÇÅ‚â§w‚ÇÇ = (f .monotone w‚ÇÅ‚â§w‚ÇÇ) , (g .monotone w‚ÇÅ‚â§w‚ÇÇ)
  pair f g .‚àß-preserving = (f .‚àß-preserving) , (g .‚àß-preserving)
  pair f g .‚ä§-preserving = (f .‚ä§-preserving) , (g .‚ä§-preserving)
