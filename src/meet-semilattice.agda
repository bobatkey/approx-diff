{-# OPTIONS --postfix-projections --safe --prop #-}

module meet-semilattice where

open import Level
open import Data.Product using (Œ£; proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Unit using (tt) renaming (‚ä§ to Unit)
open import Data.Empty using () renaming (‚ä• to ùüò)
open import basics
open import prop renaming (_‚àß_ to _‚àßp_; ‚ä§ to ‚ä§p)
open import prop-setoid using (IsEquivalence)
open import preorder using (Preorder; _√ó_)

record MeetSemilattice (A : Preorder) : Set (suc 0‚Ñì) where
  no-eta-equality
  open Preorder public

  field
    _‚àß_       : A .Carrier ‚Üí A .Carrier ‚Üí A .Carrier
    ‚ä§         : A. Carrier
    ‚àß-isMeet  : IsMeet (A .‚â§-isPreorder) _‚àß_
    ‚ä§-isTop   : IsTop (A. ‚â§-isPreorder) ‚ä§

  open IsMeet ‚àß-isMeet
    renaming (assoc to ‚àß-assoc; ‚ü®_,_‚ü© to ‚ü®_‚àß_‚ü©; mono to ‚àß-mono; comm to ‚àß-comm; cong to ‚àß-cong) public

  open IsTop ‚ä§-isTop public

  open IsMonoid (monoidOfMeet _ ‚àß-isMeet ‚ä§-isTop)
    using (interchange)
    renaming (lunit to ‚àß-lunit; runit to ‚àß-runit)
    public

module _ {A B : Preorder} where
  open Preorder
  open preorder._=>_
  private
    module A = Preorder A
    module B = Preorder B

  record _=>_ (X : MeetSemilattice A) (Y : MeetSemilattice B) : Set where
    open MeetSemilattice
    open preorder._=>_ using (mono)
    field
      func : A preorder.=> B
      ‚àß-preserving : ‚àÄ {x x'} ‚Üí B ._‚â§_ (Y ._‚àß_ (func .fun x) (func .fun x')) (func .fun (X ._‚àß_ x x'))
      ‚ä§-preserving : B ._‚â§_ (Y .‚ä§) (func .fun (X .‚ä§))

    ‚àß-preserving-‚âÉ : ‚àÄ {x x'} ‚Üí Y ._‚àß_ (func .fun x) (func .fun x') B.‚âÉ func .fun (X ._‚àß_ x x')
    ‚àß-preserving-‚âÉ .proj‚ÇÅ = ‚àß-preserving
    ‚àß-preserving-‚âÉ .proj‚ÇÇ = Y .‚ü®_‚àß_‚ü© (func .mono (X .œÄ‚ÇÅ)) (func .mono (X .œÄ‚ÇÇ))

    ‚ä§-preserving-‚âÉ : Y .‚ä§ B.‚âÉ func .fun (X .‚ä§)
    ‚ä§-preserving-‚âÉ .proj‚ÇÅ = ‚ä§-preserving
    ‚ä§-preserving-‚âÉ .proj‚ÇÇ = Y .‚â§-top

  open _=>_

  record _‚âÉm_ {X : MeetSemilattice A} {Y : MeetSemilattice B} (f g : X => Y) : Prop where
    field
      eqfunc : f .func preorder.‚âÉm g .func

  open IsEquivalence
  open _‚âÉm_
  open preorder._‚âÉm_

  ‚âÉm-isEquivalence : ‚àÄ {X Y} ‚Üí IsEquivalence (_‚âÉm_ {X} {Y})
  ‚âÉm-isEquivalence .refl .eqfunc .eqfun x = B.‚âÉ-refl
  ‚âÉm-isEquivalence .sym e .eqfunc .eqfun x = B.‚âÉ-sym (e .eqfunc .eqfun x)
  ‚âÉm-isEquivalence .trans e‚ÇÅ e‚ÇÇ .eqfunc .eqfun x = B.‚âÉ-trans (e‚ÇÅ .eqfunc .eqfun x) (e‚ÇÇ .eqfunc .eqfun x)

------------------------------------------------------------------------------
module _ where
  open MeetSemilattice
  open _=>_
  open preorder._=>_

  id : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => X
  id .func = preorder.id
  id {Œë} .‚àß-preserving = Œë .‚â§-refl
  id {Œë} .‚ä§-preserving = Œë .‚â§-refl

  _‚àò_ : ‚àÄ {A B C}{X : MeetSemilattice A}{Y : MeetSemilattice B}{Z : MeetSemilattice C} ‚Üí
        Y => Z ‚Üí X => Y ‚Üí X => Z
  (f ‚àò g) .func = f .func preorder.‚àò g .func
  _‚àò_ {C = C} f g .‚àß-preserving =
    C .‚â§-trans (f .‚àß-preserving) (f .func .mono (g .‚àß-preserving))
  _‚àò_ {C = C} f g .‚ä§-preserving =
    C .‚â§-trans (f .‚ä§-preserving) (f .func .mono (g .‚ä§-preserving))

  open _‚âÉm_
  open preorder._‚âÉm_

  ‚àò-cong : ‚àÄ {A B C}{X : MeetSemilattice A}{Y : MeetSemilattice B}{Z : MeetSemilattice C}
             {f‚ÇÅ f‚ÇÇ : Y => Z} {g‚ÇÅ g‚ÇÇ : X => Y} ‚Üí
             f‚ÇÅ ‚âÉm f‚ÇÇ ‚Üí g‚ÇÅ ‚âÉm g‚ÇÇ ‚Üí (f‚ÇÅ ‚àò g‚ÇÅ) ‚âÉm (f‚ÇÇ ‚àò g‚ÇÇ)
  ‚àò-cong {A}{B}{C} {f‚ÇÅ = f‚ÇÅ} f‚ÇÅ‚âÉf‚ÇÇ g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x =
    C .‚âÉ-trans (resp-‚âÉ (f‚ÇÅ .func) (g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x)) (f‚ÇÅ‚âÉf‚ÇÇ .eqfunc .eqfun _)

  id-left : ‚àÄ {A B}{X : MeetSemilattice A}{Y : MeetSemilattice B} ‚Üí
            {f : X => Y} ‚Üí (id ‚àò f) ‚âÉm f
  id-left {A} {B} .eqfunc .eqfun x = B .‚âÉ-refl

  id-right : ‚àÄ {A B}{X : MeetSemilattice A}{Y : MeetSemilattice B} ‚Üí
            {f : X => Y} ‚Üí (f ‚àò id) ‚âÉm f
  id-right {A} {B} .eqfunc .eqfun x = B .‚âÉ-refl

  assoc : ‚àÄ {A B C D}
            {W : MeetSemilattice A}
            {X : MeetSemilattice B}
            {Y : MeetSemilattice C}
            {Z : MeetSemilattice D}
            (f : Y => Z) (g : X => Y) (h : W => X) ‚Üí
            ((f ‚àò g) ‚àò h) ‚âÉm (f ‚àò (g ‚àò h))
  assoc {D = D} f g h .eqfunc .eqfun x = D .‚âÉ-refl

  -- Additive structure
  --
  -- FIXME: this is true of any monoids: generalise!
  module _ {A B}{X : MeetSemilattice A}{Y : MeetSemilattice B} where
    open preorder._‚âÉm_
    private
      module B = Preorder B
      module Y = MeetSemilattice Y

    Œµm : X => Y
    Œµm .func .fun x = Y.‚ä§
    Œµm .func .mono _ = B.‚â§-refl
    Œµm .‚àß-preserving = Y.‚àß-lunit .proj‚ÇÅ
    Œµm .‚ä§-preserving = B.‚â§-refl

    _+m_ : X => Y ‚Üí X => Y ‚Üí X => Y
    (f +m g) .func .fun x = f .func .fun x Y.‚àß g .func .fun x
    (f +m g) .func .mono x‚ÇÅ‚â§x‚ÇÇ = Y.‚àß-mono (f .func .mono x‚ÇÅ‚â§x‚ÇÇ) (g .func .mono x‚ÇÅ‚â§x‚ÇÇ)
    (f +m g) .‚àß-preserving =
      B.‚â§-trans (Y.interchange Y.‚àß-comm .proj‚ÇÅ)
                (Y.‚àß-mono (f .‚àß-preserving) (g .‚àß-preserving))
    (f +m g) .‚ä§-preserving =
      B.‚â§-trans (Y.‚àß-lunit .proj‚ÇÇ) (Y.‚àß-mono (f .‚ä§-preserving) (g .‚ä§-preserving))

    +m-cong : ‚àÄ {f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : X => Y} ‚Üí f‚ÇÅ ‚âÉm f‚ÇÇ ‚Üí g‚ÇÅ ‚âÉm g‚ÇÇ ‚Üí (f‚ÇÅ +m g‚ÇÅ) ‚âÉm (f‚ÇÇ +m g‚ÇÇ)
    +m-cong f‚ÇÅ‚âÉf‚ÇÇ g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x = Y.‚àß-cong (f‚ÇÅ‚âÉf‚ÇÇ .eqfunc .eqfun x) (g‚ÇÅ‚âÉg‚ÇÇ .eqfunc .eqfun x)

    +m-comm : ‚àÄ {f g} ‚Üí (f +m g) ‚âÉm (g +m f)
    +m-comm .eqfunc .eqfun x .proj‚ÇÅ = Y.‚àß-comm
    +m-comm .eqfunc .eqfun x .proj‚ÇÇ = Y.‚àß-comm

    +m-assoc : ‚àÄ {f g h} ‚Üí ((f +m g) +m h) ‚âÉm (f +m (g +m h))
    +m-assoc .eqfunc .eqfun x = Y.‚àß-assoc

    +m-lunit : ‚àÄ {f} ‚Üí (Œµm +m f) ‚âÉm f
    +m-lunit .eqfunc .eqfun x = Y.‚àß-lunit

  -- Bilinearity of composition
  module _ {A B C}
           {X : MeetSemilattice A}{Y : MeetSemilattice B}{Z : MeetSemilattice C} where
    open preorder._‚âÉm_

    comp-bilinear‚ÇÅ : ‚àÄ (f‚ÇÅ f‚ÇÇ : Y => Z) (g : X => Y) ‚Üí
                       ((f‚ÇÅ +m f‚ÇÇ) ‚àò g) ‚âÉm ((f‚ÇÅ ‚àò g) +m (f‚ÇÇ ‚àò g))
    comp-bilinear‚ÇÅ f‚ÇÅ f‚ÇÇ g .eqfunc .eqfun x = C .‚âÉ-refl

    comp-bilinear‚ÇÇ : ‚àÄ (f : Y => Z) (g‚ÇÅ g‚ÇÇ : X => Y) ‚Üí
                       (f ‚àò (g‚ÇÅ +m g‚ÇÇ)) ‚âÉm ((f ‚àò g‚ÇÅ) +m (f ‚àò g‚ÇÇ))
    comp-bilinear‚ÇÇ f g‚ÇÅ g‚ÇÇ .eqfunc .eqfun x = C .‚âÉ-sym (‚àß-preserving-‚âÉ f)

    comp-bilinear-Œµ‚ÇÅ : ‚àÄ (f : X => Y) ‚Üí (Œµm ‚àò f) ‚âÉm Œµm {X = X} {Y = Z}
    comp-bilinear-Œµ‚ÇÅ f .eqfunc .eqfun x = C .‚âÉ-refl

    comp-bilinear-Œµ‚ÇÇ : ‚àÄ (f : Y => Z) ‚Üí (f ‚àò Œµm) ‚âÉm Œµm {X = X} {Y = Z}
    comp-bilinear-Œµ‚ÇÇ f .eqfunc .eqfun x = C .‚âÉ-sym (‚ä§-preserving-‚âÉ f)

------------------------------------------------------------------------------
-- Big Products
module _ (I : Set) {A : I ‚Üí Preorder} (X : (i : I) ‚Üí MeetSemilattice (A i)) where
  open MeetSemilattice
  open _=>_
  open preorder._=>_

  Œ†-preorder : Preorder
  Œ†-preorder = preorder.Œ† I A

  Œ† : MeetSemilattice Œ†-preorder
  Œ† ._‚àß_ x‚ÇÅ x‚ÇÇ i = X i ._‚àß_ (x‚ÇÅ i) (x‚ÇÇ i)
  Œ† .‚ä§ i = X i .‚ä§
  Œ† .‚àß-isMeet .IsMeet.œÄ‚ÇÅ i = X i .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  Œ† .‚àß-isMeet .IsMeet.œÄ‚ÇÇ i = X i .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  Œ† .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚â§y x‚â§z i = X i .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© (x‚â§y i) (x‚â§z i)
  Œ† .‚ä§-isTop .IsTop.‚â§-top i = X i .‚ä§-isTop .IsTop.‚â§-top

  proj-Œ† : (i : I) ‚Üí Œ† => X i
  proj-Œ† i .func .fun x = x i
  proj-Œ† i .func .mono x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ i
  proj-Œ† i .‚àß-preserving = A i .‚â§-refl
  proj-Œ† i .‚ä§-preserving = A i .‚â§-refl

  lambda-Œ† : ‚àÄ {B} {W : MeetSemilattice B} ‚Üí (W=>X : ‚àÄ i ‚Üí W => X i) ‚Üí W => Œ†
  lambda-Œ† W=>X .func .fun w i = W=>X i .func .fun w
  lambda-Œ† W=>X .func .mono w‚ÇÅ‚â§w‚ÇÇ i = W=>X i .func .mono w‚ÇÅ‚â§w‚ÇÇ
  lambda-Œ† W=>X .‚àß-preserving i = W=>X i .‚àß-preserving
  lambda-Œ† W=>X .‚ä§-preserving i = W=>X i .‚ä§-preserving

------------------------------------------------------------------------------
module _ where
  open MeetSemilattice
  open _=>_
  open preorder._=>_

  ùüô : MeetSemilattice preorder.ùüô
  ùüô ._‚àß_ tt tt = tt
  ùüô .‚ä§ = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÅ = tt
  ùüô .‚àß-isMeet .IsMeet.œÄ‚ÇÇ = tt
  ùüô .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© tt tt = tt
  ùüô .‚ä§-isTop .IsTop.‚â§-top = tt

  terminal : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => ùüô
  terminal .func .fun _ = tt
  terminal .func .mono _ = tt
  terminal .‚àß-preserving = tt
  terminal .‚ä§-preserving = tt

  open _‚âÉm_
  open preorder._‚âÉm_

  terminal-unique : ‚àÄ {A}(X : MeetSemilattice A) ‚Üí (f g : X => ùüô) ‚Üí f ‚âÉm g
  terminal-unique X f g .eqfunc .eqfun x = tt , tt

------------------------------------------------------------------------------
-- Biproducts
module _ where
  open Preorder
  open MeetSemilattice
  open _=>_
  open preorder._=>_
  open _‚âÉm_
  open preorder._‚âÉm_

  _‚äï_ : ‚àÄ {A B} ‚Üí MeetSemilattice A ‚Üí MeetSemilattice B ‚Üí MeetSemilattice (A √ó B)
  (X ‚äï Y) ._‚àß_ (x‚ÇÅ , y‚ÇÅ) (x‚ÇÇ , y‚ÇÇ) = (X ._‚àß_ x‚ÇÅ x‚ÇÇ) , (Y ._‚àß_ y‚ÇÅ y‚ÇÇ)
  (X ‚äï Y) .‚ä§ = (X .‚ä§) , (Y .‚ä§)
  (X ‚äï Y) .‚àß-isMeet .IsMeet.œÄ‚ÇÅ = X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ , Y .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  (X ‚äï Y) .‚àß-isMeet .IsMeet.œÄ‚ÇÇ = X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ , Y .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  (X ‚äï Y) .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© (x‚ÇÅ‚â§y‚ÇÅ , x‚ÇÇ‚â§y‚ÇÇ) (x‚ÇÅ‚â§z‚ÇÅ , x‚ÇÇ‚â§z‚ÇÇ) =
    X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚ÇÅ‚â§y‚ÇÅ x‚ÇÅ‚â§z‚ÇÅ , Y .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚ÇÇ‚â§y‚ÇÇ x‚ÇÇ‚â§z‚ÇÇ
  (X ‚äï Y) .‚ä§-isTop .IsTop.‚â§-top = X .‚ä§-isTop .IsTop.‚â§-top , Y .‚ä§-isTop .IsTop.‚â§-top

  project‚ÇÅ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí (X ‚äï Y) => X
  project‚ÇÅ .func .fun = proj‚ÇÅ
  project‚ÇÅ .func .mono = proj‚ÇÅ
  project‚ÇÅ {A = A} .‚àß-preserving = A .‚â§-refl
  project‚ÇÅ {A = A} .‚ä§-preserving = A .‚â§-refl

  project‚ÇÇ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí (X ‚äï Y) => Y
  project‚ÇÇ .func .fun = proj‚ÇÇ
  project‚ÇÇ .func .mono = proj‚ÇÇ
  project‚ÇÇ {B = B} .‚àß-preserving = B .‚â§-refl
  project‚ÇÇ {B = B} .‚ä§-preserving = B .‚â§-refl

  ‚ü®_,_‚ü© : ‚àÄ {A B C} {W : MeetSemilattice A} {X : MeetSemilattice B} {Y : MeetSemilattice C} ‚Üí
          W => X ‚Üí W => Y ‚Üí W => (X ‚äï Y)
  ‚ü®_,_‚ü© f g .func .fun w = f .func .fun w , g .func .fun w
  ‚ü®_,_‚ü© f g .func .mono w‚ÇÅ‚â§w‚ÇÇ = (f .func .mono w‚ÇÅ‚â§w‚ÇÇ) , (g .func .mono w‚ÇÅ‚â§w‚ÇÇ)
  ‚ü®_,_‚ü© f g .‚àß-preserving = (f .‚àß-preserving) , (g .‚àß-preserving)
  ‚ü®_,_‚ü© f g .‚ä§-preserving = (f .‚ä§-preserving) , (g .‚ä§-preserving)

  ‚ü®‚ü©-cong : ‚àÄ {A B C}{W : MeetSemilattice A} {X : MeetSemilattice B} {Y : MeetSemilattice C} ‚Üí
           {f‚ÇÅ f‚ÇÇ : W => X} {g‚ÇÅ g‚ÇÇ : W => Y} ‚Üí
           f‚ÇÅ ‚âÉm f‚ÇÇ ‚Üí g‚ÇÅ ‚âÉm g‚ÇÇ ‚Üí ‚ü® f‚ÇÅ , g‚ÇÅ ‚ü© ‚âÉm ‚ü® f‚ÇÇ , g‚ÇÇ ‚ü©
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ .proj‚ÇÅ = f‚ÇÅ‚âàf‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ .proj‚ÇÇ = g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÅ
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ .proj‚ÇÅ = f‚ÇÅ‚âàf‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ
  ‚ü®‚ü©-cong f‚ÇÅ‚âàf‚ÇÇ g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ .proj‚ÇÇ = g‚ÇÅ‚âàg‚ÇÇ .eqfunc .eqfun x .proj‚ÇÇ

  pair-p‚ÇÅ : ‚àÄ {A B C}{X : MeetSemilattice A} {Y : MeetSemilattice B} {Z : MeetSemilattice C}
            (f : X => Y) (g : X => Z) ‚Üí
            (project‚ÇÅ ‚àò ‚ü® f , g ‚ü©) ‚âÉm f
  pair-p‚ÇÅ {B = B} f g .eqfunc .eqfun x = B .‚âÉ-refl

  pair-p‚ÇÇ : ‚àÄ {A B C}{X : MeetSemilattice A} {Y : MeetSemilattice B} {Z : MeetSemilattice C}
            (f : X => Y) (g : X => Z) ‚Üí
            (project‚ÇÇ ‚àò ‚ü® f , g ‚ü©) ‚âÉm g
  pair-p‚ÇÇ {C = C} f g .eqfunc .eqfun x = C .‚âÉ-refl

  pair-ext : ‚àÄ {A B C}{X : MeetSemilattice A} {Y : MeetSemilattice B} {Z : MeetSemilattice C}
             (f : X => (Y ‚äï Z)) ‚Üí
             ‚ü® project‚ÇÅ ‚àò f , project‚ÇÇ ‚àò f ‚ü© ‚âÉm f
  pair-ext {B = B} {C = C} f .eqfunc .eqfun x = (B √ó C) .‚âÉ-refl

  inject‚ÇÅ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí X => (X ‚äï Y)
  inject‚ÇÅ {Y = Y} .func .fun x = x , Y .‚ä§
  inject‚ÇÅ {B = B} .func .mono x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ , B .‚â§-refl
  inject‚ÇÅ {A = A} .‚àß-preserving .proj‚ÇÅ = A .‚â§-refl
  inject‚ÇÅ {Y = Y} .‚àß-preserving .proj‚ÇÇ = Y .‚ä§-isTop .IsTop.‚â§-top
  inject‚ÇÅ {A = A}{B = B} .‚ä§-preserving = A .‚â§-refl , B .‚â§-refl

  inject‚ÇÇ : ‚àÄ {A B} {X : MeetSemilattice A} {Y : MeetSemilattice B} ‚Üí Y => (X ‚äï Y)
  inject‚ÇÇ {X = X} .func .fun y = X .‚ä§ , y
  inject‚ÇÇ {A = A} .func .mono y‚ÇÅ‚â§y‚ÇÇ = A .‚â§-refl , y‚ÇÅ‚â§y‚ÇÇ
  inject‚ÇÇ {X = X} .‚àß-preserving .proj‚ÇÅ = X .‚ä§-isTop .IsTop.‚â§-top
  inject‚ÇÇ {B = B} .‚àß-preserving .proj‚ÇÇ = B .‚â§-refl
  inject‚ÇÇ {A = A}{B = B} .‚ä§-preserving = A .‚â§-refl , B .‚â§-refl

  [_,_] : ‚àÄ {A B C}{X : MeetSemilattice A}{Y : MeetSemilattice B}{Z : MeetSemilattice C} ‚Üí
          X => Z ‚Üí Y => Z ‚Üí (X ‚äï Y) => Z
  [_,_] {Z = Z} f g .func .fun (x , y) = Z ._‚àß_ (f .func .fun x) (g .func .fun y)
  [_,_] {Z = Z} f g .func .mono (x‚ÇÅ‚â§x‚ÇÇ , y‚ÇÅ‚â§y‚ÇÇ) =
    ‚àß-mono Z (f .func .mono x‚ÇÅ‚â§x‚ÇÇ) (g .func .mono y‚ÇÅ‚â§y‚ÇÇ)
  [_,_] {C = C}{Z = Z} f g .‚àß-preserving {x , y} {x' , y'} =
    C .‚â§-trans (Z.interchange Z.‚àß-comm .proj‚ÇÅ)
               (Z.‚àß-mono (f .‚àß-preserving) (g .‚àß-preserving))
      where module Z = MeetSemilattice Z
  [_,_] {Z = Z} f g .‚ä§-preserving = ‚ü® (f .‚ä§-preserving) , (g .‚ä§-preserving) ‚ü©Z
    where open IsMeet (Z .‚àß-isMeet) renaming (‚ü®_,_‚ü© to ‚ü®_,_‚ü©Z)

------------------------------------------------------------------------------
-- Lifting
module _ where
  open preorder using (LCarrier; <_>; bottom)
  open MeetSemilattice
  open _=>_
  open preorder._=>_

  L : ‚àÄ {A} ‚Üí MeetSemilattice A ‚Üí MeetSemilattice (preorder.L A)
  L X ._‚àß_ bottom _ = bottom
  L X ._‚àß_ < x > bottom = bottom
  L X ._‚àß_ < x > < y > = < X ._‚àß_ x y >
  L X .‚ä§ = < X .‚ä§ >
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {bottom} {y} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {< x >} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ {< x >} {< x‚ÇÅ >} = X .‚àß-isMeet .IsMeet.œÄ‚ÇÅ
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {bottom} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {bottom} {< x >} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {< x >} {bottom} = tt
  L X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ {< x >} {< x‚ÇÅ >} = X .‚àß-isMeet .IsMeet.œÄ‚ÇÇ
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {bottom} {z} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {< y >}  {bottom} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {bottom} {< y >}  {< z >} x‚â§y x‚â§z = tt
  L X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© {< x >}  {< y >}  {< z >} x‚â§y x‚â§z =
    X .‚àß-isMeet .IsMeet.‚ü®_,_‚ü© x‚â§y x‚â§z
  L X .‚ä§-isTop .IsTop.‚â§-top {bottom} = tt
  L X .‚ä§-isTop .IsTop.‚â§-top {< x >} = X .‚ä§-isTop .IsTop.‚â§-top

  L-unit : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí X => L X
  L-unit .func .fun x = < x >
  L-unit .func .mono x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ
  L-unit {A} .‚àß-preserving = A .‚â§-refl
  L-unit {A} .‚ä§-preserving = A .‚â§-refl

  L-join : ‚àÄ {A}{X : MeetSemilattice A} ‚Üí L (L X) => L X
  L-join .func .fun bottom = bottom
  L-join .func .fun < bottom > = bottom
  L-join .func .fun < < x > > = < x >
  L-join .func .mono {bottom}     {bottom}     x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .func .mono {bottom}     {< bottom >} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .func .mono {bottom}     {< < x > >}  x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .func .mono {< bottom >} {< bottom >} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .func .mono {< bottom >} {< < x > >}  x‚ÇÅ‚â§x‚ÇÇ = tt
  L-join .func .mono {< < x > >}  {< < y > >}  x‚ÇÅ‚â§x‚ÇÇ = x‚ÇÅ‚â§x‚ÇÇ
  L-join .‚àß-preserving {bottom} {bottom} = tt
  L-join .‚àß-preserving {bottom} {< x >} = tt
  L-join .‚àß-preserving {< bottom >} {bottom} = tt
  L-join .‚àß-preserving {< < x > >} {bottom} = tt
  L-join .‚àß-preserving {< bottom >} {< x‚ÇÅ >} = tt
  L-join .‚àß-preserving {< < x > >} {< bottom >} = tt
  L-join {A} .‚àß-preserving {< < x > >} {< < x‚ÇÅ > >} = A .‚â§-refl
  L-join {A} .‚ä§-preserving = A .‚â§-refl

  L-map : ‚àÄ {A B}{X : MeetSemilattice A}{Y : MeetSemilattice B} ‚Üí X => Y ‚Üí L X => L Y
  L-map f .func .fun bottom = bottom
  L-map f .func .fun < x > = < f .func .fun x >
  L-map f .func .mono {bottom} {bottom} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-map f .func .mono {bottom} {< x‚ÇÇ >} x‚ÇÅ‚â§x‚ÇÇ = tt
  L-map f .func .mono {< x‚ÇÅ >} {< x‚ÇÇ >} x‚ÇÅ‚â§x‚ÇÇ = f .func .mono x‚ÇÅ‚â§x‚ÇÇ
  L-map f .‚àß-preserving {bottom} {x'} = tt
  L-map f .‚àß-preserving {< x >} {bottom} = tt
  L-map f .‚àß-preserving {< x >} {< x‚ÇÅ >} = f .‚àß-preserving
  L-map f .‚ä§-preserving = f .‚ä§-preserving

  L-strength : ‚àÄ {A B}{X : MeetSemilattice A}{Y : MeetSemilattice B} ‚Üí
               (X ‚äï L Y) => L (X ‚äï Y)
  L-strength .func .fun (x , bottom) = bottom
  L-strength .func .fun (x , < y >) = < x , y >
  L-strength .func .mono {x‚ÇÅ , bottom} {x‚ÇÇ , bottom} (x‚ÇÅ‚â§x‚ÇÇ , tt) = tt
  L-strength .func .mono {x‚ÇÅ , bottom} {x‚ÇÇ , < y >}  (x‚ÇÅ‚â§x‚ÇÇ , tt) = tt
  L-strength .func .mono {x‚ÇÅ , < y‚ÇÅ >} {x‚ÇÇ , < y‚ÇÇ >} (x‚ÇÅ‚â§x‚ÇÇ , y‚ÇÅ‚â§y‚ÇÇ) = x‚ÇÅ‚â§x‚ÇÇ , y‚ÇÅ‚â§y‚ÇÇ
  L-strength .‚àß-preserving {x , bottom} {x' , y'} = tt
  L-strength .‚àß-preserving {x , < x‚ÇÅ >} {x' , bottom} = tt
  L-strength {A}{B} .‚àß-preserving {x , < x‚ÇÅ >} {x' , < x‚ÇÇ >} = A .‚â§-refl , B .‚â§-refl
  L-strength {A}{B} .‚ä§-preserving = A .‚â§-refl , B .‚â§-refl
