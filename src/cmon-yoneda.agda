{-# OPTIONS --prop --postfix-projections --safe #-}

open import Level
open import prop
open import categories
open import functor
open import commutative-monoid
open import cmon-enriched
open import commutative-monoid-cat using (_‚áí_) renaming (cat to CMon; Obj to CMonObj)

module cmon-yoneda {o m e} os es (ùíû : Category o m e) (CMùíû : CMonEnriched ùíû) where

import yoneda os es ùíû as yoneda

PSh = [ opposite ùíû ‚áí CMon (m ‚äî os) (e ‚äî es) ]

private
  module ùíû = Category ùíû
open _‚áí_
open _=[_]>_
open CommutativeMonoid
open CMonObj
open Functor
open NatTrans
open ‚âÉ-NatTrans

open CMonEnriched CMùíû

„Çà‚ÇÄ : ùíû.obj ‚Üí PSh .Category.obj
„Çà‚ÇÄ x .fobj y .carrier = yoneda.„Çà‚ÇÄ x .fobj y
„Çà‚ÇÄ x .fobj y .commMonoid .Œµ = lift Œµm
„Çà‚ÇÄ x .fobj y .commMonoid ._+_ (lift f) (lift g) = lift (f +m g)
„Çà‚ÇÄ x .fobj y .commMonoid .+-cong (lift e‚ÇÅ) (lift e‚ÇÇ) = lift (homCM _ _ .+-cong e‚ÇÅ e‚ÇÇ)
„Çà‚ÇÄ x .fobj y .commMonoid .+-lunit = lift (homCM _ _ .+-lunit)
„Çà‚ÇÄ x .fobj y .commMonoid .+-assoc = lift (homCM _ _ .+-assoc)
„Çà‚ÇÄ x .fobj y .commMonoid .+-comm = lift (homCM _ _ .+-comm)
„Çà‚ÇÄ x .fmor f .function = yoneda.„Çà‚ÇÄ x .fmor f
„Çà‚ÇÄ x .fmor f .cmFunc .preserve-Œµ = lift (comp-bilinear-Œµ‚ÇÅ _)
„Çà‚ÇÄ x .fmor f .cmFunc .preserve-+ = lift (comp-bilinear‚ÇÅ _ _ _)
„Çà‚ÇÄ x .fmor-cong = yoneda.„Çà‚ÇÄ x .fmor-cong
„Çà‚ÇÄ x .fmor-id = yoneda.„Çà‚ÇÄ x .fmor-id
„Çà‚ÇÄ x .fmor-comp = yoneda.„Çà‚ÇÄ x .fmor-comp

„Çà : Functor ùíû PSh
„Çà .fobj = „Çà‚ÇÄ
„Çà .fmor f .transf y .function = yoneda.„Çà .fmor f .transf y
„Çà .fmor f .transf y .cmFunc .preserve-Œµ = lift (comp-bilinear-Œµ‚ÇÇ _)
„Çà .fmor f .transf y .cmFunc .preserve-+ = lift (comp-bilinear‚ÇÇ _ _ _)
„Çà .fmor f .natural = yoneda.„Çà .fmor f .natural
„Çà .fmor-cong f‚ÇÅ‚âàf‚ÇÇ .transf-eq = yoneda.„Çà .fmor-cong f‚ÇÅ‚âàf‚ÇÇ .transf-eq
„Çà .fmor-id .transf-eq = yoneda.„Çà .fmor-id .transf-eq
„Çà .fmor-comp f g .transf-eq = yoneda.„Çà .fmor-comp _ _ .transf-eq

-- TODO: Yoneda lemma

-- TODO: „Çà preserves limits
