{-# OPTIONS --prop --postfix-projections --safe #-}

module example where

open import Level using (0‚Ñì)
open import Data.List using (List; []; _‚à∑_)
open import Data.Product using (_,_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import prop
open import language-syntax
import nat
import label
import prop-setoid

------------------------------------------------------------------------------
-- Step 1: Make a language

data sort : Set where
  number label : sort

data op : List sort ‚Üí sort ‚Üí Set where
  zero : op [] number
  add  : op (number ‚à∑ number ‚à∑ []) number
  lbl  : label.label ‚Üí op [] label

data rel : List sort ‚Üí Set where
  equal-label : rel (label ‚à∑ label ‚à∑ [])

Sig : Signature 0‚Ñì
Sig .Signature.sort = sort
Sig .Signature.op = op
Sig .Signature.rel = rel

module L = language Sig

-- FIXME: example query. Given `List (label [√ó] nat)`, add up all the
-- elements labelled with a specific label:
--
--   sum [ snd e | e <- xs, equal-label 'a' (fst e) ]
--
--   sum (concatMap x (e. if equal-label 'a' (fst e) then return (snd e) else nil))
--
--   sum = fold zero (add (var zero) (var (succ zero)))

------------------------------------------------------------------------------
-- Step 2: Make a category for interpretation

import galois
import categories
open import grothendieck

module D = CategoryOfFamilies {os = 0‚Ñì} {es = 0‚Ñì} galois.cat
module DP = D.products galois.products

DB = categories.coproducts‚Üíbooleans
       (D.terminal galois.terminal)
       (D.products.strongCoproducts galois.products)

open import language-interpretation D.cat
              (D.terminal galois.terminal)
              (DP.products)
              (DB)
              (D.lists galois.terminal galois.products)

module _ where

  open D.Mor
  open import fam
  open import categories
  open prop-setoid using (‚äó-setoid; +-setoid; ùüô)
    renaming (_‚áí_ to _‚áís_)

  -- FIXME: use Strings for labels

  binary : ‚àÄ X G ‚Üí D.Mor (D.simple[ X , G ] DP.‚äó (D.simple[ X , G ] DP.‚äó D.simple[ prop-setoid.ùüô {0‚Ñì} {0‚Ñì} , galois.ùüô ])) D.simple[ prop-setoid.‚äó-setoid X X , G galois.‚äó G ]
  binary X G .idxf .prop-setoid._‚áí_.func (x , y , _) = x , y
  binary X G .idxf .prop-setoid._‚áí_.func-resp-‚âà (e‚ÇÅ , e‚ÇÇ , _) = e‚ÇÅ , e‚ÇÇ
  binary X G .famf ._‚áíf_.transf x = pair p‚ÇÅ (p‚ÇÅ ‚àò p‚ÇÇ)
    where open HasProducts galois.products
          open Category galois.cat
  binary X G .famf ._‚áíf_.natural (e‚ÇÅ , e‚ÇÇ , _) = {!!}
    where open HasProducts galois.products
          open Category galois.cat

--  halp :

  predicate : ‚àÄ {X G} ‚Üí (X ‚áís +-setoid (ùüô {0‚Ñì} {0‚Ñì}) (ùüô {0‚Ñì} {0‚Ñì})) ‚Üí
              D.Mor D.simple[ X , G ]
                    (DB .HasBooleans.Bool)
  predicate f .idxf = f
  predicate f .famf ._‚áíf_.transf x = {!!}
  predicate f .famf ._‚áíf_.natural = {!!}


  BaseInterp : SignatureInterp Sig
  BaseInterp .SignatureInterp.‚ü¶sort‚üß number = D.simple[ nat.‚Ñï‚Çõ , galois.Presence ]
  BaseInterp .SignatureInterp.‚ü¶sort‚üß label = D.simple[ label.Label , galois.Presence ]
  BaseInterp .SignatureInterp.‚ü¶op‚üß zero = D.simplef[ nat.zero-m , galois.present ]
  BaseInterp .SignatureInterp.‚ü¶op‚üß add = D.Mor-‚àò D.simplef[ nat.add , galois.combinePresence ] (binary _ _)
  BaseInterp .SignatureInterp.‚ü¶op‚üß (lbl l) = D.simplef[ prop-setoid.const label.Label l , galois.present ]
  BaseInterp .SignatureInterp.‚ü¶rel‚üß equal-label = D.Mor-‚àò (predicate label.equal-label) (binary label.Label galois.Presence)

open interp Sig BaseInterp

interp : ‚àÄ {Œì œÑ} ‚Üí Œì L.‚ä¢ œÑ ‚Üí D.Mor ‚ü¶ Œì ‚üßctxt ‚ü¶ œÑ ‚üßty
interp = ‚ü¶_‚üßtm
