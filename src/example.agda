{-# OPTIONS --prop --postfix-projections --safe #-}

module example where

open import Level using (0‚Ñì)
open import Data.List using (List; []; _‚à∑_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import language-syntax
import nat
import label
import prop-setoid

------------------------------------------------------------------------------
-- Step 1: Make a language

data sort : Set where
  number label : sort

data op : List sort ‚Üí sort ‚Üí Set where
  zero : op [] number
  add  : op (number ‚à∑ number ‚à∑ []) number
  lbl  : label.label ‚Üí op [] label

data rel : List sort ‚Üí Set where
  equal-label : rel (label ‚à∑ label ‚à∑ [])

Sig : Signature 0‚Ñì
Sig .Signature.sort = sort
Sig .Signature.op = op
Sig .Signature.rel = rel

module L = language Sig

-- example query. Given `List (label [√ó] nat)`, add up all the
-- elements labelled with a specific label:
--
--   sum [ snd e | e <- xs, equal-label 'a' (fst e) ]
--
--   sum (concatMap x (e. if equal-label 'a' (fst e) then return (snd e) else nil))
--
--   sum = fold zero (add (var zero) (var (succ zero)))

module ex where
  open L

  sum : ‚àÄ {Œì} ‚Üí Œì ‚ä¢ list (base number) ‚Üí Œì ‚ä¢ base number
  sum = fold (bop zero []) (bop add (var zero ‚à∑ var (succ zero) ‚à∑ []))

  `_ : ‚àÄ {Œì} ‚Üí label.label ‚Üí Œì ‚ä¢ base label
  ` l = bop (lbl l) []

  _‚âü_ : ‚àÄ {Œì} ‚Üí Œì ‚ä¢ base label ‚Üí Œì ‚ä¢ base label ‚Üí Œì ‚ä¢ bool
  M ‚âü N = brel equal-label (M ‚à∑ N ‚à∑ [])

  query : label.label ‚Üí emp , list (base label [√ó] base number) ‚ä¢ base number
  query l = sum (from var zero collect
                 when fst (var zero) ‚âü (` l) Ôºõ
                 return (snd (var zero)))

------------------------------------------------------------------------------
-- Step 2: Make a category for interpretation

import galois
import categories
import grothendieck

module D = grothendieck.CategoryOfFamilies 0‚Ñì galois.cat
module DP = D.products galois.products

DB = categories.coproducts‚Üíbooleans
       (D.terminal galois.terminal)
       (D.products.strongCoproducts galois.products)

open import language-interpretation D.cat
              (D.terminal galois.terminal)
              (DP.products)
              (DB)
              (D.lists galois.terminal galois.products)

module _ where

  open D.Mor
  open import fam
  open import categories
  open import Data.Product using (_,_)
  open import prop
  open prop-setoid using (‚äó-setoid; +-setoid; ùüô; module ‚âà-Reasoning)
    renaming (_‚áí_ to _‚áís_)

  -- FIXME: use Strings for labels

  binary : ‚àÄ {X G} ‚Üí
            D.Mor (D.simple[ X , G ] DP.‚äó (D.simple[ X , G ] DP.‚äó D.simple[ ùüô {0‚Ñì} {0‚Ñì} , galois.ùüô ]))
                  D.simple[ ‚äó-setoid X X , G galois.‚äó G ]
  binary = D.Mor-‚àò DP.simple-monoidal (pair p‚ÇÅ (D.Mor-‚àò p‚ÇÅ p‚ÇÇ))
    where open HasProducts DP.products

  module _ where
    open galois hiding (ùüô)
    open prop-setoid using (IsEquivalence)
    open IsEquivalence

    halp : ‚àÄ {G} x ‚Üí G ‚áíg DB .HasBooleans.Bool .D.Obj.fam .Fam.fm x
    halp (inj‚ÇÅ _) = to-ùüô _
    halp (inj‚ÇÇ _) = to-ùüô _

    halp-natural : ‚àÄ {G x‚ÇÅ x‚ÇÇ}
                   (e : +-setoid (ùüô {0‚Ñì} {0‚Ñì}) (ùüô {0‚Ñì} {0‚Ñì}) .prop-setoid.Setoid._‚âà_ x‚ÇÅ x‚ÇÇ) ‚Üí
                   halp {G} x‚ÇÇ ‚âÉg (DB .HasBooleans.Bool .D.Obj.fam .Fam.subst {x‚ÇÅ} {x‚ÇÇ} e ‚àòg halp {G} x‚ÇÅ)
    halp-natural {G} {inj‚ÇÅ x} {inj‚ÇÅ x‚ÇÅ} e = galois.terminal .HasTerminal.terminal-unique _ _ _
    halp-natural {G} {inj‚ÇÇ y} {inj‚ÇÇ y‚ÇÅ} e = galois.terminal .HasTerminal.terminal-unique _ _ _

    predicate : ‚àÄ {X G} ‚Üí (X ‚áís +-setoid (ùüô {0‚Ñì} {0‚Ñì}) (ùüô {0‚Ñì} {0‚Ñì})) ‚Üí
                D.Mor D.simple[ X , G ] (DB .HasBooleans.Bool)
    predicate f .idxf = f
    predicate f .famf ._‚áíf_.transf x = halp (f ._‚áís_.func x)
    predicate f .famf ._‚áíf_.natural {x‚ÇÅ} {x‚ÇÇ} e =
      ‚âÉg-isEquivalence .trans (cat .Category.id-right)
                              (halp-natural {x‚ÇÅ = f ._‚áís_.func x‚ÇÅ} {x‚ÇÇ = f ._‚áís_.func x‚ÇÇ} (f ._‚áís_.func-resp-‚âà e))

  BaseInterp : SignatureInterp Sig
  BaseInterp .SignatureInterp.‚ü¶sort‚üß number = D.simple[ nat.‚Ñï‚Çõ , galois.Presence ]
  BaseInterp .SignatureInterp.‚ü¶sort‚üß label = D.simple[ label.Label , galois.Presence ]
  BaseInterp .SignatureInterp.‚ü¶op‚üß zero = D.simplef[ nat.zero-m , galois.present ]
  BaseInterp .SignatureInterp.‚ü¶op‚üß add = D.Mor-‚àò D.simplef[ nat.add , galois.combinePresence ] binary
  BaseInterp .SignatureInterp.‚ü¶op‚üß (lbl l) = D.simplef[ prop-setoid.const label.Label l , galois.present ]
  BaseInterp .SignatureInterp.‚ü¶rel‚üß equal-label = D.Mor-‚àò (predicate label.equal-label) binary

open interp Sig BaseInterp

open galois
open import fam
open _‚áíf_
open D.Mor
open import Data.Product using (_,_; _√ó_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Unit using (tt)
open import join-semilattice

input : List (label.label √ó nat.‚Ñï)
input = (label.a , nat.zero) ‚à∑
        (label.b , nat.succ nat.zero) ‚à∑
        (label.a , nat.succ nat.zero) ‚à∑
        []

back-slice : label.label ‚Üí _
back-slice l = ‚ü¶ ex.query l ‚üßtm .famf .transf (_ , input) ._‚áíg_.bwd  ._=>_.func pr .proj‚ÇÇ

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

-- Querying for the 'a' label uses the 1st and 3rd numbers
test1 : back-slice label.a ‚â° ((ab , pr) , (ab , ab) , (ab , pr) , tt)
test1 = refl

-- Querying for the 'b' label uses the 2nd number
test2 : back-slice label.b ‚â° ((ab , ab) , (ab , pr) , (ab , ab) , tt)
test2 = refl
