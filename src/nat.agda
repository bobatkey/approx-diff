{-# OPTIONS --prop --postfix-projections --safe #-}

module nat where

open import Level using (0‚Ñì)
open import Data.Product using (_,_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import prop
open import basics
open import prop-setoid using (module ‚âà-Reasoning; Setoid; ‚äó-setoid; ùüô)
  renaming (_‚áí_ to _‚áís_)

------------------------------------------------------------------------------
-- Reuse the builtin definitions so we get fast implementations

open import Agda.Builtin.Nat
  renaming (Nat to ‚Ñï; suc to succ)
  using (_+_; _*_; zero)
  public

------------------------------------------------------------------------------
data _‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Prop where
  0‚â§n : ‚àÄ {n} ‚Üí zero ‚â§ n
  s‚â§s : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí succ m ‚â§ succ n

infix 4 _‚â§_

succ-increasing : ‚àÄ {x} ‚Üí x ‚â§ succ x
succ-increasing {zero}   = 0‚â§n
succ-increasing {succ x} = s‚â§s succ-increasing

‚â§-refl : ‚àÄ {x} ‚Üí x ‚â§ x
‚â§-refl {zero}   = 0‚â§n
‚â§-refl {succ x} = s‚â§s ‚â§-refl

‚â§-trans : ‚àÄ {x y z} ‚Üí x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z
‚â§-trans 0‚â§n       y‚â§z       = 0‚â§n
‚â§-trans (s‚â§s x‚â§y) (s‚â§s y‚â§z) = s‚â§s (‚â§-trans x‚â§y y‚â§z)

‚â§-total : ‚àÄ x y ‚Üí (x ‚â§ y) ‚à® (y ‚â§ x)
‚â§-total zero y = inj‚ÇÅ 0‚â§n
‚â§-total (succ x) zero = inj‚ÇÇ 0‚â§n
‚â§-total (succ x) (succ y) with ‚â§-total x y
... | inj‚ÇÅ x‚â§y = inj‚ÇÅ (s‚â§s x‚â§y)
... | inj‚ÇÇ y‚â§x = inj‚ÇÇ (s‚â§s y‚â§x)

‚â§-isPreorder : IsPreorder _‚â§_
‚â§-isPreorder .IsPreorder.refl = ‚â§-refl
‚â§-isPreorder .IsPreorder.trans = ‚â§-trans

open IsPreorder ‚â§-isPreorder
  using (_‚âÉ_; ‚âÉ-refl; ‚âÉ-sym; ‚âÉ-trans)
  renaming (isEquivalence to ‚âÉ-isEquivalence)
  public

------------------------------------------------------------------------------
-- Equality and setoids

‚âÉ-zero : zero ‚âÉ zero
‚âÉ-zero .proj‚ÇÅ = 0‚â§n
‚âÉ-zero .proj‚ÇÇ = 0‚â§n

succ-cong : ‚àÄ {x y} ‚Üí x ‚âÉ y ‚Üí succ x ‚âÉ succ y
succ-cong p .proj‚ÇÅ = s‚â§s (proj‚ÇÅ p)
succ-cong p .proj‚ÇÇ = s‚â§s (proj‚ÇÇ p)

‚Ñï‚Çõ : Setoid 0‚Ñì 0‚Ñì
‚Ñï‚Çõ .Setoid.Carrier = ‚Ñï
‚Ñï‚Çõ .Setoid._‚âà_ = _‚âÉ_
‚Ñï‚Çõ .Setoid.isEquivalence = ‚âÉ-isEquivalence

------------------------------------------------------------------------------
-- Strictly less than

data _<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  n<s : ‚àÄ {x}   ‚Üí x < succ x
  <s : ‚àÄ {x y} ‚Üí x < y ‚Üí x < succ y

s<s : ‚àÄ {x y} ‚Üí x < y ‚Üí succ x < succ y
s<s n<s      = n<s
s<s (<s x<y) = <s (s<s x<y)

-- <-trans : ‚àÄ {m n o} ‚Üí m < n ‚Üí n < o ‚Üí m < o
-- <-trans 0<s       (s<s n<o) = 0<s
-- <-trans (s<s m<n) (s<s n<o) = s<s (<-trans m<n n<o)

------------------------------------------------------------------------------
-- Joins and Meets

_‚äî_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero   ‚äî y      = y
succ x ‚äî zero   = succ x
succ x ‚äî succ y = succ (x ‚äî y)

upper‚ÇÅ : ‚àÄ {x y} ‚Üí x ‚â§ (x ‚äî y)
upper‚ÇÅ {zero}   {y}      = 0‚â§n
upper‚ÇÅ {succ x} {zero}   = ‚â§-refl
upper‚ÇÅ {succ x} {succ y} = s‚â§s upper‚ÇÅ

upper‚ÇÇ : ‚àÄ {x y} ‚Üí y ‚â§ (x ‚äî y)
upper‚ÇÇ {zero}   {zero}   = 0‚â§n
upper‚ÇÇ {zero}   {succ y} = ‚â§-refl
upper‚ÇÇ {succ x} {zero}   = 0‚â§n
upper‚ÇÇ {succ x} {succ y} = s‚â§s upper‚ÇÇ

‚äî-least : ‚àÄ {x y z} ‚Üí x ‚â§ z ‚Üí y ‚â§ z ‚Üí (x ‚äî y) ‚â§ z
‚äî-least 0‚â§n       y‚â§z       = y‚â§z
‚äî-least (s‚â§s x‚â§z) 0‚â§n       = s‚â§s x‚â§z
‚äî-least (s‚â§s x‚â§z) (s‚â§s y‚â§z) = s‚â§s (‚äî-least x‚â§z y‚â§z)

-- FIXME: also have _‚äé_ version of this
‚äî-split : ‚àÄ {x y z} ‚Üí z ‚â§ (x ‚äî y) ‚Üí (z ‚â§ x) ‚à® (z ‚â§ y)
‚äî-split {x} {y} {zero} z‚â§x‚äîy = inj‚ÇÅ 0‚â§n
‚äî-split {zero} {y} {succ z} z‚â§x‚äîy = inj‚ÇÇ z‚â§x‚äîy
‚äî-split {succ x} {zero} {succ z} z‚â§x‚äîy = inj‚ÇÅ z‚â§x‚äîy
‚äî-split {succ x} {succ y} {succ z} (s‚â§s z‚â§x‚äîy) with ‚äî-split {x} {y} {z} z‚â§x‚äîy
... | inj‚ÇÅ x‚ÇÅ = inj‚ÇÅ (s‚â§s x‚ÇÅ)
... | inj‚ÇÇ x‚ÇÅ = inj‚ÇÇ (s‚â§s x‚ÇÅ)

‚äî-chooses : ‚àÄ x y ‚Üí (x ‚äî y ‚â§ x) ‚à® (x ‚äî y ‚â§ y)
‚äî-chooses zero y = inj‚ÇÇ ‚â§-refl
‚äî-chooses (succ x) zero = inj‚ÇÅ ‚â§-refl
‚äî-chooses (succ x) (succ y) with ‚äî-chooses x y
... | inj‚ÇÅ p = inj‚ÇÅ (s‚â§s p)
... | inj‚ÇÇ p = inj‚ÇÇ (s‚â§s p)

_‚äì_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero   ‚äì y      = zero
succ x ‚äì zero   = zero
succ x ‚äì succ y = succ (x ‚äì y)

‚äì-greatest : ‚àÄ {x y z} ‚Üí z ‚â§ x ‚Üí z ‚â§ y ‚Üí z ‚â§ (x ‚äì y)
‚äì-greatest 0‚â§n z‚â§y = 0‚â§n
‚äì-greatest (s‚â§s z‚â§x) (s‚â§s z‚â§y) = s‚â§s (‚äì-greatest z‚â§x z‚â§y)

lower‚ÇÅ : ‚àÄ {x y} ‚Üí (x ‚äì y) ‚â§ x
lower‚ÇÅ {zero}   {y}      = 0‚â§n
lower‚ÇÅ {succ x} {zero}   = 0‚â§n
lower‚ÇÅ {succ x} {succ y} = s‚â§s lower‚ÇÅ

lower‚ÇÇ : ‚àÄ {x y} ‚Üí (x ‚äì y) ‚â§ y
lower‚ÇÇ {zero}   {y}      = 0‚â§n
lower‚ÇÇ {succ x} {zero}   = 0‚â§n
lower‚ÇÇ {succ x} {succ y} = s‚â§s lower‚ÇÇ

‚äì-isMeet : IsMeet ‚â§-isPreorder _‚äì_
‚äì-isMeet .IsMeet.œÄ‚ÇÅ = lower‚ÇÅ
‚äì-isMeet .IsMeet.œÄ‚ÇÇ = lower‚ÇÇ
‚äì-isMeet .IsMeet.‚ü®_,_‚ü© = ‚äì-greatest

open IsMeet ‚äì-isMeet
  using ()
  renaming (mono to ‚äì-mono; cong to ‚äì-cong; assoc to ‚äì-assoc; idem to ‚äì-idem)

‚äì-chooses : ‚àÄ x y ‚Üí (x ‚â§ x ‚äì y) ‚à® (y ‚â§ x ‚äì y)
‚äì-chooses zero     y    = inj‚ÇÅ 0‚â§n
‚äì-chooses (succ x) zero = inj‚ÇÇ 0‚â§n
‚äì-chooses (succ x) (succ y) with ‚äì-chooses x y
... | inj‚ÇÅ p = inj‚ÇÅ (s‚â§s p)
... | inj‚ÇÇ p = inj‚ÇÇ (s‚â§s p)

-- Distributivity: FIXME: follows from totality and monotonicity

‚äì-‚äî-distrib : ‚àÄ x y z ‚Üí x ‚äì (y ‚äî z) ‚â§ (x ‚äì y) ‚äî (x ‚äì z)
‚äì-‚äî-distrib zero     y        z        = ‚â§-refl
‚äì-‚äî-distrib (succ x) zero     z        = ‚â§-refl
‚äì-‚äî-distrib (succ x) (succ y) zero     = ‚â§-refl
‚äì-‚äî-distrib (succ x) (succ y) (succ z) = s‚â§s (‚äì-‚äî-distrib x y z)

‚äî-‚äì-distrib : ‚àÄ x y z ‚Üí (x ‚äî y) ‚äì (x ‚äî z) ‚â§ x ‚äî (y ‚äì z)
‚äî-‚äì-distrib zero     y        z        = ‚â§-refl
‚äî-‚äì-distrib (succ x) zero     zero     = s‚â§s lower‚ÇÅ
‚äî-‚äì-distrib (succ x) zero     (succ z) = s‚â§s lower‚ÇÅ
‚äî-‚äì-distrib (succ x) (succ y) zero     = s‚â§s lower‚ÇÇ
‚äî-‚äì-distrib (succ x) (succ y) (succ z) = s‚â§s (‚äî-‚äì-distrib x y z)

------------------------------------------------------------------------------
-- Addition

+-increasing : ‚àÄ {x y} ‚Üí y ‚â§ (x + y)
+-increasing {zero} = ‚â§-refl
+-increasing {succ x} = ‚â§-trans succ-increasing (s‚â§s (+-increasing {x}))

+-mono : ‚àÄ {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ} ‚Üí x‚ÇÅ ‚â§ x‚ÇÇ ‚Üí y‚ÇÅ ‚â§ y‚ÇÇ ‚Üí (x‚ÇÅ + y‚ÇÅ) ‚â§ (x‚ÇÇ + y‚ÇÇ)
+-mono 0‚â§n     0‚â§n     = 0‚â§n
+-mono 0‚â§n     (s‚â§s q) = ‚â§-trans (s‚â§s q) +-increasing
+-mono (s‚â§s p) q       = s‚â§s (+-mono p q)

+-lunit : ‚àÄ {x} ‚Üí (zero + x) ‚âÉ x
+-lunit = ‚âÉ-refl

+-runit : ‚àÄ {x} ‚Üí (x + zero) ‚âÉ x
+-runit {zero}   = ‚âÉ-zero
+-runit {succ x} = succ-cong +-runit

+-assoc : ‚àÄ {x y z} ‚Üí ((x + y) + z) ‚âÉ (x + (y + z))
+-assoc {zero}   = ‚âÉ-refl
+-assoc {succ x} = succ-cong (+-assoc {x})

+-isMonoid : IsMonoid ‚â§-isPreorder _+_ zero
+-isMonoid .IsMonoid.mono = +-mono
+-isMonoid .IsMonoid.assoc {x} {y} {z} = +-assoc {x} {y} {z}
+-isMonoid .IsMonoid.lunit = +-lunit
+-isMonoid .IsMonoid.runit = +-runit

open IsMonoid +-isMonoid
  using ()
  renaming (cong to +-cong; interchange to +-interchange)

+-succ : ‚àÄ {x y} ‚Üí (x + succ y) ‚âÉ succ (x + y)
+-succ {zero}   = succ-cong ‚âÉ-refl
+-succ {succ x} = succ-cong +-succ

+-comm : ‚àÄ {x y} ‚Üí (x + y) ‚âÉ (y + x)
+-comm {zero}   = ‚âÉ-sym +-runit
+-comm {succ x} = ‚âÉ-trans (succ-cong (+-comm {x})) (‚âÉ-sym +-succ)

+-cancel‚Çó : ‚àÄ {x y z} ‚Üí (x + y) ‚â§ (x + z) ‚Üí y ‚â§ z
+-cancel‚Çó {zero}   p       = p
+-cancel‚Çó {succ x} (s‚â§s p) = +-cancel‚Çó p

+-cancel·µ£ : ‚àÄ {x y z} ‚Üí (y + x) ‚â§ (z + x) ‚Üí y ‚â§ z
+-cancel·µ£ {x}{y}{z} p =
  +-cancel‚Çó (‚â§-trans (+-comm {x} {y} .proj‚ÇÅ) (‚â§-trans p (+-comm {x} {z} .proj‚ÇÇ)))

-- Follows from totality and increasingness
‚äì‚â§+ : ‚àÄ {x y} ‚Üí x ‚äì y ‚â§ x + y
‚äì‚â§+ {zero}   {y}      = 0‚â§n
‚äì‚â§+ {succ x} {zero}   = 0‚â§n
‚äì‚â§+ {succ x} {succ y} = s‚â§s (‚â§-trans ‚äì‚â§+ (+-mono {x} ‚â§-refl succ-increasing))

-- Distributivity with _‚äî_ and _‚äì_, which follows from monotonicity of
-- _+_ and totality of the order. FIXME: abstract this, so it works
-- for all other distributivity properties.

+-‚äì-distrib‚Çó : ‚àÄ x y z ‚Üí (x + y) ‚äì (x + z) ‚â§ x + (y ‚äì z)
+-‚äì-distrib‚Çó x y z with ‚â§-total y z
... | inj‚ÇÅ p = ‚â§-trans lower‚ÇÅ (+-mono {x} ‚â§-refl (‚äì-greatest ‚â§-refl p))
... | inj‚ÇÇ p = ‚â§-trans lower‚ÇÇ (+-mono {x} ‚â§-refl (‚äì-greatest p ‚â§-refl))

+-‚äì-distrib : ‚àÄ x y z ‚Üí x + (y ‚äì z) ‚â§ (x + y) ‚äì (x + z)
+-‚äì-distrib x y z = ‚äì-greatest (+-mono {x} ‚â§-refl lower‚ÇÅ) (+-mono {x} ‚â§-refl lower‚ÇÇ)

+-‚äî-distrib : ‚àÄ x y z ‚Üí x + (y ‚äî z) ‚â§ (x + y) ‚äî (x + z)
+-‚äî-distrib x y z with ‚â§-total y z
... | inj‚ÇÅ p = ‚â§-trans (+-mono {x} ‚â§-refl (‚äî-least p ‚â§-refl)) upper‚ÇÇ
... | inj‚ÇÇ p = ‚â§-trans (+-mono {x} ‚â§-refl (‚äî-least ‚â§-refl p)) upper‚ÇÅ

------------------------------------------------------------------------------
-- Monus (a residual for + on ‚Ñï^op)
_‚à∏_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
x      ‚à∏ zero   = x
zero   ‚à∏ succ y = zero
succ x ‚à∏ succ y = x ‚à∏ y

eval : ‚àÄ {x y} ‚Üí y ‚â§ (x + (y ‚à∏ x))
eval {zero}   {y}      = ‚â§-refl
eval {succ x} {zero}   = 0‚â§n
eval {succ x} {succ y} = s‚â§s (eval {x} {y})

lambda : ‚àÄ {x y z} ‚Üí x ‚â§ (y + z) ‚Üí (x ‚à∏ y) ‚â§ z
lambda {x}      {zero}   f       = f
lambda {zero}   {succ y} 0‚â§n     = 0‚â§n
lambda {succ x} {succ y} (s‚â§s f) = lambda f

-- Totality means that this is an op-pre-total order
pre-total : ‚àÄ x y ‚Üí (x ‚à∏ y) ‚äì (y ‚à∏ x) ‚â§ zero
pre-total x y with ‚â§-total x y
... | inj‚ÇÅ x‚â§y = ‚â§-trans lower‚ÇÅ (lambda (‚â§-trans x‚â§y (+-runit .proj‚ÇÇ)))
... | inj‚ÇÇ y‚â§x = ‚â§-trans lower‚ÇÇ (lambda (‚â§-trans y‚â§x (+-runit .proj‚ÇÇ)))

---------------------------------------------------------------------------------------
-- FIXME: probably worth making a helper function for
-- nullary/unary/binary operations on setoids.
module _ where

  open _‚áís_

  add : ‚äó-setoid ‚Ñï‚Çõ ‚Ñï‚Çõ ‚áís ‚Ñï‚Çõ
  add .func (x , y) = x + y
  add .func-resp-‚âà (x‚ÇÅ‚âàx‚ÇÇ , y‚ÇÅ‚âày‚ÇÇ) = +-cong x‚ÇÅ‚âàx‚ÇÇ y‚ÇÅ‚âày‚ÇÇ

  zero-m : ùüô {0‚Ñì} {0‚Ñì} ‚áís ‚Ñï‚Çõ
  zero-m .func x = zero
  zero-m .func-resp-‚âà x = ‚âÉ-refl

------------------------------------------------------------------------------
-- Multiplication: _*_ is defined in Agda.Builtin.Nat

*-zero : ‚àÄ {x} ‚Üí (x * zero) ‚âÉ zero
*-zero {zero}   = ‚âÉ-refl
*-zero {succ x} = *-zero {x}

*-succ : ‚àÄ {x y} ‚Üí (y * succ x) ‚âÉ (y + (y * x))
*-succ {x} {zero} = ‚âÉ-refl
*-succ {x} {succ y} =
  begin succ (x + (y * succ x))  ‚âà‚ü® succ-cong (+-cong ‚âÉ-refl (*-succ {x} {y})) ‚ü©
        succ (x + (y + (y * x))) ‚âàÀò‚ü® succ-cong (+-assoc {x} {y}) ‚ü©
        succ ((x + y) + (y * x)) ‚âà‚ü® succ-cong (+-cong (+-comm {x} {y}) ‚âÉ-refl) ‚ü©
        succ ((y + x) + (y * x)) ‚âà‚ü® succ-cong (+-assoc {y} {x}) ‚ü©
        succ (y + (x + (y * x))) ‚àé
  where open ‚âà-Reasoning ‚âÉ-isEquivalence

*-mono : ‚àÄ {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ} ‚Üí x‚ÇÅ ‚â§ x‚ÇÇ ‚Üí y‚ÇÅ ‚â§ y‚ÇÇ ‚Üí (x‚ÇÅ * y‚ÇÅ) ‚â§ (x‚ÇÇ * y‚ÇÇ)
*-mono 0‚â§n         y‚ÇÅ‚â§y‚ÇÇ = 0‚â§n
*-mono (s‚â§s x‚ÇÅ‚â§x‚ÇÇ) y‚ÇÅ‚â§y‚ÇÇ = +-mono y‚ÇÅ‚â§y‚ÇÇ (*-mono x‚ÇÅ‚â§x‚ÇÇ y‚ÇÅ‚â§y‚ÇÇ)

*-lunit : ‚àÄ {x} ‚Üí (1 * x) ‚âÉ x
*-lunit = +-runit

*-runit : ‚àÄ {x} ‚Üí (x * 1) ‚âÉ x
*-runit {zero}   = ‚âÉ-zero
*-runit {succ x} = succ-cong *-runit

*-comm : ‚àÄ {x y} ‚Üí (x * y) ‚âÉ (y * x)
*-comm {zero}   {y} = ‚âÉ-sym (*-zero {y})
*-comm {succ x} {y} = ‚âÉ-trans (+-cong ‚âÉ-refl (*-comm {x} {y})) (‚âÉ-sym (*-succ {x} {y}))

+-*-distrib‚Çó : ‚àÄ {x y z} ‚Üí (x * (y + z)) ‚âÉ ((x * y) + (x * z))
+-*-distrib‚Çó {zero} = ‚âÉ-refl
+-*-distrib‚Çó {succ x} {y} {z} =
  begin
    ((y + z) + (x * (y + z)))       ‚âà‚ü® +-cong ‚âÉ-refl (+-*-distrib‚Çó {x} {y} {z}) ‚ü©
    ((y + z) + ((x * y) + (x * z))) ‚âà‚ü® +-interchange (Œª {x} {y} ‚Üí +-comm {x} {y} .proj‚ÇÅ) {y} {z} ‚ü©
    ((y + (x * y)) + (z + (x * z))) ‚àé
  where open ‚âà-Reasoning ‚âÉ-isEquivalence

+-*-distrib·µ£ : ‚àÄ {x y z} ‚Üí ((y + z) * x) ‚âÉ ((y * x) + (z * x))
+-*-distrib·µ£ {x} {y} {z} =
  begin
    (y + z) * x       ‚âà‚ü® *-comm {y + z} {x} ‚ü©
    x * (y + z)       ‚âà‚ü® +-*-distrib‚Çó {x} {y} {z} ‚ü©
    (x * y) + (x * z) ‚âà‚ü® +-cong (*-comm {x} {y}) (*-comm {x} {z}) ‚ü©
    (y * x) + (z * x) ‚àé
  where open ‚âà-Reasoning ‚âÉ-isEquivalence

*-assoc : ‚àÄ {x y z} ‚Üí ((x * y) * z) ‚âÉ (x * (y * z))
*-assoc {zero} = ‚âÉ-refl
*-assoc {succ x} {y} {z} =
  begin
    (y + (x * y)) * z       ‚âà‚ü® +-*-distrib·µ£ {z} {y} {x * y} ‚ü©
    (y * z) + ((x * y) * z) ‚âà‚ü® +-cong ‚âÉ-refl (*-assoc {x} {y} {z}) ‚ü©
    (y * z) + (x * (y * z)) ‚àé
  where open ‚âà-Reasoning ‚âÉ-isEquivalence

*-isMonoid : IsMonoid ‚â§-isPreorder _*_ 1
*-isMonoid .IsMonoid.mono = *-mono
*-isMonoid .IsMonoid.assoc {x} {y} {z} = *-assoc {x} {y} {z}
*-isMonoid .IsMonoid.lunit = *-lunit
*-isMonoid .IsMonoid.runit = *-runit

-- ‚Äúfeedback with an initial state‚Äù
*-cancel·µ£ : ‚àÄ {x y z} ‚Üí 1 ‚â§ x ‚Üí (y * x) ‚â§ (z * x) ‚Üí y ‚â§ z
*-cancel·µ£ {succ x} {zero}   {z}      (s‚â§s p) 0‚â§n     = 0‚â§n
*-cancel·µ£ {succ x} {succ y} {succ z} (s‚â§s p) (s‚â§s q) = s‚â§s (*-cancel·µ£ (s‚â§s p) (+-cancel‚Çó q))

*-cancel‚Çó : ‚àÄ {x y z} ‚Üí 1 ‚â§ x ‚Üí (x * y) ‚â§ (x * z) ‚Üí y ‚â§ z
*-cancel‚Çó {x} {y} {z} one‚â§x xy‚â§xz =
  *-cancel·µ£ one‚â§x (begin y * x ‚â§‚ü® *-comm {y} .proj‚ÇÅ ‚ü©
                         x * y ‚â§‚ü® xy‚â§xz ‚ü©
                         x * z ‚â§‚ü® *-comm {x} .proj‚ÇÅ ‚ü©
                         z * x ‚àé)
  where open ‚â§-Reasoning ‚â§-isPreorder

-- FIXME: _+_ and _*_ form a semiring

------------------------------------------------------------------------------
-- Even/odd

mutual
  data Even : ‚Ñï ‚Üí Set where
    zero : Even 0
    succ : ‚àÄ {n} ‚Üí Odd n ‚Üí Even (succ n)

  data Odd : ‚Ñï ‚Üí Set where
    succ : ‚àÄ {n} ‚Üí Even n ‚Üí Odd (succ n)

even‚äéodd : ‚àÄ n ‚Üí Even n ‚äé Odd n
even‚äéodd zero = inj‚ÇÅ zero
even‚äéodd (succ n) with even‚äéodd n
... | inj‚ÇÅ x = inj‚ÇÇ (succ x)
... | inj‚ÇÇ y = inj‚ÇÅ (succ y)

------------------------------------------------------------------------------
-- Halving

-- Floor of n/2
‚åä_/2‚åã : ‚Ñï ‚Üí ‚Ñï
‚åä zero          /2‚åã = 0
‚åä succ zero     /2‚åã = 0
‚åä succ (succ n) /2‚åã = succ ‚åä n /2‚åã

-- Ceiling of n/2
‚åà_/2‚åâ : ‚Ñï ‚Üí ‚Ñï
‚åà zero          /2‚åâ = 0
‚åà succ zero     /2‚åâ = 1
‚åà succ (succ n) /2‚åâ = succ ‚åà n /2‚åâ

even-agree : ‚àÄ n ‚Üí Even n ‚Üí ‚åä n /2‚åã ‚âÉ ‚åà n /2‚åâ
even-agree zero            zero            = ‚âÉ-refl
even-agree (succ (succ n)) (succ (succ e)) = succ-cong (even-agree n e)

odd-off-by-one : ‚àÄ n ‚Üí Odd n ‚Üí succ ‚åä n /2‚åã ‚âÉ ‚åà n /2‚åâ
odd-off-by-one (succ zero)     (succ zero)     = ‚âÉ-refl
odd-off-by-one (succ (succ n)) (succ (succ o)) = succ-cong (odd-off-by-one n o)

even-‚åä/2‚åã+‚åä/2‚åã : ‚àÄ n ‚Üí Even n ‚Üí (‚åä n  /2‚åã + ‚åä n  /2‚åã) ‚âÉ n
even-‚åä/2‚åã+‚åä/2‚åã zero            zero            = ‚âÉ-refl
even-‚åä/2‚åã+‚åä/2‚åã (succ (succ n)) (succ (succ e)) = ‚âÉ-trans (succ-cong +-succ) (succ-cong (succ-cong (even-‚åä/2‚åã+‚åä/2‚åã n e)))

even-‚åà/2‚åâ+‚åà/2‚åâ : ‚àÄ n ‚Üí Even n ‚Üí (‚åà n  /2‚åâ + ‚åà n  /2‚åâ) ‚âÉ n
even-‚åà/2‚åâ+‚åà/2‚åâ .0 zero = ‚âÉ-refl
even-‚åà/2‚åâ+‚åà/2‚åâ .(succ (succ _)) (succ (succ x)) = ‚âÉ-trans (succ-cong +-succ) (succ-cong (succ-cong (even-‚åà/2‚åâ+‚åà/2‚åâ _ x)))

odd-‚åä/2‚åã+‚åä/2‚åã : ‚àÄ n ‚Üí Odd n ‚Üí succ (‚åä n  /2‚åã + ‚åä n  /2‚åã) ‚âÉ n
odd-‚åä/2‚åã+‚åä/2‚åã 1               (succ zero)     = ‚âÉ-refl
odd-‚åä/2‚åã+‚åä/2‚åã (succ (succ _)) (succ (succ x)) = succ-cong (succ-cong (‚âÉ-trans +-succ (odd-‚åä/2‚åã+‚åä/2‚åã _ x)))

odd-‚åà/2‚åâ+‚åà/2‚åâ : ‚àÄ n ‚Üí Odd n ‚Üí (‚åà n /2‚åâ + ‚åà n /2‚åâ) ‚âÉ succ n
odd-‚åà/2‚åâ+‚åà/2‚åâ .1               (succ zero)     = ‚âÉ-refl
odd-‚åà/2‚åâ+‚åà/2‚åâ .(succ (succ _)) (succ (succ x)) = succ-cong (‚âÉ-trans +-succ (succ-cong (odd-‚åà/2‚åâ+‚åà/2‚åâ _ x)))

/2-< : ‚àÄ {n} ‚Üí ‚åä n /2‚åã < succ n
/2-< {zero}          = n<s
/2-< {succ zero}     = <s n<s
/2-< {succ (succ n)} = <s (s<s /2-<)

/2-<' : ‚àÄ {n} ‚Üí ‚åà n /2‚åâ < succ n
/2-<' {zero}          = n<s
/2-<' {succ zero}     = n<s
/2-<' {succ (succ n)} = <s (s<s /2-<')

------------------------------------------------------------------------------
-- Exponentiation by 2
2^ : ‚Ñï ‚Üí ‚Ñï
2^ zero     = 1
2^ (succ n) = 2 * 2^ n

------------------------------------------------------------------------------
-- Logarithm, using complete induction and repeated halving.

data Acc (n : ‚Ñï) : Set where
  acc : (‚àÄ {m} ‚Üí m < n ‚Üí Acc m) ‚Üí Acc n

mutual
  <-acc : ‚àÄ {n} ‚Üí Acc n
  <-acc = acc <-acc-helper

  <-acc-helper : ‚àÄ {m n} ‚Üí m < n ‚Üí Acc m
  <-acc-helper {m} {succ m} n<s = <-acc
  <-acc-helper {m} {succ _} (<s m<n) = <-acc-helper m<n

‚åälog2'‚åã : (n : ‚Ñï) ‚Üí Acc n ‚Üí ‚Ñï
‚åälog2'‚åã zero            _       = zero
‚åälog2'‚åã (succ zero)     _       = zero
‚åälog2'‚åã (succ (succ n)) (acc r) = succ (‚åälog2'‚åã (succ ‚åä n /2‚åã) (r (s<s /2-<)))

‚åälog2‚åã : ‚Ñï ‚Üí ‚Ñï
‚åälog2‚åã n = ‚åälog2'‚åã n <-acc

-- should have 2^ (‚åälog2‚åã n) ‚â§ n ‚â§ 2^ (‚åàlog2‚åâ n)
-- and they are at most one apart
‚åàlog2'‚åâ : (n : ‚Ñï) ‚Üí Acc n ‚Üí ‚Ñï
‚åàlog2'‚åâ zero            _       = zero
‚åàlog2'‚åâ (succ zero)     _       = zero
‚åàlog2'‚åâ (succ (succ n)) (acc r) = succ (‚åàlog2'‚åâ (succ ‚åà n /2‚åâ) (r (s<s /2-<')))

‚åàlog2‚åâ : ‚Ñï ‚Üí ‚Ñï
‚åàlog2‚åâ n = ‚åàlog2'‚åâ n <-acc

neq-0 : ‚Ñï ‚Üí Prop
neq-0 zero     = ‚ä•
neq-0 (succ _) = ‚ä§

n+n‚âÉ2*n : ‚àÄ n ‚Üí n + n ‚âÉ 2 * n
n+n‚âÉ2*n n = +-cong {n} ‚âÉ-refl (‚âÉ-sym +-runit)

-- FIXME: need succ ‚åä n/2‚åã + succ ‚åä n/2‚åã ‚â§ succ (succ n)

-- FIXME: move this up to the halving section
ceil-lemma : ‚àÄ n ‚Üí succ (succ n) ‚â§ succ ‚åà n /2‚åâ + succ ‚åà n /2‚åâ
ceil-lemma zero = ‚â§-refl
ceil-lemma (succ zero) = s‚â§s (s‚â§s (s‚â§s 0‚â§n))
ceil-lemma (succ (succ n)) = s‚â§s (s‚â§s (‚â§-trans (ceil-lemma n) (+-succ .proj‚ÇÇ)))

‚åàlog2'‚åâ-upper : (n : ‚Ñï) (r : Acc n) ‚Üí n ‚â§ 2^ (‚åàlog2'‚åâ n r)
‚åàlog2'‚åâ-upper zero            r = 0‚â§n
‚åàlog2'‚åâ-upper (succ zero)     r = ‚â§-refl
‚åàlog2'‚åâ-upper (succ (succ n)) (acc r) = begin
    succ (succ n)
  ‚â§‚ü® ceil-lemma n ‚ü©
    succ ‚åà n /2‚åâ + succ ‚åà n /2‚åâ
  ‚â§‚ü® +-mono p p ‚ü©
    2^ (‚åàlog2'‚åâ (succ ‚åà n /2‚åâ) (r (s<s /2-<'))) + 2^ (‚åàlog2'‚åâ (succ ‚åà n /2‚åâ) (r (s<s /2-<')))
  ‚â§‚ü® n+n‚âÉ2*n (2^ (‚åàlog2'‚åâ (succ ‚åà n /2‚åâ) (r (s<s /2-<')))) .proj‚ÇÅ ‚ü©
    2 * 2^ (‚åàlog2'‚åâ (succ ‚åà n /2‚åâ) (r (s<s /2-<')))
  ‚àé
  where p : succ ‚åà n /2‚åâ ‚â§ 2^ (‚åàlog2'‚åâ (succ ‚åà n /2‚åâ) (r (s<s /2-<')))
        p = ‚åàlog2'‚åâ-upper (succ ‚åà n /2‚åâ) (r (s<s /2-<'))
        open ‚â§-Reasoning ‚â§-isPreorder

‚åàlog2‚åâ-upper : ‚àÄ n ‚Üí n ‚â§ 2^ (‚åàlog2‚åâ n)
‚åàlog2‚åâ-upper n = ‚åàlog2'‚åâ-upper n <-acc


-- FIXME: ‚åälog2'‚åã-lower (except for 0), and they are always within 1
-- of each other
