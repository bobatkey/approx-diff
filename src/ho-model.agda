{-# OPTIONS --postfix-projections --prop --safe #-}

module ho-model where

-- PLAN
-- 1. galois is a CMonCategory
-- 2. PSh(galois) is a complete CMonCategory
-- 3. So PSh(galois) is a Category with biproducts and all discrete products
-- 4. So Fam(PSh(galois)) is Cartesian Closed with all coproducts

open import Level using (suc; 0‚Ñì)
open import categories using (Category; HasProducts; HasTerminal; setoid‚Üícategory)
open import functor using (HasLimits'; limits'‚Üílimits)
import galois
import fam
open import cmon-category using (CMonCategory)
import commutative-monoid-cat
import cmon-category
import cmon-enriched
import grothendieck
import product-diagram

------------------------------------------------------------------------------
-- Stage 0 : the base category
Gal : CMonCategory (suc 0‚Ñì) 0‚Ñì 0‚Ñì
Gal = record { cat = galois.cat ; cmon-enriched = galois.cmon-enriched }

------------------------------------------------------------------------------
-- Stage 1 : Presheaves over the base category

open cmon-category.presheaves 0‚Ñì Gal
  renaming (PSh to PSh‚ü®Gal‚ü©; PSh‚ÇÄ to PSh‚ü®Gal‚ü©‚ÇÄ)

-- FIXME: the following three should be in cmon-category.presheaves

PSh‚ü®Gal‚ü©-limits : ‚àÄ (ùíÆ : Category (suc 0‚Ñì) (suc 0‚Ñì) (suc 0‚Ñì)) ‚Üí HasLimits' ùíÆ PSh‚ü®Gal‚ü©‚ÇÄ
PSh‚ü®Gal‚ü©-limits ùíÆ = cmon-category.limits (CMonCategory.opposite Gal) (cmon-category.CMon (suc 0‚Ñì) (suc 0‚Ñì)) ùíÆ
  Œª D ‚Üí commutative-monoid-cat.limits 0‚Ñì ùíÆ D

{-
PSh‚ü®Gal‚ü©-limits-0 : ‚àÄ (ùíÆ : Category 0‚Ñì 0‚Ñì 0‚Ñì) ‚Üí HasLimits' ùíÆ PSh‚ü®Gal‚ü©‚ÇÄ
PSh‚ü®Gal‚ü©-limits-0 ùíÆ = cmon-category.limits (CMonCategory.opposite Gal) (cmon-category.CMon (suc 0‚Ñì) (suc 0‚Ñì)) ùíÆ
  Œª D ‚Üí commutative-monoid-cat.limits 0‚Ñì ùíÆ D
-}

-- FIXME: if we have all limits, then we can get all products. This
-- has been partially done in product-diagram.agda. FIXME: need to make this
PSh‚ü®Gal‚ü©-products : HasProducts (PSh‚ü®Gal‚ü© .CMonCategory.cat)
PSh‚ü®Gal‚ü©-products =
  product-diagram.limits‚Üíproducts (CMonCategory.cat PSh‚ü®Gal‚ü©) (limits'‚Üílimits {!PSh‚ü®Gal‚ü©-limits !})

PSh‚ü®Gal‚ü©-terminal : HasTerminal (PSh‚ü®Gal‚ü© .CMonCategory.cat)
PSh‚ü®Gal‚ü©-terminal = {!!}

PSh‚ü®Gal‚ü©-biproducts : (x y : Category.obj (CMonCategory.cat PSh‚ü®Gal‚ü©)) ‚Üí
     cmon-enriched.Biproduct (CMonCategory.cmon-enriched PSh‚ü®Gal‚ü©) x y
PSh‚ü®Gal‚ü©-biproducts =
  cmon-enriched.cmon+products‚Üíbiproducts (PSh‚ü®Gal‚ü© .CMonCategory.cmon-enriched) PSh‚ü®Gal‚ü©-products

------------------------------------------------------------------------------
-- Stage 2 : Families over presheaves is a model of the higher order language

open grothendieck.CategoryOfFamilies 0‚Ñì 0‚Ñì (PSh‚ü®Gal‚ü© .CMonCategory.cat)
  renaming ( cat to Fam‚ü®PSh‚ü®Gal‚ü©‚ü©
           ; terminal to make-terminal
           )
  using (module products; lists)

-- FIXME: terminal object

Fam‚ü®PSh‚ü®Gal‚ü©‚ü©-terminal : HasTerminal Fam‚ü®PSh‚ü®Gal‚ü©‚ü©
Fam‚ü®PSh‚ü®Gal‚ü©‚ü©-terminal = make-terminal PSh‚ü®Gal‚ü©-terminal

open products PSh‚ü®Gal‚ü©-products
  renaming ( products         to Fam‚ü®PSh‚ü®Gal‚ü©‚ü©-products
           ; strongCoproducts to Fam‚ü®PSh‚ü®Gal‚ü©‚ü©-strongCoproducts
           )
  using ()
  public

open import families-exponentials
  0‚Ñì 0‚Ñì (PSh‚ü®Gal‚ü© .CMonCategory.cat) (PSh‚ü®Gal‚ü© .CMonCategory.cmon-enriched) PSh‚ü®Gal‚ü©-biproducts
    (fam.hasSetoidProducts (suc 0‚Ñì) (suc 0‚Ñì) (PSh‚ü®Gal‚ü© .CMonCategory.cat) Œª A ‚Üí PSh‚ü®Gal‚ü©-limits (setoid‚Üícategory A))
  renaming ( exponentials     to Fam‚ü®PSh‚ü®Gal‚ü©‚ü©-exponentials )
  using    ()
  public
