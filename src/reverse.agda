{-# OPTIONS --postfix-projections --safe --without-K #-}

module reverse where

open import Level
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _√ó_; _,_)
open import Data.Unit using (‚ä§; tt)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)

open import join-semilattice
  renaming (_=>_ to _=>J_; ùüô to ùüôJ; _‚äï_ to _‚äïJ_; ‚ü®_,_‚ü© to ‚ü®_,_‚ü©J;
            project‚ÇÅ to project‚ÇÅJ; project‚ÇÇ to project‚ÇÇJ;
            L to LJ)
open import meet-semilattice
  renaming (_=>_ to _=>M_; ùüô to ùüôM; _‚äï_ to _‚äïM_; ‚ü®_,_‚ü© to ‚ü®_,_‚ü©M;
            project‚ÇÅ to project‚ÇÅM; project‚ÇÇ to project‚ÇÇM;
            inject‚ÇÅ to inject‚ÇÅM;
            L to LM; _‚àò_ to _‚àòM_; id to idM)

------------------------------------------------------------------------------
--
-- Join Semilattices, and an implementation of reverse-mode automatic
-- approximation.
--
-- TODO:
--   1. Prove the expected categorical properties of JoinSemilattices
--   2. Prove the expected categorical properties of ApproxSets
--   3. Add in the forward approximation pass to ApproxSets
--   4. Show that a typed Œª-calculus can be interpreted using ApproxSets
--   5. Show that the forwards and reverse-mode approximations form a Galois
--      connection at first order type.
--
--   6. Show that ApproxSets (with forward approximation) form a
--      Tangent Category
--
--   7. Abstract the development below to any category with biproducts
--      and Set-sigmas
--
------------------------------------------------------------------------------


------------------------------------------------------------------------------
-- Sets-with-approximations, the central concept

record ApproxSet : Set (suc 0‚Ñì) where
  field
    elem    : Set
    fapprox : elem ‚Üí MeetSemilattice
    rapprox : elem ‚Üí JoinSemilattice
open ApproxSet

record _‚áí_ (X Y : ApproxSet) : Set where
  field
    func : X .elem ‚Üí Y .elem
    fwd : (x : X .elem) ‚Üí X .fapprox x =>M Y .fapprox (func x)
    bwd : (x : X .elem) ‚Üí Y .rapprox (func x) =>J X .rapprox x
open _‚áí_

-- Have a bicartesian closed category... here's the definitions at least:

-- Any old set becomes a ‚Äúdiscrete‚Äù object
Disc : Set ‚Üí ApproxSet
Disc A .elem = A
Disc A .rapprox _ = ùüôJ
Disc A .fapprox _ = ùüôM

Disc-f : ‚àÄ {A B} ‚Üí (A ‚Üí B) ‚Üí Disc A ‚áí Disc B
Disc-f f .func = f
Disc-f f .fwd x = idM
Disc-f f .bwd x = id

-- Disc preserves sums and products too

-- Terminal Object
‚ä§‚Çê : ApproxSet
‚ä§‚Çê .elem = ‚ä§
‚ä§‚Çê .rapprox tt = ùüôJ
‚ä§‚Çê .fapprox tt = ùüôM

-- Products
_‚äó_ : ApproxSet ‚Üí ApproxSet ‚Üí ApproxSet
(X ‚äó Y) .elem = X .elem √ó Y .elem
(X ‚äó Y) .fapprox (x , y) = X .fapprox x ‚äïM Y .fapprox y
(X ‚äó Y) .rapprox (x , y) = X .rapprox x ‚äïJ Y .rapprox y

œÄ‚ÇÅ : ‚àÄ {X Y} ‚Üí (X ‚äó Y) ‚áí X
œÄ‚ÇÅ .func = proj‚ÇÅ
œÄ‚ÇÅ .fwd (x , y) = project‚ÇÅM
œÄ‚ÇÅ .bwd (x , y) = inject‚ÇÅ

œÄ‚ÇÇ : ‚àÄ {X Y} ‚Üí (X ‚äó Y) ‚áí Y
œÄ‚ÇÇ .func = proj‚ÇÇ
œÄ‚ÇÇ .fwd (x , y) = project‚ÇÇM
œÄ‚ÇÇ .bwd (x , y) = inject‚ÇÇ

pair : ‚àÄ {X Y Z} ‚Üí X ‚áí Y ‚Üí X ‚áí Z ‚Üí X ‚áí (Y ‚äó Z)
pair f g .func x = f .func x , g .func x
pair f g .fwd x = ‚ü® f .fwd x , g .fwd x ‚ü©M
pair f g .bwd x = [ f .bwd x , g .bwd x ]

-- Sums
_+_ : ApproxSet ‚Üí ApproxSet ‚Üí ApproxSet
(X + Y) .elem = X .elem ‚äé Y .elem
(X + Y) .rapprox (inj‚ÇÅ x) = X .rapprox x
(X + Y) .rapprox (inj‚ÇÇ y) = Y .rapprox y
(X + Y) .fapprox (inj‚ÇÅ x) = X .fapprox x
(X + Y) .fapprox (inj‚ÇÇ y) = Y .fapprox y

inl : ‚àÄ {X Y} ‚Üí X ‚áí (X + Y)
inl .func = inj‚ÇÅ
inl .fwd x = idM
inl .bwd x = id

inr : ‚àÄ {X Y} ‚Üí Y ‚áí (X + Y)
inr .func = inj‚ÇÇ
inr .fwd y = idM
inr .bwd y = id

case : ‚àÄ {W X Y Z} ‚Üí (W ‚äó X) ‚áí Z ‚Üí (W ‚äó Y) ‚áí Z ‚Üí (W ‚äó (X + Y)) ‚áí Z
case m‚ÇÅ m‚ÇÇ .func (w , inj‚ÇÅ x) = m‚ÇÅ .func (w , x)
case m‚ÇÅ m‚ÇÇ .func (w , inj‚ÇÇ y) = m‚ÇÇ .func (w , y)
case m‚ÇÅ m‚ÇÇ .fwd (w , inj‚ÇÅ x) = m‚ÇÅ .fwd (w , x)
case m‚ÇÅ m‚ÇÇ .fwd (w , inj‚ÇÇ y) = m‚ÇÇ .fwd (w , y)
case m‚ÇÅ m‚ÇÇ .bwd (w , inj‚ÇÅ x) = m‚ÇÅ .bwd (w , x)
case m‚ÇÅ m‚ÇÇ .bwd (w , inj‚ÇÇ y) = m‚ÇÇ .bwd (w , y)

-- Functions
_‚ä∏_ : ApproxSet ‚Üí ApproxSet ‚Üí ApproxSet
(X ‚ä∏ Y) .elem = X ‚áí Y
(X ‚ä∏ Y) .rapprox f = ‚®Å (X .elem) Œª x ‚Üí Y .rapprox (f .func x)
(X ‚ä∏ Y) .fapprox f = Œ† (X .elem) Œª x ‚Üí Y .fapprox (f .func x)

eval : ‚àÄ {X Y} ‚Üí ((X ‚ä∏ Y) ‚äó X) ‚áí Y
eval .func (f , x) = f .func x
eval {X}{Y} .fwd (f , x) = proj-Œ† _ _ x ‚àòM project‚ÇÅM
eval {X}{Y} .bwd (f , x) =
  ‚ü® inj-‚®Å (X .elem) (Œª x ‚Üí Y .rapprox (f .func x)) x , f .bwd x ‚ü©J

lambda : ‚àÄ {X Y Z} ‚Üí (X ‚äó Y) ‚áí Z ‚Üí X ‚áí (Y ‚ä∏ Z)
lambda m .func x .func y = m .func (x , y)
lambda m .func x .fwd y = m .fwd (x , y) ‚àòM {!!}
lambda m .func x .bwd y = project‚ÇÇJ ‚àò m .bwd (x , y)
lambda m .fwd x = lambda-Œ† _ _ Œª y ‚Üí m .fwd (x , y) ‚àòM inject‚ÇÅM
lambda m .bwd x = elim-‚®Å _ _ _ Œª y ‚Üí project‚ÇÅJ ‚àò m .bwd (x , y)

-- Lifting
‚Ñí : ApproxSet ‚Üí ApproxSet
‚Ñí X .elem = X .elem
‚Ñí X .rapprox x = LJ (X .rapprox x)
‚Ñí X .fapprox x = LM (X .fapprox x)

‚Ñí-unit : ‚àÄ {X} ‚Üí X ‚áí ‚Ñí X
‚Ñí-unit .func x = x
‚Ñí-unit .fwd x = L-unit
‚Ñí-unit .bwd x = ‚ä•-map

‚Ñí-join : ‚àÄ {X} ‚Üí ‚Ñí (‚Ñí X) ‚áí ‚Ñí X
‚Ñí-join .func x = x
‚Ñí-join .fwd x = meet-semilattice.L-join
‚Ñí-join .bwd x = L-dup

-- FIXME: strength, functoriality

-- Approximable lists: ŒºY. 1 + ‚Ñí(X √ó Y)
--
-- These are lists that can be approximated by forgetting their tails
open import Data.List using (List; []; _‚à∑_)

Ls-rapprox : ‚àÄ X ‚Üí List (X .elem) ‚Üí JoinSemilattice
Ls-rapprox X []       = ùüôJ
Ls-rapprox X (x ‚à∑ xs) = LJ (X .rapprox x ‚äïJ Ls-rapprox X xs)

Ls-fapprox : ‚àÄ X ‚Üí List (X .elem) ‚Üí MeetSemilattice
Ls-fapprox X []       = ùüôM
Ls-fapprox X (x ‚à∑ xs) = LM (X .fapprox x ‚äïM Ls-fapprox X xs)

Ls : ApproxSet ‚Üí ApproxSet
Ls X .elem = List (X .elem)
Ls X .rapprox = Ls-rapprox X
Ls X .fapprox = Ls-fapprox X

nil : ‚àÄ {X} ‚Üí ‚ä§‚Çê ‚áí Ls X
nil .func tt = []
nil .fwd tt = idM
nil .bwd tt = id

cons : ‚àÄ {X} ‚Üí ‚Ñí (X ‚äó Ls X) ‚áí Ls X
cons .func (x , xs) = x ‚à∑ xs
cons .fwd (x , xs) = idM
cons .bwd (x , xs) = id

module _ {W X Y} (nil-f : W ‚áí Y) (cons-f : (W ‚äó ‚Ñí (X ‚äó Y)) ‚áí Y) where

  elim-func : W .elem √ó List (X .elem) ‚Üí Y .elem
  elim-func (w , [])     = nil-f .func w
  elim-func (w , x ‚à∑ xs) = cons-f .func (w , x , elim-func (w , xs))

  elim-bwd : (x : W .elem √ó List (X .elem)) ‚Üí Y .rapprox (elim-func x) =>J (W .rapprox (x .proj‚ÇÅ) ‚äïJ Ls-rapprox X (x .proj‚ÇÇ))
  elim-bwd (w , []) = inject‚ÇÅ ‚àò nil-f .bwd w
  elim-bwd (w , x ‚à∑ xs) =
    -- FIXME: this is a bit muddled, and probably shouldn't be passing W around
    ‚ü® project‚ÇÅJ , (L-func ‚ü® project‚ÇÅJ , ((project‚ÇÇJ ‚àò elim-bwd (w , xs)) ‚àò project‚ÇÇJ) ‚ü©J ‚àò project‚ÇÇJ) ‚ü©J ‚àò cons-f .bwd (w , x , elim-func (w , xs))

  Ls-elim : (W ‚äó Ls X) ‚áí Y
  Ls-elim .func = elim-func
  Ls-elim .fwd = {!!}
  Ls-elim .bwd = elim-bwd
